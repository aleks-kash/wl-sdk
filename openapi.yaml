openapi: 3.1.0
info:
  title: 'WellnessLiving public API'
  version: 1.1.20250220113447
  description: |
    WellnessLiving API is a RESTful way to access and manage your business data.
    Last updated at: 2025-02-20 11:34:47
servers:
  - url: https://us.wellnessliving.com
    description: 'WellnessLiving server for businesses served from the United States data center'
  - url: https://au.wellnessliving.com
    description: 'WellnessLiving server for businesses served from the Australia data center'
paths:
  '/Core/Request/Example.json':
    get:
      summary: ''
      parameters:
        - name: i_argument
          in: query
          description: 'Example argument.'
          schema:
            type: number
            format: int32
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  i_result:
                    type: number
                    format: int32
                    description: 'Example result.'
                  s_log:
                    type: string
                    description: 'Key of the log record written by the API controller.'
      tags:
        - Request-Example
  '/Core/Geo/Combobox.json':
    get:
      summary: 'Returns a list of cities to show in combobox list.'
      parameters:
        - name: id_locale
          in: query
          description: 'The locale ID used as a filter. The locale is generally a country. One of the {@link LocaleSid} constants. This will be `0` if all locations are searched.'
          schema:
            type: number
            format: int32
        - name: s_value
          in: query
          description: 'The city name (or a fragment of the city name) used for the search.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'A list of items to show in the combobox list. Each element of the array is a city matching the string with the following structure: <dl> <dt>string <var>s_value</var></dt> <dd>The human-readable name of the city, including the state/province and country.</dd> <dt>string <var>s_key</var></dt> <dd>The <var>k_city</var> value for the city.</dd> </dl>'
      tags:
        - Geo-Combobox
  '/Core/WebSocket/Subscribe.json':
    post:
      summary: 'Checks whether a listener can subscribe to specified channel. Subscribes in a case of positive result.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_key:
                  type: array
                  description: 'Keys of the channel. Key is name of a key field in a channel controller. Value is its value. Subscriber will only receive notifications about events in which all these values equal values specified here.'
                cid_channel:
                  type: number
                  format: int32
                  description: 'Channel controller CID.'
                s_password:
                  type: string
                  description: 'Subscriber password.'
                s_token:
                  type: string
                  description: 'Request token. This token is only used for asynchronous functions, and identifies a specific request.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_message_broadcast:
                    type: array
                    description: 'All messages in queue. Key is a message key. Value is message data. When a client is initially subscribed for a WebSocket channel, entire message queue is sent to the client. This is needed to send message that were generated before a client has subscribed.'
      tags:
        - WebSocket-Subscribe
  '/Core/Captcha/CaptchaRequire.json':
    get:
      summary: ''
      parameters:
        - name: a_arguments
          in: query
          description: 'Arguments for creating CAPTCHA object.'
          schema:
            type: array
        - name: cid_captcha
          in: query
          description: 'The CID of the CAPTCHA.'
          schema:
            type: number
            format: int32
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_require:
                    type: boolean
                    description: 'This will be `true` if a CAPTCHA is required. Otherwise, this will be `false`.'
      tags:
        - Captcha-CaptchaRequire
  '/Core/Google/GoogleCaptcha.json':
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_action:
                  type: string
                  description: 'The action name. Used to determine the place where the CAPTCHA is needed in documentation for endpoints that used the CAPTCHA.'
                text_token:
                  type: string
                  description: 'The user token CAPTCHA.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Google-GoogleCaptcha
  '/Social/Microsoft/Login.json':
    delete:
      summary: 'Removes the association between a website client and a Microsoft account.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: 'The client for whom the Microsoft account will be unlinked.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Microsoft-Login
    get:
      summary: 'Collects data for the Microsoft login button.'
      parameters:
        - name: uid
          in: query
          description: 'The client for whom the Microsoft account will be unlinked.'
          schema:
            type: string
        - name: url_redirect
          in: query
          description: 'The Redirect URI for external applications. The link to the page on which Microsoft will return the result after authorization. * All possible links must be registered in the Microsoft application used for authorization. * WARNING: Do not use this link for a direct redirect. This will present a vulnerability. * A {@link LoginApi::$url_login} link will be generated along with this redirect URI. * When checking the received {@link LoginApi::$s_code} from Microsoft. The link must be sent along with it to the {@link LoginApi::post()} method.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_exists:
                    type: boolean
                    description: 'If `true`, the user has a bound Microsoft account. Otherwise, this will be `false`.'
                  url_login:
                    type: string
                    description: 'The Microsoft OAuth 2.0 authorization link.'
      tags:
        - Microsoft-Login
    post:
      summary: 'Signs a user in with Microsoft.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_external:
                  type: boolean
                  description: 'If authorization is performed in a third-party application, set this flag in case of authorization errors.'
                s_code:
                  type: string
                  description: 'The authorization code that the app requested.'
                s_state:
                  type: string
                  description: 'If a state parameter is included in the request, the same value should appear in the response. The app should verify that the state values in the request and response are identical.'
                url_redirect:
                  type: string
                  description: 'The Redirect URI for external applications. The link to the page on which Microsoft will return the result after authorization. * All possible links must be registered in the Microsoft application used for authorization. * WARNING: Do not use this link for a direct redirect. This will present a vulnerability. * A {@link LoginApi::$url_login} link will be generated along with this redirect URI. * When checking the received {@link LoginApi::$s_code} from Microsoft. The link must be sent along with it to the {@link LoginApi::post()} method.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Microsoft-Login
  '/Wl/Visit/VisitStatus.json':
    get:
      summary: 'Gets visit status.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'The time zone key. `null` if not set then use default timezone client. See {@link ProfileTimezone::createInBusiness()}.'
          schema:
            type: null|string
        - name: k_visit
          in: query
          description: 'The visit key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_resource:
                    type: array[]|null
                    description: 'An array of service resources. The key refers to the `k_resource_type`. See {@link \RsResourceTypeSql}. The value is an array with the following key: `k_resource`. See {@link \RsResourceSql}. The array element contains a nested array with `i_index` and `i_quantity`. See {@link \RsResourceBusySql}. This will be empty if not set yet.'
                  a_resource_alias:
                    type: array[]|null
                    description: 'An array of service resources. Contains an extended data set, as well as a different format than {@link VisitStatusApi::$a_resource}. Each element contains the following set of data: <dl> <dt>string <var>k_resource</var></dt> <dd>Resource primary key in {@link \RsResourceSql} table.</dd> <dt>string <var>k_resource_type</var></dt> <dd>Resource type primary key in {@link \RsResourceTypeSql} table.</dd> <dt>int <var>i_index</var></dt> <dd>Index of the resource on the layout.</dd> <dt>int <var>i_quantity</var></dt> <dd>Quantity of the resource on the layout.</dd> <dt>string <var>text_alias</var></dt> <dd>Resource''s custom name (alias) on the layout.</dd> <dt>string <var>text_title</var></dt> <dd>Resource''s title.</dd> </dl>'
                  a_staff:
                    type: string[]
                    description: 'The list of keys of staff members that conduct the class.'
                  dt_date:
                    type: string
                    description: 'The visit date and time in UTC and in MySQL format.'
                  dtl_date:
                    type: string
                    description: 'The visit date in the location''s time zone and in MySQL format.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The service duration (in minutes).'
                  i_wait_spot:
                    type: number
                    format: int32
                    description: 'The client''s place in a waiting list.'
                  id_mode:
                    type: number
                    format: int32
                    description: 'The source of the visit or the visit change. One of the {@link \Wl\Mode\ModeSid} constants. If you''re unsure about the value to use, keep the default value.'
                  id_visit:
                    type: string
                    description: 'The status of the visit. One of the {@link \Wl\Visit\VisitSid} constants.'
                  is_event:
                    type: boolean
                    description: 'Determines whether the visit is from an event.'
                  k_class:
                    type: string
                    description: 'The class key.'
                  k_class_period:
                    type: string
                    description: 'The class period key.'
                  k_location:
                    type: string
                    description: 'The key of the location where visit provides.'
                  k_service:
                    type: string|null
                    description: 'The service key. If ''null'', the visit isn''t from an appointment.'
                  k_staff:
                    type: string|null
                    description: 'The key of the staff providing the appointment. If `null`, the visit isn''t from an appointment (for example, the visit is from an asset).'
                  s_calendar_file_content:
                    type: string
                    description: 'The .ics file for adding the service to a phone calendar.'
                  text_abbr_timezone:
                    type: string
                    description: 'The text abbreviation of the time zone.'
                  text_location:
                    type: string
                    description: 'The full address of the location for the visit (not the name of the location).'
                  text_staff:
                    type: string
                    description: 'The full name of the staff member who conducts this visit. If there are several staff members conducting the visit, their names will all be listed and separated by commas.'
                  text_title:
                    type: string
                    description: 'The service title.'
      tags:
        - Visit-VisitStatus
    post:
      summary: 'Changes visit status.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_visit_from:
                  type: string|null
                  description: 'The status of the visit from which the transition is made. One of the {@link \Wl\Visit\VisitSid} constants. If the visit status is passed, it will be used to check with the actual status in the database. If `null`, the visit hasn''t yet passed. If the status of this parameter is out of date, the API call will refresh it.'
                is_charge_fee:
                  type: boolean
                  description: 'The staff decision to charge (or not charge) a penalty when a client meets late cancel/no-show requirements. If `true`, a late cancel fee should be charged. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_mail_pattern_live:
                  type: string|null
                  description: 'The email pattern key. If `null`, the live email pattern shouldn''t be used.'
                k_visit:
                  type: string
                  description: 'The visit key.'
                text_reason:
                  type: string
                  description: 'The reason the visit was canceled.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_mode:
                    type: number
                    format: int32
                    description: 'The source of the visit or the visit change. One of the {@link \Wl\Mode\ModeSid} constants. If you''re unsure about the value to use, keep the default value.'
                  id_visit:
                    type: string
                    description: 'The status of the visit. One of the {@link \Wl\Visit\VisitSid} constants.'
      tags:
        - Visit-VisitStatus
  '/Wl/Event/EventCancelWhole.json':
    post:
      summary: 'Cancels book of event {@link EventCancelWholeApi::$k_class}.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Key of the business in which the class resides.'
                k_class:
                  type: string
                  description: 'An event key.'
                uid:
                  type: string
                  description: 'A user key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Event-EventCancelWhole
  '/Wl/Event/EventList.json':
    get:
      summary: ''
      parameters:
        - name: a_class_filter
          in: query
          description: 'List of class keys applied by filter.'
          schema:
            type: string[]|null
        - name: a_day
          in: query
          description: 'List of day the week applied by filter {@link \ADateWeekSid}.'
          schema:
            type: string[]|null
        - name: a_enrollment_block_filter
          in: query
          description: 'List of enrollment blocks keys applied by filter.'
          schema:
            type: string[]|null
        - name: a_location
          in: query
          description: 'List of location keys applied by filter.'
          schema:
            type: string[]|null
        - name: a_staff
          in: query
          description: 'List of staff keys applied by filter.'
          schema:
            type: string[]|null
        - name: a_time
          in: query
          description: 'List of time day applied by filter {@link \RsScheduleTimeSid}.'
          schema:
            type: string[]|null
        - name: a_virtual
          in: query
          description: 'List of IDs to include/exclude virtual events. If the only ID is {@link YesNoSid::YES}, only virtual events are included. If the only ID is {@link YesNoSid::NO}, only in-person events are included. Otherwise, no filtering is done.'
          schema:
            type: string[]|null
        - name: dl_end
          in: query
          description: 'The end date of the range from which a list of events should be retrieved. <tt>null</tt> if the range has no end date.'
          schema:
            type: string
        - name: dl_start
          in: query
          description: 'The start date of the range from which a list of events should be retrieved. <tt>null</tt> if the range has no start date.'
          schema:
            type: string
        - name: id_flag
          in: query
          description: 'Defines how the event availability flag filter should be applied. One of {@link \AFlagSid} constants. * {@link \AFlagSid::ON} to show only available events. * {@link \AFlagSid::OFF} to show only unavailable events. * {@link \AFlagSid::ALL} to show all events (available and unavailable).'
          schema:
            type: number
            format: int32
        - name: is_backend
          in: query
          description: 'Determines whether the endpoint is used for backend mode.'
          schema:
            type: boolean
        - name: is_ignore_requirement
          in: query
          description: '`true` to show even event restricted by booking policies; `false` to show available events only.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: 'Determines whether you need to retrieve a list of event sessions regardless of the tab specified in {@link EventListApi::$k_class_tab}. * <tt>true</tt> - retrieves a list regardless of the specified tab. * <tt>false</tt> - retrieves a list only for the specific tab.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The event business key to retrieve a list of all event sessions in business. Required if {@link EventListApi::$k_location} isn''t specified.'
          schema:
            type: string
        - name: k_class
          in: query
          description: 'The event class key to retrieve a list of all event sessions of a specific class.'
          schema:
            type: string
        - name: k_class_tab
          in: query
          description: 'The class tab key to retrieve a list of event sessions from a specific tab only. An empty value to retrieve a list of event sessions that don''t belong to any tab. Will be ignored in next cases: * {@link EventListApi::$k_skin} specified. * {@link EventListApi::$is_tab_all} is <tt>true</tt>.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The event location key to retrieve a list of all event sessions in a specific location. Required if {@link EventListApi::$k_business} isn''t specified.'
          schema:
            type: string
        - name: k_skin
          in: query
          description: 'The skin key if an event list is used for widget mode. {@link EventListApi::$k_class_tab} will be ignored for widget mode.'
          schema:
            type: string
        - name: text_search
          in: query
          description: 'Search string to filter events by name.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Required to apply specific user rules such as age restrictions.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_enrollment_block_list:
                    type: array
                    description: 'List of available enrollment blocks correspond to requested parameters.'
                  a_event_list:
                    type: array[]
                    description: 'A list of events corresponding to requested parameters. Each event will have the following keys: <dl> <dt>array <var>a_class_tab</var></dt> <dd>The list of class tab keys that contain this event. Each key is a primary key in the {@link \Wl\Classes\Tab\Sql\ClassTab\Sql} table.</dd> <dt>array <var>a_logo</var></dt> <dd>Information about the event''s logo. It will contain the following keys: <dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_height_src</var></dt> <dd>The source image''s height.</dd> <dt>int <var>i_rotate</var></dt> <dd>The angle which image was rotated compared to the original.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>int <var>i_width_src</var></dt> <dd>The source image''s width.</dd> <dt>int <var>id_type_src</var></dt> <dd>The image type ID. One of the {@link \Core\Drive\DriveTypeSid} constants.</dd> <dt>bool <var>is_resize</var></dt> <dd>This will be `true` if the image has been resized. `false` otherwise.</dd> <dt>bool <var>is_old</var></dt> <dd>This will be `true` if the image is old. `false` otherwise.</dd> <dt>string <var>s_url</var></dt> <dd>The URL to the image.</dd> <dt>string <var>url-view</var></dt> <dd>The URL to the image.</dd> <dt>string <var>url-thumbnail</var></dt> <dd>The URL to the image''s thumbnail.</dd> </dl> </dd> <dt>array <var>a_schedule</var></dt> <dd>Information about the event''s schedule. It is a list of instances, each instance will contain the following keys: <dl> <dt>array <var>a_day</var></dt> <dd>The days when the event is scheduled (0 - Sunday, 6 - Saturday).</dd> <dt>array <var>a_staff_member</var></dt> <dd>Information about the staff member(s) conducting the event. This is a list of staff, each element is an array with the following keys <dl> <dt>string <var>k_staff_member</var></dt> <dd>The staff member key. The primary key in the {@link \RsStaffBusinessSql} table.</dd> <dt>string <var>text_business_role</var></dt> <dd>The name of the staff member''s business role.</dd> <dt>string <var>text_mail</var></dt> <dd>The staff member''s email address.</dd> <dt>string <var>text_name_first</var></dt> <dd>The staff member''s first name.</dd> <dt>string <var>text_name_full</var></dt> <dd>The staff member''s full name.</dd> <dt>string <var>text_name_last</var></dt> <dd>The staff member''s last name.</dd> <dt>string <var>uid</var></dt> <dd>The staff member''s user key. The primary key in the {@link \PassportLoginSql} table.</dd> </dl> </dd> <dt>string <var>dl_end</var></dt> <dd>The ending date of the event series.</dd> <dt>string <var>dl_start</var></dt> <dd>The starting date of the event series.</dd> <dt>bool <var>is_day</var></dt> <dd>This will be `true` if the event starts and ends on the same day.</dd> <dt>string <var>k_class_period</var></dt> <dd>The class period key. The primary key in the {@link \RsClassPeriodSql} table.</dd> <dt>string <var>k_location</var></dt> <dd>The location key. The primary key in the {@link \RsLocationSql} table.</dd> <dt>string <var>text_location</var></dt> <dd>The name of the location.</dd> <dt>string <var>text_time</var></dt> <dd>The human readable version of the event time.</dd> </dl> </dd> <dt>array <var>a_search_tag</var></dt> <dd>The list of search tags for this event.</dd> <dt>bool <var>can_book</var></dt> <dd> Whether event can be booked or not. `true` - there are no restrictions to book this event in general. `false` - for some reason event cannot be booked. The reason can be found in the following fields: `html_reason`, `id_reason`, `sid_reason`. This field can be used instead of `is_bookable` and covers a significant number of checks under its value. </dd> <dt>bool <var>can_cancel</var></dt> <dd>Whether the current user can cancel already booked event.</dd> <dt>string <var>dl_early</var></dt> <dd>The early cancel date</dd> <dt>string <var>dl_end</var></dt> <dd>The ending date of the event.</dd> <dt>string <var>dl_start</var></dt> <dd>The starting date of the event.</dd> <dt>string <var>dl_session</var></dt> <dd>Local date of the closest session of the event.</dd> <dt>string <var>dtu_session</var></dt> <dd>Date of the closest session of the event.</dd> <dt>int <var>i_session_all</var></dt> <dd>Number of all sessions in the event.</dd> <dt>int <var>i_session_future</var></dt> <dd>Number of all sessions in the future.</dd> <dt>int <var>i_session_past</var></dt> <dd>Number of all sessions in the past.</dd> <dt>bool <var>is_age_restrict</var></dt> <dd>`true` if the event is age restricted, `false` if the event is not.</dd> <dt>bool <var>is_age_restrict_only</var></dt> <dd> `true` if this event booking is restricted and restricted because of client''s age only. `false` otherwise. </dd> <dt>bool <var>is_block</var></dt> <dd>`true` if the event is a block event, `false` if the event is not.</dd> <dt>bool <var>is_bookable</var></dt> <dd> Whether event is bookable. `true` - there are no restrictions to book this event in general. `false` - for some reason event cannot be booked. <b>Attention!!!</b> Historically, the value of this field may not cover all expected checks, and may be confusing to someone. It is properly used in combination with a number of other flags. If you need a flag that covers most of the checks please use `can_book` field. </dd> <dt>bool <var>is_booked</var></dt> <dd>`true` if the user has booked the event, `false` if the event is not.</dd> <dt>bool <var>is_closed</var></dt> <dd>`true` if booking the event is closed, `false` if the event is not.</dd> <dt>bool <var>is_full</var></dt> <dd>`true` if the event is full, `false` if the event is not.</dd> <dt>bool <var>is_online</var></dt> <dd>`true` if the event is available online, `false` if the event is not.</dd> <dt>bool <var>is_online_private</var></dt> <dd>`true` if the event is online and private, `false` if the event is not.</dd> <dt>bool <var>is_open</var></dt> <dd>`true` if the event is open to be booked, `false` if the event is not.</dd> <dt>bool <var>is_prorate</var></dt> <dd>`true` if the event is prorated, `false` if the event is not.</dd> <dt>bool <var>is_virtual</var></dt> <dd>`true` if the event is only held virtually, `false` if the event is not.</dd> <dt>string <var>k_class</var></dt> <dd>The class key. The primary key in the {@link \RsClassSql} table.</dd> <dt>string <var>k_class_period</var></dt> <dd>The class period key. The primary key in the {@link \RsClassPeriodSql} table.</dd> <dt>string <var>k_enrollment_block</var></dt> <dd>The enrollment block key.The primary key in the {@link \RsEnrollmentBlockSql} table.</dd> <dt>string <var>k_location</var></dt> <dd>The location key. The primary key in the {@link \RsLocationSql} table.</dd> <dt>string <var>m_price_total</var></dt> <dd>The total price of booking a session.</dd> <dt>string <var>m_price_total_early</var></dt> <dd>The total price if booked early.</dd> <dt>string <var>text_age_restrict</var></dt> <dd>The age description.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the event.</dd> <dt>string <var>url_book</var></dt> <dd>The direct booking url.</dd> <dt>string <var>xml_description</var></dt> <dd>The description of the event.</dd> </dl>'
      tags:
        - Event-EventList
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_cache_reset:
                  type: boolean
                  description: 'Model cache reset flag.'
                k_business:
                  type: string
                  description: 'The event business key to retrieve a list of all event sessions in business. Required if {@link EventListApi::$k_location} isn''t specified.'
                uid:
                  type: string
                  description: 'The user key. Required to apply specific user rules such as age restrictions.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Event-EventList
  '/Wl/Holiday/Holiday.json':
    get:
      summary: 'Returns information about holiday day of business/locations.'
      parameters:
        - name: dl_work
          in: query
          description: 'The date working hours are required for. Set in the business''s timezone.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_location_holiday:
                    type: array
                    description: 'A list of the location''s closed day titles by location keys on the date {@link \Wl\Holiday\HolidayApi::$dl_work}.'
                  is_business_holiday:
                    type: boolean
                    description: '<tt>true</tt> if the business has a closed day on the date {@link \Wl\Holiday\HolidayApi::$dl_work}, <tt>false</tt> if otherwise.'
                  text_business_title:
                    type: string
                    description: 'The message used for the business''s closed day on the date {@link \Wl\Holiday\HolidayApi::$dl_work}.'
      tags:
        - Holiday-Holiday
  '/Wl/Holiday/BulkBusinessHoliday.json':
    get:
      summary: 'Returns information about holiday day of business/locations.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_holidays:
                    type: array
                    description: 'An array consisting of the business''s closed day data for all locations by holiday keys {@link \Wl\Holiday\HolidayApi::$dl_work}. List of holidays. Values are arrays of holidays as follows: <dl> <dt>array <var>a_class</var></dt> <dd>A list of affected classes. Keys are class keys. Primary keys in {@link \RsClassSql} table.</dd> <dt>array <var>a_class_only</var></dt> <dd>A list of affected classes. Keys are class keys.Primary keys in {@link \RsClassSql} table.</dd> <dt>array <var>a_event_only</var></dt> <dd>A list of affected events. Keys are event keys. Primary keys in {@link \RsClassSql} table.</dd> <dt>array <var>a_service</var></dt> <dd>A list of affected services. Keys are service keys. Primary keys in {@link \RsServiceSql} table.</dd> <dt>string <var>dt_end</var></dt> <dd>The end date of the holiday.</dd> <dt>string <var>dt_start</var></dt> <dd>The start date of the holiday.</dd> <dt>int <var>is_class_all</var></dt> <dd>''1'' if all classes are selected to cancel, ''0'' if otherwise.</dd> <dt>int <var>is_event_all</var></dt> <dd>''1'' if all events are selected to cancel, ''0'' if otherwise.</dd> <dt>int <var>is_service_all</var></dt> <dd>''1'' if all services are selected to cancel, ''0'' if otherwise.</dd> <dt>int <var>k_business</var></dt> <dd>The business key. Primary key in {@link \RsBusinessSql} table.</dd> <dt>int <var>k_holiday</var></dt> <dd>The holiday key. Primary key in {@link \RsHolidaySql} table.</dd> <dt>int <var>k_location</var></dt> <dd>The location key. Primary key in {@link \RsLocationSql} table.</dd> <dt>int <var>k_market</var></dt> <dd>The market key.  Primary key in {@link \RsMarketSql} table.</dd> <dt>string <var>s_title</var></dt> <dd>The name of the holiday.</dd> </dl>'
      tags:
        - Holiday-BulkBusinessHoliday
  '/Wl/Rank/Rank.json':
    get:
      summary: 'Gets belts list of a business.'
      parameters:
        - name: a_rank_category
          in: query
          description: 'Rank category keys. Primary key in {@link \RsRankCategorySql} table. Used to filter belts by belt categories.'
          schema:
            type: array
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_rank_list:
                    type: array[]
                    description: 'A list of belts, keys, and information. Each element is an array with the following information: <dl> <dt>string <var>k_rank</var></dt> <dd>A belt key. Primary key in {@link \RsRankSql} table.</dd> <dt>string <var>k_rank_category</var></dt> <dd>A belt category key. Primary key in {@link \RsRankCategorySql} table.</dd> <dt>string <var>text_rank</var></dt> <dd>Belt title.</dd> <dt>string <var>text_rank_category</var></dt> <dd>Belt category title.</dd> </dl>'
      tags:
        - Rank-Rank
  '/Wl/Schedule/Cancel.json':
    get:
      summary: 'Cancels session for the client.'
      parameters:
        - name: dt_date
          in: query
          description: 'The date of the session in UTC.'
          schema:
            type: string
        - name: is_backend
          in: query
          description: 'This will be `true` if the API is being used from the back end. Otherwise, this will be `false`. Here, the back end refers to either a staff member or admin from the side of the business.'
          schema:
            type: boolean
        - name: is_late_cancel
          in: query
          description: '<tt>true</tt> is late cancel, <tt>false</tt> reservation is not late cancel. This is required to enable late cancel even if the user is staff.'
          schema:
            type: boolean
        - name: k_appointment
          in: query
          description: 'The appointment key. This will be `null` if not set yet or if a class or event is canceled.'
          schema:
            type: string|null
        - name: k_business
          in: query
          description: 'Key of the business within which the action is performed.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The class period key. This will be `null` if not set yet or if an appointment is canceled.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Schedule-Cancel
    post:
      summary: 'Cancels session for the client. This method is an alias for partners using the API or SDK.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_date:
                  type: string
                  description: 'The date of the session in UTC.'
                is_backend:
                  type: boolean
                  description: 'This will be `true` if the API is being used from the back end. Otherwise, this will be `false`. Here, the back end refers to either a staff member or admin from the side of the business.'
                is_late_cancel:
                  type: boolean
                  description: '<tt>true</tt> is late cancel, <tt>false</tt> reservation is not late cancel. This is required to enable late cancel even if the user is staff.'
                k_appointment:
                  type: string|null
                  description: 'The appointment key. This will be `null` if not set yet or if a class or event is canceled.'
                k_business:
                  type: string
                  description: 'Key of the business within which the action is performed.'
                k_class_period:
                  type: string|null
                  description: 'The class period key. This will be `null` if not set yet or if an appointment is canceled.'
                uid:
                  type: string
                  description: 'The user key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Schedule-Cancel
  '/Wl/Collector/DebtList.json':
    get:
      summary: ''
      parameters:
        - name: dl_end
          in: query
          description: 'Date before which debts should be returned. If set, this is the end of the date window. Only debts added before or on this date will be shown. If left `null` and {@link \Wl\Collector\DebtListApi::$dl_start} has been specified, only debts added after the start date will be returned. If left `null` and {@link \Wl\Collector\DebtListApi::$dl_start} is also `null`, this will return debts from the previous month.'
          schema:
            type: string|null
        - name: dl_start
          in: query
          description: 'Date since which debts should be returned. If set, this is the start of the date window. Only debts added on or after this date will be shown. If left `null` and {@link \Wl\Collector\DebtListApi::$dl_end} has been specified will return debts added since the beginning of time. If left `null` and {@link \Wl\Collector\DebtListApi::$dl_end} is also `null`, this will return debts from the previous month.'
          schema:
            type: string|null
        - name: is_request_debt
          in: query
          description: 'Defines whether new debts should be returned or only previously sent debts. If `true` then return new debts only. If `false` then return previously sent debts only.'
          schema:
            type: boolean
        - name: is_test
          in: query
          description: 'Defines whether debts for test or real business should be returned. If `true`, debts from test businesses will be returned. Otherwise, this will be `false` if only debts from real businesses will be returned.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key for which debts should be returned. Use `null` if debt payments from all businesses should be returned.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_debt:
                    type: array[]
                    description: 'A list of debts for the given business added within the previous month. Each value is an array with the next structure: <dl> <dt>string <var>dl_client_birth</var></dt> <dd>The birth date of the debtor client.</dd> <dt>string <var>dtu_client_since</var></dt> <dd>The date and time in UTC from which the debtor client is a member of the business.</dd> <dt>string <var>dtu_due</var></dt> <dd>The date and time in UTC of the last payment on the debtor client''s account.</dd> <dt>string <var>dtu_add</var></dt> <dd>The date and time in UTC when the client was added to the list of debtors.</dd> <dt>string <var>dtu_cease</var></dt> <dd>The date and time in UTC when the debt was fully ceased.</dd> <dt>int <var>id_currency</var></dt> <dd>The debt currency ID. One of {@link CurrencySid} constants.</dd> <dt>string <var>k_business</var></dt> <dd>The business key where the debt occurred.</dd> <dt>string <var>k_collector_debt</var></dt> <dd>The debt key, which should be used for debt payment.</dd> <dt>string <var>k_pay_transaction_debt</var></dt> <dd>The transaction key after which the debt occurred.</dd> <dt>string <var>k_pay_transaction_last</var></dt> <dd>The last transaction key on account after the debt occurred.</dd> <dt>string <var>m_amount_debt</var></dt> <dd>The initial amount of the debt.</dd> <dt>string <var>m_amount_paid</var></dt> <dd>The amount paid for debt.</dd> <dt>string <var>text_business_title</var></dt> <dd>The title of the business.</dd> <dt>string <var>text_client_name</var></dt> <dd>The full name of the debtor client.</dd> <dt>string <var>text_client_address</var></dt> <dd>The address of the debtor client.</dd> <dt>string <var>text_client_mail</var></dt> <dd>The email address of the debtor client.</dd> <dt>string <var>text_client_phone</var></dt> <dd>The phone number of the debtor client.</dd> <dt>string <var>text_client_zip</var></dt> <dd>The ZIP code of the debtor client.</dd> <dt>string <var>text_skip</var></dt> <dd>The notification message sent when the debt payment is missed.</dd> <dt>string <var>uid</var></dt> <dd>The user key of the debt owner.</dd> </dl>'
      tags:
        - Collector-DebtList
  '/Wl/Collector/DebtTransaction.json':
    get:
      summary: ''
      parameters:
        - name: dl_end
          in: query
          description: 'If set, this is the end of the date window. Only debt payments added before or on this date will be shown. If left `null` and {@link \Wl\Collector\DebtTransactionApi::$dl_start} has been specified only debt payments added after the start date will be returned. If left `null` and {@link \Wl\Collector\DebtTransactionApi::$dl_start} is also `null`, this will return debt payments from the previous month.'
          schema:
            type: string|null
        - name: dl_start
          in: query
          description: 'If set, this is the start of the date window. Only debt payments added on or after this date will be shown. If left `null` and {@link \Wl\Collector\DebtTransactionApi::$dl_end} has been specified, this will return debt payments since the beginning of time. If left `null` and {@link \Wl\Collector\DebtTransactionApi::$dl_end} is also `null`, this will return debt payments from the previous month.'
          schema:
            type: string|null
        - name: is_test
          in: query
          description: 'If `true`, debt payments from test businesses will be returned. Otherwise, this will be `false` if only debt payments from real businesses will be returned.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key for which debt payments should be returned. Use `null` if debt payments from all businesses should be returned.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_transaction:
                    type: array[]
                    description: 'A list of debt payments for a given business added within the previous day. Each value is an array with next structure: <dl> <dt>string <var>dtu_pay</var></dt> <dd>The date and time in UTC of the payment transaction.</dd> <dt>string <var>m_pay_amount</var></dt> <dd>The amount of the payment''s transaction.</dd> <dt>int <var>id_pay_method</var></dt> <dd>The payment method ID that was used for the payment. One of {@link \RsPayMethodSid} constants.</dd> <dt>bool <var>is_pay_collections</var></dt> <dd>Defines whether the payment was performed via a third party service. `true` if the payment was performed via a third party service and this transaction is responsible for an account credit transaction for that payment. See {@link DebtPayApi}. `false` if the payment was performed within the Wellnessliving system. </dd> <dt>bool <var>is_debt_paid</var></dt> <dd> Defines whether the initial debt to which this related transaction is fully paid. `true` if the debt is fully paid. `false` if the debt is partially paid. </dd> <dt>string <var>text_client_name</var></dt> <dd>The full name of the debtor client for whom the payment transaction was performed.</dd> <dt>string <var>uid</var></dt> <dd>The UID of the debtor client for whom the payment transaction was performed.</dd> </dl>'
      tags:
        - Collector-DebtTransaction
  '/Wl/Collector/DebtPay.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_currency:
                  type: number
                  format: int32
                  description: 'The currency of the payment. One of {@link CurrencySid} constants. Important! The currency must coincide with currency of the debt that was sent to collections.'
                id_pay_method:
                  type: int|null
                  description: 'The payment method ID. One of {@link \RsPayMethodSid} constants. `null` if the payment method is unknown. In such cases, {@link \RsPayMethodSid::CASH} would be used.'
                k_business:
                  type: string
                  description: 'The key of the business from which the debt originates.'
                k_collector_debt:
                  type: string
                  description: 'The debt key towards which the payment was performed.'
                m_amount:
                  type: string
                  description: 'The amount of money that''s been paid towards the debt.'
                uid:
                  type: string
                  description: 'The key of the user with the debt.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_pay_transaction:
                    type: string
                    description: 'The transaction key generated to register the payment.'
      tags:
        - Collector-DebtPay
  '/Wl/Profile/ProfileCreate.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_birthday:
                  type: string
                  description: 'Date of the user''s birthday in MySQL format.'
                k_business:
                  type: string
                  description: 'The key of the business.'
                text_firstname:
                  type: string
                  description: 'First name of the user.'
                text_lastname:
                  type: string
                  description: 'Last name of the user.'
                text_mail:
                  type: string
                  description: 'Email of the user.'
                text_phone:
                  type: string
                  description: 'Phone of the user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    description: 'The key of the user.'
      tags:
        - Profile-ProfileCreate
  '/Wl/Report/Data.json':
    get:
      summary: 'Gets data of required report.'
      parameters:
        - name: i_page
          in: query
          description: 'The page of results to show, starting at zero. The API will return 256 results per page.'
          schema:
            type: number
            format: int32
        - name: id_report
          in: query
          description: 'The report ID. One of the {@link \RsReportSid} constants. The following reports are currently available via the API: <dl> <dt>LOGIN_LIST {@link \RsReportSid::LOGIN_LIST}</dt> <dd>All Clients Report (Reports tab, features date search)</dd> <dt>LOGIN_LIST_ALL {@link \RsReportSid::LOGIN_LIST_ALL}</dt> <dd>All Clients Report (Clients tab) Batch Report</dd> <dt>PAY_TRANSACTION_BATCH {@link \RsReportSid::PAY_TRANSACTION_BATCH}</dt> <dd>Batch Report</dd> <dt>PURCHASE_ITEM_LIST_USER {@link \RsReportSid::PURCHASE_ITEM_LIST_USER}</dt> <dd>Sales per Client Report</dd> <dt>PURCHASE_ITEM_ACCRUAL_CASH {@link \RsReportSid::PURCHASE_ITEM_ACCRUAL_CASH}</dt> <dd>All Sales Report</dd> </dl>'
          schema:
            type: number
            format: int32
        - name: id_report_group
          in: query
          description: 'The report group ID. One of the {@link \RsReportGroupSid} constants that describes the time period (day, week, month, or year) for the report to cover.'
          schema:
            type: number
            format: int32
        - name: id_report_page
          in: query
          description: 'The report page ID. One of the {@link \RsReportPageSid} constants. If set, the collection of that page will be used, otherwise a collection of single report will be used.'
          schema:
            type: int|null
        - name: id_report_view
          in: query
          description: 'The report view ID. One of the {@link \RsReportChartViewSid} constants.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of business for which the report must be generated.'
          schema:
            type: string
        - name: s_filter
          in: query
          description: 'Filter settings in encoded format. May be decoded by {@link \Core\Tool\UrlEncode\UrlDecode::decode()}.'
          schema:
            type: string
        - name: s_sort
          in: query
          description: 'The field to use for sorting report data.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_data:
                    type: array
                    description: 'The report contents. Contents of this array can vary based on the report that''s loaded.'
      tags:
        - Report-Data
  '/Wl/Report/PageData.json':
    get:
      summary: 'Gets data of required report collection.'
      parameters:
        - name: a_page
          in: query
          description: 'The page of results to show for each report in collection, starting at zero (set by default). The API will return 256 results per page. Key is report id from {@link \RsReportSid}, value is the page of results.'
          schema:
            type: int[]
        - name: id_report_group
          in: query
          description: 'The report group ID. One of the {@link \RsReportGroupSid} constants that describes the time period (day, week, month, or year) for the report to cover.'
          schema:
            type: number
            format: int32
        - name: id_report_page
          in: query
          description: 'The report page ID. One of the {@link \RsReportPageSid} constants. The collection of that page will be used to get list of reports. The following report collections are currently available via the API: * PROFILE_PURCHASE (ID 11) Collection with reports from client profile: memberships, packages, session/duration passes, single sessions, events, gift cards and groupon.'
          schema:
            type: number
            format: int32
        - name: id_report_view
          in: query
          description: 'The report view ID. One of the {@link \RsReportChartViewSid} constants.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of business for which the report collection must be generated.'
          schema:
            type: string
        - name: s_filter
          in: query
          description: 'Filter settings in encoded format. May be decoded by {@link \Core\Tool\UrlEncode\UrlDecode::decode()}.'
          schema:
            type: string
        - name: s_sort
          in: query
          description: 'The field to use for sorting report data.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_data:
                    type: array[]
                    description: 'List of the reports contents. Key is the report id from {@link \RsReportSid}, value is report contents. Contents can vary based on the report that''s loaded.'
      tags:
        - Report-PageData
  '/Wl/Report/Access.json':
    get:
      summary: 'Checks access to given report.'
      parameters:
        - name: cid_report
          in: query
          description: 'Report CID. It''s used mostly for second generation reports. For first generation reports use {@link AccessApi::$id_report} instead. Only one of these two fields should be sent, but not both.'
          schema:
            type: number
            format: int32
        - name: id_report
          in: query
          description: 'Report ID. One of {@link \RsReportSid} constants. It''s used mostly for first generation reports. For second generation reports use {@link AccessApi::$cid_report} instead. Only one of these two fields should be sent, but not both.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'ID of business for which access must be checked. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_access:
                    type: boolean
                    description: '<tt>true</tt> - access is granted; <tt>false</tt> - access is denied.'
      tags:
        - Report-Access
  '/Wl/Business/BusinessAccess.json':
    get:
      summary: 'Gets information about businesses where given user is a staff member.'
      parameters:
        - name: is_backend
          in: query
          description: 'This will be `true` if the API is being used from the backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: s_facebook_id
          in: query
          description: 'The staff member''s Facebook ID. This won''t be empty if the staff member is logging in with Facebook. This will be empty if the UID is already known or the staff member is logging in another way.'
          schema:
            type: string
        - name: s_microsoft_id
          in: query
          description: 'The staff member''s Microsoft key. This won''t be empty if the staff member is logging in with Microsoft.'
          schema:
            type: string
        - name: text_authorization_apple
          in: query
          description: 'The staff member''s Apple authorization code. This won''t be empty if the staff member is logging in with Apple. This will be empty if the UID is already known or the staff member is logging in another way.'
          schema:
            type: string
        - name: text_google_plus
          in: query
          description: 'The Google Plus user ID. This won''t be empty if the staff member is logging in with Google. This will be empty if the UID is already known or the staff member is logging in another way.'
          schema:
            type: string
        - name: text_mail
          in: query
          description: 'The staff member''s email to determine their UID. This won''t be empty if the staff member is logging in with email or with Google. This will be empty if the UID is already known or the staff member is logging in another way.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key. Empty if user is not logged in, but their authorization data is known. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business:
                    type: string[]
                    description: 'The businesses the staff member belongs to. Primary keys in table {@link \RsBusinessSql}. Note that this field is here for backwards compatibility.'
                  a_business_data:
                    type: array[]
                    description: 'The list of accessible businesses with their corresponding data. Each value is an array with the next structure: <dl> <dt>int <var>id_region</var></dt> <dd>The business region. One of the {@link AmazonRegionSid} constants. This will be `null` if no regions are currently set.</dd> <dt>string <var>k_business</var></dt> <dd>The business key. Primary keys in table {@link \RsBusinessSql}.</dd> <dt>string <var>text_office_address</var></dt> <dd>The business address.</dd> <dt>string <var>text_title</var></dt> <dd>The business title.</dd> <dt>string <var>url_logo</var></dt> <dd>The business logo URL. This will be empty if the business hasn''t added a logo.</dd> </dl>'
                  uid_mail:
                    type: string
                    description: 'The staff member key, determined by their email. This will be empty if the UID isn''t empty. Primary key in {@link \PassportLoginSql} table.'
      tags:
        - Business-BusinessAccess
  '/Wl/Business/Business.json':
    post:
      summary: 'Creates new business.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_staff_member:
                  type: boolean
                  description: 'Empty array means to not create a staff member. Otherwise, information about staff member to be created in the business. <dl> <dt>bool <var>is_enter</var></dt> <dd>Should created staff member be automatically signed in or not.</dd> <dt>string <var>text_mail</var></dt> <dd>Email address to be used to sign in.</dd> <dt>string <var>text_name_first</var></dt> <dd>The first name of the staff member.</dd> <dt>string <var>text_name_last</var></dt> <dd>The last name of the staff member.</dd> </dl>'
                id_locale:
                  type: number
                  format: int32
                  description: 'The business locale.'
                is_location_create:
                  type: boolean
                  description: '`true` if location should be also created for the business. `false` if otherwise.'
                k_business_type:
                  type: string
                  description: 'The key of the business type.'
                k_office_city:
                  type: string
                  description: 'The city key of the business.'
                text_office_address:
                  type: string
                  description: 'The address of the business. Optional.'
                text_office_postal:
                  type: string
                  description: 'The postal code of the business. Optional.'
                text_phone:
                  type: string
                  description: 'The phone number of the business.'
                text_title:
                  type: string
                  description: 'The title of the business.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_business:
                    type: string
                    description: 'The key of the created business.'
      tags:
        - Business-Business
  '/Wl/Business/Data.json':
    get:
      summary: ''
      parameters:
        - name: i_logo_height
          in: query
          description: 'The maximum height of the business image (in pixels).'
          schema:
            type: number
            format: int32
        - name: i_logo_width
          in: query
          description: 'The maximum width of the business image (in pixels).'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: text_token
          in: query
          description: 'The authorization token. This may be used instead of {@link DataApi::$k_business} to identify a business.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_service_list:
                    type: array
                    description: 'A list of all business services and their availability data. This is presented as an array, where keys are SIDs from {@link ServiceSid} and values are Boolean. If `true`, at least one service is enabled in the business. Otherwise, this will be `false`.'
                  a_tip_predefine:
                    type: float[]
                    description: 'The list of predefined tips in percentages.'
                  id_category:
                    type: number
                    format: int32
                    description: 'The business category ID of the business.'
                  id_currency:
                    type: number
                    format: int32
                    description: 'The currency ID of the given business (or the system currency ID if the business didn''t pass).'
                  id_locale:
                    type: number
                    format: int32
                    description: 'The Locale ID, used to search geo items.'
                  id_rank_type:
                    type: int|null
                    description: 'The rank type ID of the business. One of the {@link \RsRankTypeSid} constants. This will be `null` if the business doesn''t have a rank type.'
                  id_region:
                    type: number
                    format: int32
                    description: 'The region ID. This indicates the data center where the information about the business is stored. One of the {@link AmazonRegionSid} constants. Requests made to different regions can lead to known issues such as responses indicating that the business (or its elements) doesn''t exist. This is because databases on different data centers are independent. For example, performing a request to the US cluster for a list of classes for an AU cluster business will return an empty list.'
                  is_apply_surcharge:
                    type: boolean
                    description: 'Determines whether surcharges to client payments are enabled in the business.'
                  is_franchise:
                    type: boolean
                    description: '`true` if business is a franchisor or franchisee.'
                  is_location_multiple:
                    type: boolean
                    description: 'Determines whether the business has multiple locations (including inactive locations).'
                  is_profile_timezone:
                    type: boolean
                    description: '`true` - clients of the business can select a custom time zone in their profile. `false` - the location or business time zone is used.'
                  is_progress_client:
                    type: boolean
                    description: 'If `true`, clients can enter the progress log. Otherwise, this will be `false`.'
                  is_progress_verify:
                    type: boolean
                    description: 'If `true`, verification of the progress log by a staff member is required. Otherwise, this will be `false`.'
                  is_quiz_available:
                    type: boolean
                    description: 'Determines whether quizzes are available in the business.'
                  is_tip:
                    type: boolean
                    description: 'If `true`, tips are available in the business. Otherwise, this will be `false`.'
                  is_tip_deny:
                    type: boolean
                    description: 'If `true`, the business has the "No tip" option displayed. Otherwise, this will be `false`.'
                  is_tip_sign:
                    type: boolean
                    description: 'If `true`, the client must sign after selecting the tip. Otherwise, this will be `false`.'
                  k_business_franchisor:
                    type: string
                    description: 'The franchisor business key. This will be empty if this business is the franchisor or not in a franchise.'
                  k_business_token:
                    type: string
                    description: 'The business key obtained by the security token {@link DataApi::$text_token}. This can be used on the client side if authorization token should be used instead of the business key (the business key isn''t available).'
                  k_business_type:
                    type: string
                    description: 'Key of business type.'
                  k_currency:
                    type: string
                    description: 'The currency key of the given business, or the system currency if the business didn''t pass.'
                  s_reply_mail:
                    type: string
                    description: 'The reply-to email address.'
                  s_reply_name:
                    type: string
                    description: 'The reply-to business name.'
                  text_office_address:
                    type: string
                    description: 'The business address.'
                  text_title:
                    type: string
                    description: 'The business title.'
                  url_facebook:
                    type: string
                    description: 'The Facebook page.'
                  url_google:
                    type: string
                    description: 'The Google+ page.'
                  url_instagram:
                    type: string
                    description: 'The Instagram page.'
                  url_linkedin:
                    type: string
                    description: 'The `LinkedIn` profile.'
                  url_logo:
                    type: string
                    description: 'The logo URL.'
                  url_logo_empty:
                    type: string
                    description: 'The image stub (in cases where the business logo isn''t loaded).'
                  url_twitter:
                    type: string
                    description: 'The Twitter page.'
                  url_website:
                    type: string
                    description: 'The business website.'
                  url_youtube:
                    type: string
                    description: 'The YouTube website.'
      tags:
        - Business-Data
  '/Wl/Login/Login.json':
    get:
      summary: 'Retrieves information about user.'
      parameters:
        - name: i_photo_height
          in: query
          description: 'The height of the requested photo.'
          schema:
            type: number
            format: int32
        - name: i_photo_width
          in: query
          description: 'The width of the requested photo.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of the business. Users can be in multiple businesses. This can be left as `null` to retrieve system-wide information.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user. `null` on case when is walk-in client.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_postcard:
                    type: boolean
                    description: 'Whether this user can send postcards.'
                  id_gender:
                    type: number
                    format: int32
                    description: 'The gender ID. It will be one of the {@link \AGenderSid} constants.'
                  is_photo_empty:
                    type: boolean
                    description: 'Whether photo is uploaded. `true` if photo is not uploaded, `false` otherwise.'
                  k_staff:
                    type: string
                    description: 'The user''s staff key for the specified business.'
                  s_first_name:
                    type: string
                    description: 'The first name of the user.'
                  s_last_name:
                    type: string
                    description: 'The surname of the user.'
                  text_mail_client:
                    type: string
                    description: 'The client`s mailing address.'
                  text_mail_staff:
                    type: string
                    description: 'The staff member''s mailing address. This will be set if the user is a staff member ({@link LoginApi::$k_staff}).'
                  text_name_first_staff:
                    type: string
                    description: 'The staff member''s first name. This will be set if the user is a staff member ({@link LoginApi::$k_staff}).'
                  text_name_full_client:
                    type: string
                    description: 'The user''s login name. This is returned in cases when neither the first name nor the last name have been specified. An empty string is returned in cases where neither the first name, last name, nor login have been specified.'
                  text_name_full_staff:
                    type: string
                    description: 'The staff member''s full name. The user login is returned in cases where neither the first name nor the last name have been specified. An empty string is returned in cases where neither the first name, last name, nor login have been specified. This will be set if the user is a staff member ({@link LoginApi::$k_staff}).'
                  text_name_last_staff:
                    type: string
                    description: 'The staff member''s last name. This will be set if the user is a staff member ({@link LoginApi::$k_staff}).'
                  uid:
                    type: string|null
                    description: 'The key of the user. `null` on case when is walk-in client.'
                  url_photo:
                    type: string
                    description: 'The URL where the user photo can be retrieved.'
      tags:
        - Login-Login
    post:
      summary: 'Retrieves information about a list of users. This is done via "post" method because only "post" allows large requests.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_photo_height:
                  type: number
                  format: int32
                  description: 'The height of the requested photo.'
                i_photo_width:
                  type: number
                  format: int32
                  description: 'The width of the requested photo.'
                k_business:
                  type: string
                  description: 'The key of the business. Users can be in multiple businesses. This can be left as `null` to retrieve system-wide information.'
                text_uid:
                  type: string|null
                  description: 'List of users to get information for. Primary keys in {@link \PassportLoginSql} table. Serialized as JSON string. <tt>null</tt> for mode of single user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login:
                    type: array[]
                    description: 'List of information about users: <dl> <dt> int <var>id_gender</var> </dt> <dd> User''s gender. One of {@link \AGenderSid} constants. </dd> <dt> string <var>k_staff</var> </dt> <dd> User''s key as staff member. Primary key in {@link \RsStaffSql} table. </dd> <dt> string <var>s_first_name</var> </dt> <dd> User first name. </dd> <dt> string <var>s_last_name</var> </dt> <dd> First letter of user last name. </dd> <dt> string <var>text_mail_client</var> </dt> <dd> Client`s mail. </dd> <dt> string <var>text_mail_staff</var> </dt> <dd> Staff`s mail. </dd> <dt> string <var>text_name_first_staff</var> </dt> <dd> Staff`s first name. </dd> <dt> string <var>text_name_full_client</var> </dt> <dd> Full client name. User login is returned in a case neither first name, nor last name specified. An empty string is returned in a case neither first name, nor last name specified, nor login. See description of the {@link \Wl\User\Info\UserInfo::nameFullText()} method. </dd> <dt> string <var>text_name_full_staff</var> </dt> <dd> Full staff name. User login is returned in a case neither first name, nor last name specified. An empty string is returned in a case neither first name, nor last name specified, nor login. </dd>` <dt> string <var>text_name_last_staff</var> </dt> <dd> Staff`s last name. </dd> <dt> string <var>url_photo</var> </dt> <dd> User photo URL. </dd> </dl>'
      tags:
        - Login-Login
  '/Wl/Mail/SendMail.json':
    post:
      summary: 'Sends email.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                s_business_mail:
                  type: string
                  description: 'The business''s mailing address.'
                s_business_name:
                  type: string
                  description: 'The business name.'
                s_business_reply:
                  type: string
                  description: 'The business''s reply.'
                s_campaign:
                  type: string
                  description: 'The campaign name.'
                s_html:
                  type: string
                  description: 'The message uncompressed content.'
                s_mail:
                  type: string
                  description: 'The message recipient''s address.'
                s_subject:
                  type: string
                  description: 'The message''s subject line.'
                z_html:
                  type: string
                  description: 'The message content.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Mail-SendMail
  '/Wl/Quiz/QuizElement.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business key within which quiz is managed.'
                k_quiz:
                  type: string
                  description: 'Quiz key.'
                k_quiz_login:
                  type: string
                  description: 'Quiz login key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Quiz-QuizElement
    get:
      summary: ''
      parameters:
        - name: can_anonymous
          in: query
          description: 'Checks whether unauthorized user should be permitted to operate with form and make a response. In general all quizzes should have users in response but it some cases such as registration process user might not exist yet, and we need ability to ignore check for user existence. `true` - add possibility load form and accept response for non-registered user, `false` otherwise.'
          schema:
            type: boolean
        - name: is_builder
          in: query
          description: '`true` for request quiz from form builder page, `false` otherwise.'
          schema:
            type: boolean
        - name: is_simple
          in: query
          description: 'Whether quiz response received by kiosk or direct mode link. `true` quiz response received by kiosk mode. `false` quiz response received by direct or direct mode.'
          schema:
            type: boolean
        - name: json_purchase_item
          in: query
          description: 'List of purchase items for which this form is loaded in JSON format. Each element has the format `[id_purchase_item]::[k_id]`, where: <dl> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of the purchase item. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The item key. This depends on <var>id_purchase_item</var> of this array.</dd> </dl> Empty in case when purchase item not specified or form loaded from direct link.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key within which quiz is managed.'
          schema:
            type: string
        - name: k_quiz
          in: query
          description: 'Quiz key.'
          schema:
            type: string
        - name: k_quiz_login
          in: query
          description: 'Quiz login key.'
          schema:
            type: string
        - name: uid_client
          in: query
          description: 'UID of the client for which quiz requested.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_access_log:
                    type: array[]
                    description: 'Access log data.'
                  a_element:
                    type: array
                    description: 'List of quiz elements. Each element responsible for one quiz question (inheritor of {@link \Core\Quiz\Element\ElementQuestionAbstract}) and contains array representation of individual question. Structure of each value depend on type of element and contains public arguments of responsible class element. Order of the elements in array corresponds to order of elements on the form.'
                  a_setting:
                    type: array
                    description: 'Quiz settings. Array representation of {@link QuizElementApi::$o_setting}.'
                  can_amend:
                    type: boolean
                    description: 'Whether user has privileges to amend form.'
                  i_responses:
                    type: number
                    format: int32
                    description: 'Number of responses for specific quiz.'
                  is_active:
                    type: boolean
                    description: 'Quiz active status. `true` if quiz is active. `false` if quiz is not active.'
                  is_imported:
                    type: boolean
                    description: '`true` if quiz is imported, `false` otherwise.'
                  k_business_type:
                    type: string|null
                    description: 'Business type key. Used only for forms in the system business. Primary key in the {@link \RsBusinessTypeSql} table. `null` if not initialized.'
                  show_numbering:
                    type: boolean
                    description: 'Whether to show numbering of the form elements that supports numbering. `true` to show numbering on the form for elements that supports numbering. `false` to not show numbering.'
                  text_title:
                    type: string
                    description: 'Quiz form title.'
                  url_quiz:
                    type: string
                    description: 'Direct URL to quiz.'
                  url_quiz_kiosk:
                    type: string
                    description: 'Kiosk direct URL to quiz.'
      tags:
        - Quiz-QuizElement
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                can_anonymous:
                  type: boolean
                  description: 'Checks whether unauthorized user should be permitted to operate with form and make a response. In general all quizzes should have users in response but it some cases such as registration process user might not exist yet, and we need ability to ignore check for user existence. `true` - add possibility load form and accept response for non-registered user, `false` otherwise.'
                is_simple:
                  type: boolean
                  description: 'Whether quiz response received by kiosk or direct mode link. `true` quiz response received by kiosk mode. `false` quiz response received by direct or direct mode.'
                json_element:
                  type: string
                  description: 'List of quiz elements in json format. Order of the element in array corresponds to order of elements on the form.'
                k_business:
                  type: string
                  description: 'Business key within which quiz is managed.'
                k_quiz:
                  type: string
                  description: 'Quiz key.'
                k_quiz_login:
                  type: string
                  description: 'Quiz login key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_element:
                    type: array
                    description: 'List of quiz elements. Each element responsible for one quiz question (inheritor of {@link \Core\Quiz\Element\ElementQuestionAbstract}) and contains array representation of individual question. Structure of each value depend on type of element and contains public arguments of responsible class element. Order of the elements in array corresponds to order of elements on the form.'
                  a_setting:
                    type: array
                    description: 'Quiz settings. Array representation of {@link QuizElementApi::$o_setting}.'
                  is_active:
                    type: boolean
                    description: 'Quiz active status. `true` if quiz is active. `false` if quiz is not active.'
                  k_business_type:
                    type: string|null
                    description: 'Business type key. Used only for forms in the system business. Primary key in the {@link \RsBusinessTypeSql} table. `null` if not initialized.'
                  show_numbering:
                    type: boolean
                    description: 'Whether to show numbering of the form elements that supports numbering. `true` to show numbering on the form for elements that supports numbering. `false` to not show numbering.'
                  text_title:
                    type: string
                    description: 'Quiz form title.'
      tags:
        - Quiz-QuizElement
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business key within which quiz is managed.'
                k_quiz:
                  type: string
                  description: 'Quiz key.'
                k_quiz_login:
                  type: string
                  description: 'Quiz login key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_setting:
                    type: array
                    description: 'Quiz settings. Array representation of {@link QuizElementApi::$o_setting}.'
                  is_active:
                    type: boolean
                    description: 'Quiz active status. `true` if quiz is active. `false` if quiz is not active.'
                  url_quiz:
                    type: string
                    description: 'Direct URL to quiz.'
                  url_quiz_kiosk:
                    type: string
                    description: 'Kiosk direct URL to quiz.'
      tags:
        - Quiz-QuizElement
  '/Wl/Review/Review.json':
    post:
      summary: 'Submits user''s review.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_rate:
                  type: int|null
                  description: 'The rating given to the location (1 to 5 stars). This will be `null` if not set yet.'
                k_location:
                  type: string|null
                  description: 'The key of a location. This will be `null` if not loaded yet.'
                k_visit:
                  type: string|null
                  description: 'Visit key. Can be `null` if the review is not connected to a visit.'
                s_text:
                  type: string|null
                  description: 'The text of the review. This will be `null` if not set yet.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  i_score:
                    type: number
                    format: int32
                    description: 'Reward score for leaving a review.'
                  i_score_facebook:
                    type: number
                    format: int32
                    description: 'Reward score for sharing a review on Facebook.'
                  i_score_twitter:
                    type: number
                    format: int32
                    description: 'Reward score for sharing a review on Twitter.'
                  is_score:
                    type: boolean
                    description: 'If a reward score for leaving a review exists.'
                  is_score_facebook:
                    type: boolean
                    description: 'If a reward score for sharing a review on Facebook exists.'
                  is_score_twitter:
                    type: boolean
                    description: 'If a reward score for sharing a review on Twitter exists.'
                  is_share_points:
                    type: boolean
                    description: 'If a reward score for sharing exists.'
                  is_share_points_none:
                    type: boolean
                    description: 'If a reward score does not exist for leaving a review or sharing the review.'
                  k_login_activity:
                    type: string
                    description: 'The key of the review writing activity. This will be empty if the review was saved but not published.'
                  k_review:
                    type: string
                    description: 'Review key.'
                  uid:
                    type: string
                    description: 'The UID of client who leaves review.'
                  url_share:
                    type: string
                    description: 'The sharing url of the review.'
      tags:
        - Review-Review
  '/Wl/Review/ReviewFeature.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_featured:
                  type: boolean
                  description: 'Determines if the review is featured.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_review:
                  type: string
                  description: 'The review key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Review-ReviewFeature
  '/Wl/Review/ReviewReply.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_review_status:
                  type: int|null
                  description: 'Status of the Review. One of {@link \RsReviewStatusSid} constants. `null` until passed to the api when admin replies to the review.'
                k_business:
                  type: string
                  description: 'Key of the business to which the review belongs. Empty string to defined business automatically, based on value of <tt>k_review</tt>. Although this value may be empty, this behavior is deprecated and will be removed in the future. You MUST pass key of the business always.'
                k_review:
                  type: string
                  description: 'The review key.'
                text_reply:
                  type: string
                  description: 'The reply text for review.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Review-ReviewReply
  '/Wl/Staff/StaffElement.json':
    post:
      summary: 'Update or create staff.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_location:
                  type: array|null
                  description: 'The list of locations where the staff member works. Each element is a location key. Primary key from {@link \RsLocationSql} table. `null` means to not change the current value of the field.'
                dl_end:
                  type: string|null
                  description: 'Employment end date. `null` means to not change the current value of the field.'
                dl_start:
                  type: string|null
                  description: 'Employment start date. `null` means to not change the current value of the field.'
                id_gender:
                  type: int|null
                  description: 'Gender of staff member. One of {@link \AGenderSid} constants. `null` means to not change the current value of the field or set gender by default for new staff.'
                id_role:
                  type: int|null
                  description: 'ID of the default system role. One of {@link \RsPrivilegeRoleSid}. `null` means to not change the current value of the field.'
                is_employ:
                  type: bool|null
                  description: 'Whether the staff is currently employed. `null` means to not change the current value of the field.'
                is_microsite:
                  type: bool|null
                  description: 'Determines whether the staff member be shown on the directory site of the business. If `null`, the current value of the field shouldn''t be changed.'
                is_password_set_disable:
                  type: boolean
                  description: 'Whether password set is disabled. `true` - if the email is associated to a client profile which has a password set, `false` - otherwise.'
                is_uid:
                  type: boolean
                  description: 'Whether the staff member can to sign in.'
                k_business:
                  type: string
                  description: 'The key of the business in which the staff member is being created or edited. This field is required.'
                k_business_role:
                  type: string|null
                  description: 'Business role key. Primary key in the {@link \RsBusinessRoleSql}. `null` if not set.'
                k_city:
                  type: string|null
                  description: 'City key. Primary key in {@link \AGeoSql} table. `null` means to not change the current value of the field.'
                k_location:
                  type: string|null
                  description: 'Home location key. Primary key in the {@link \RsLocationSql}. `null` if not set.'
                k_staff:
                  type: string|null
                  description: 'The key of the staff member who is being created or edited. This will be `null` in cases where a new staff member is created.'
                text_address:
                  type: string|null
                  description: 'Address. `null` means to not change the current value of the field.'
                text_biography:
                  type: string|null
                  description: 'Staff biography. `null` means to not change the current value of the field.'
                text_city:
                  type: string|null
                  description: 'Custom city title. `null` means to not change the current value of the field or <var>k_city</var> is specified.'
                text_email:
                  type: string|null
                  description: 'The staff member''s email address. This field is required when creating a new staff member. If `null`, the current value of the field shouldn''t be changed.'
                text_first_name:
                  type: string|null
                  description: 'The staff member''s first name. This field is required when creating a new staff member. If `null`, the current value of the field shouldn''t be changed.'
                text_last_name:
                  type: string|null
                  description: 'The staff member''s last name. If `null`, the current value of the field shouldn''t be changed.'
                text_password:
                  type: string|null
                  description: 'The password. This field is required when creating a new staff member. If `null`, the current value of the field shouldn''t be changed.'
                text_password_confirm:
                  type: string|null
                  description: 'Confirmation of the password. This field is required when creating a new staff member. If `null`, the current value of the field shouldn''t be changed.'
                text_phone_home:
                  type: string|null
                  description: 'Home phone. `null` means to not change the current value of the field.'
                text_phone_mobile:
                  type: string|null
                  description: 'Cell phone. `null` means to not change the current value of the field.'
                text_position:
                  type: string|null
                  description: 'The staff member''s job title. If `null`, the current value of the field shouldn''t be changed.'
                text_postal:
                  type: string|null
                  description: 'The staff member''s job title. If `null`, the current value of the field shouldn''t be changed.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_staff:
                    type: string|null
                    description: 'The key of the staff member who is being created or edited. This will be `null` in cases where a new staff member is created.'
      tags:
        - Staff-StaffElement
  '/Wl/Video/VideoElement.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_backend:
                  type: boolean
                  description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_video:
                  type: string
                  description: 'The video key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Video-VideoElement
    get:
      summary: ''
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_video
          in: query
          description: 'The video key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_location:
                    type: string[]
                    description: 'The keys of the locations where this video is available.'
                  a_staff:
                    type: string[]
                    description: 'The keys of the staff members who are on the video.'
                  a_staff_info:
                    type: array
                    description: 'A list of staff members associated with the video. Every item has the following structure:<dl> <dt>string <var>k_staff</var></dt> <dd>The staff member key. Primary key in {@link \RsStaffSql} table.</dd> <dt>string <var>text_name</var></dt> <dd>The staff member''s full name.</dd> </dl>'
                  a_video_category:
                    type: string[]
                    description: 'The video category keys where this video can be found.'
                  a_video_tag:
                    type: string[]
                    description: 'The video tag keys.'
                  dtl_publish:
                    type: string|null
                    description: 'The date and time when the video was published. This will be `null` if the published date is not set yet.'
                  dtl_unpublish:
                    type: string|null
                    description: 'The date and time when the video was unpublished. This will be `null` if the unpublished date is not set yet.'
                  dtl_upload:
                    type: string
                    description: 'The date when the video was uploaded.'
                  i_calorie:
                    type: number
                    format: int32
                    description: 'The count of burned calories associated with the video.'
                  i_current_percent:
                    type: number
                    format: int32
                    description: 'The current time as a percentage of the video duration at which the user is at in the video.'
                  i_current_time:
                    type: number
                    format: int32
                    description: 'The current time in seconds at which the user is at in the video.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The video duration in seconds.'
                  i_watch:
                    type: number
                    format: int32
                    description: 'The number of video views.'
                  id_location_select:
                    type: number
                    format: int32
                    description: '{@link YesNoSid::NO} if the video is available in all locations. {@link YesNoSid::YES} if the video is available only in certain locations.'
                  is_calorie:
                    type: boolean
                    description: 'If `true`, the calorie count will be displayed on the video. If `false`, the calorie count will be hidden on the video.'
                  is_converted:
                    type: boolean
                    description: 'If `true`, the video is converted. If `false`, the video isn''t converted.'
                  is_published:
                    type: boolean
                    description: 'If `true`, the video is published. Otherwise, this will be `false`.'
                  is_video_level:
                    type: boolean
                    description: 'If `true`, the video level for the video is enabled. If `false`, the video level for the video is disabled.'
                  k_video_category_primary:
                    type: string
                    description: 'The video category primary key.'
                  k_video_level:
                    type: string
                    description: 'The video level key. This will be `0` if `All Levels` is selected.'
                  s_preview_video_key:
                    type: string|null
                    description: 'The string representation of the video''s key. This will be `null` if the video doesn''t have a thumbnail image.'
                  show_calorie:
                    type: boolean
                    description: 'If `false`, the calorie count for videos is hidden. Otherwise, this will be `true`.'
                  show_level:
                    type: boolean
                    description: 'If `false`, video levels are hidden. Otherwise, this will be `true`.'
                  show_view:
                    type: boolean
                    description: 'If `false`, the number of views for videos is hidden. Otherwise, this will be `true`.'
                  text_level_title:
                    type: string
                    description: 'The video level name.'
                  text_title:
                    type: string
                    description: 'The video name.'
                  url_thumbnail:
                    type: string
                    description: 'The URL of the video thumbnail.'
                  url_video:
                    type: string|null
                    description: 'The URL of the video file. This URL return with domain which you use when you call this API. In case when you make request to local domain and video is {@link VideoElementApi::$is_converted} links in file will have global domain and for correct work you must replace global domain to local. Example for `videojs` player you can override method `beforeRequest`: <code> videojs.Vhs.xhr.beforeRequest = function(options) { if (options.uri.startsWith(''https://www.'')) { options.uri = options.uri.replace(''https://www.'', ''https://us.''); } return options; } </code>'
                  url_video_direct:
                    type: string
                    description: 'The direct URL of the video.'
                  url_video_frame:
                    type: string
                    description: 'The direct URL of the video for iframe.'
                  xml_description:
                    type: string
                    description: 'The video description.'
      tags:
        - Video-VideoElement
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                file_video:
                  type: array
                  description: 'Video file. This property is not used, but need for correct generate model.'
                i_file_upload_size:
                  type: int|string
                  description: 'The size of the uploaded file. If the file will be uploaded in parts, its size will be set. In this case, the file will not be uploaded to this API. Method {@link VideoElementApi::_fileVideoGet()} will not return the result.'
                is_backend:
                  type: boolean
                  description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_video:
                  type: string
                  description: 'The video key.'
                s_command:
                  type: string
                  description: 'The name of the command that has been executing when the exception occurred.'
                s_file_upload_id:
                  type: string
                  description: 'ID of the uploaded file. If the file will be uploaded in parts, upload ID will be set. In this case, the file will not be uploaded to this API. Method {@link VideoElementApi::_fileVideoGet()} will not return the result.'
                s_file_upload_name:
                  type: string
                  description: 'The real name of the uploaded file. If the file will be uploaded in parts, its name will be set. In this case, the file won''t be uploaded to this API and the POST method won''t return the result.'
                s_thumbnail:
                  type: string
                  description: 'The video thumbnail.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_location:
                    type: string[]
                    description: 'The keys of the locations where this video is available.'
                  a_staff:
                    type: string[]
                    description: 'The keys of the staff members who are on the video.'
                  a_video_category:
                    type: string[]
                    description: 'The video category keys where this video can be found.'
                  a_video_tag:
                    type: string[]
                    description: 'The video tag keys.'
                  dtl_publish:
                    type: string|null
                    description: 'The date and time when the video was published. This will be `null` if the published date is not set yet.'
                  dtl_unpublish:
                    type: string|null
                    description: 'The date and time when the video was unpublished. This will be `null` if the unpublished date is not set yet.'
                  i_calorie:
                    type: number
                    format: int32
                    description: 'The count of burned calories associated with the video.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The video duration in seconds.'
                  id_location_select:
                    type: number
                    format: int32
                    description: '{@link YesNoSid::NO} if the video is available in all locations. {@link YesNoSid::YES} if the video is available only in certain locations.'
                  is_calorie:
                    type: boolean
                    description: 'If `true`, the calorie count will be displayed on the video. If `false`, the calorie count will be hidden on the video.'
                  is_converted:
                    type: boolean
                    description: 'If `true`, the video is converted. If `false`, the video isn''t converted.'
                  is_video_level:
                    type: boolean
                    description: 'If `true`, the video level for the video is enabled. If `false`, the video level for the video is disabled.'
                  k_video_category_primary:
                    type: string
                    description: 'The video category primary key.'
                  k_video_level:
                    type: string
                    description: 'The video level key. This will be `0` if `All Levels` is selected.'
                  text_title:
                    type: string
                    description: 'The video name.'
                  xml_description:
                    type: string
                    description: 'The video description.'
      tags:
        - Video-VideoElement
  '/Wl/Video/VideoList.json':
    get:
      summary: ''
      parameters:
        - name: a_calorie
          in: query
          description: 'The calorie range ascribed to the video to use for the search. <dl> <dt>int [<var>i_from</var>]</dt> <dd>The minimum number of calories.</dd> <dt>int [<var>i_to</var>]</dt> <dd>The maximum number of calories.</dd> </dl>'
          schema:
            type: int[]
        - name: a_duration
          in: query
          description: 'The duration range ascribed to the video to use for the search. The interval is set in seconds. <dl> <dt>int [<var>i_from</var>]</dt> <dd>The minimum duration. </dd> <dt>int [<var>i_to</var>]</dt> <dd>The maximum duration.</dd> </dl>'
          schema:
            type: int[]
        - name: a_level
          in: query
          description: 'A list of levels to show videos for. A level can refer to the difficulty ascribed to the video.'
          schema:
            type: string[]
        - name: a_location
          in: query
          description: 'A list of locations to show videos from.'
          schema:
            type: string[]
        - name: a_staff
          in: query
          description: 'A list of staff members who appear in videos.'
          schema:
            type: string[]
        - name: a_video_category
          in: query
          description: 'A list of video categories to show videos from.'
          schema:
            type: string[]
        - name: a_video_tag
          in: query
          description: 'A list of video tags to show videos for.'
          schema:
            type: string[]
        - name: i_page
          in: query
          description: 'Page to return. Pagination are ignored when count of videos less than {@link VideoListApi::VIDEO_COUNT_PAGINATION}. `null` if you need to return all the videos.'
          schema:
            type: int|null
        - name: id_order
          in: query
          description: 'Sort order ID. One of {@link \Core\Sid\SortOrderSid} constants. `null` or 0 if order is undefined and depends on sort order.'
          schema:
            type: int|null
        - name: id_sort
          in: query
          description: 'The sorting type. A constant from {@link \Wl\Video\Catalog\Filter\Sort\FilterSortSid}. `null` or 0 if sort is undefined and custom sort order is used.'
          schema:
            type: int|null
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: text_search
          in: query
          description: 'The filter phrase to filter videos by name.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'UID of the client who request list of videos. `null` if user is not signed in. NOTE: Not used directly in API, needed for {@link VideoListApi::KEY} constant.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'A list of videos. See {@link VideoElementApi::$url_video} for details about the video URL.'
                  a_page:
                    type: array
                    description: 'Pagination data.'
                  id_order:
                    type: int|null
                    description: 'Sort order ID. One of {@link \Core\Sid\SortOrderSid} constants. `null` or 0 if order is undefined and depends on sort order.'
                  id_sort:
                    type: int|null
                    description: 'The sorting type. A constant from {@link \Wl\Video\Catalog\Filter\Sort\FilterSortSid}. `null` or 0 if sort is undefined and custom sort order is used.'
      tags:
        - Video-VideoList
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_order:
                  type: string[]
                  description: 'A list of shared video keys in their saved order.'
                is_backend:
                  type: boolean
                  description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Video-VideoList
  '/Wl/Location/List.json':
    get:
      summary: 'Retrieves a list of locations for the given business.'
      parameters:
        - name: a_business
          in: query
          description: 'A list of business keys. The primary keys of the businesses in {@link \RsBusinessSql} table. You can specify this instead of <var>$k_business</var> to load data for many businesses in one call.'
          schema:
            type: string[]
        - name: k_business
          in: query
          description: 'The business key used internally by WellnessLiving.'
          schema:
            type: string
        - name: s_business
          in: query
          description: 'The primary keys of the selected businesses. See {@link \RsBusinessSql} table. You can specify this instead of <var>$k_business</var> to load data for many businesses in one call. This is the same as <var>$a_business</var>, but serialized with JSON (to make the URL shorter).'
          schema:
            type: string
        - name: show_remove
          in: query
          description: 'Determines whether removed locations should be returned.'
          schema:
            type: boolean
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_location:
                    type: array[]
                    description: 'Information about the business''s location(s). If you''ve specified multiple businesses for this endpoint, this will return location information for multiple businesses. Keys refer to location keys. Values refer to nested arrays with the next keys: <dl> <dt> int <var>a_directories</var> </dt> <dd> List of directories from {@link \RsProjectSid}, where location is published. </dd> <dt> array <var>a_timezone</var> </dt> <dd> Information about location timezone. Includes `k_timezone` for primary key, `text_abbr` for user-friendly short abbreviation and `text_name` for the name of the timezone. </dd> <dt> float <var>f_latitude</var> </dt> <dd> The location latitude. </dd> <dt> float <var>f_longitude</var> </dt> <dd> The location longitude. </dd> <dt> int <var>i_shift</var> </dt> <dd> Timezone shift in hours. </dd> <dt> string <var>k_business</var> </dt> <dd> The business key. </dd> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> The location key. </dd> <dt> string <var>k_region</var> </dt> <dd> Region key. Primary key in {@link \AGeoSql} table. </dd> <dt> string <var>s_title</var> </dt> <dd> The location title. </dd> <dt> string <var>text_address</var> </dt> <dd> The location''s full address. </dd> <dt> string [<var>url_logo</var>] </dt> <dd> The location logo''s URL. This will only be set if the location has a logo and contains small thumbnail of the image. </dd> <dt> string [<var>url_logo_source</var>] </dt> <dd> The location logo''s URL. This will only be set if the location has a logo and contains full uploaded image. </dd> </dl>'
      tags:
        - Location-List
  '/Wl/Location/Location.json':
    post:
      summary: 'Creates new location or edits the existing location.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The key of the business. This field is required.'
                k_city:
                  type: string|null
                  description: 'The key of the city. This field is required for creating a new location.'
                k_location:
                  type: string|null
                  description: 'The key of the location. This will be `null` if it''s being used to create a new location.'
                k_timezone:
                  type: string|null
                  description: 'The key of the time zone. This field is optional.'
                text_address:
                  type: string|null
                  description: 'The address of the location. This field is required for creating a new location.'
                text_email:
                  type: string|null
                  description: 'The mail address.'
                text_phone:
                  type: string|null
                  description: 'The phone number.'
                text_postal:
                  type: string|null
                  description: 'The postal code.'
                text_title:
                  type: string|null
                  description: 'The title of the location. This field is required for creating a new location.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_location:
                    type: string|null
                    description: 'The key of the location. This will be `null` if it''s being used to create a new location.'
      tags:
        - Location-Location
  '/Wl/Location/ListBulk.json':
    get:
      summary: 'Gets location lists for a bulk of businesses.'
      parameters:
        - name: id_directory
          in: query
          description: 'The ID of the directory if locations should be filtered by enabling directory integration. `0` if a directory filter isn''t required.'
          schema:
            type: number
            format: int32
        - name: s_business
          in: query
          description: 'A list of businesses. Business primary keys are serialized with JSON. Empty string if you need all locations in the system.'
          schema:
            type: string
        - name: s_location
          in: query
          description: 'A list of locations. Location primary keys are serialized with JSON.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_location:
                    type: array
                    description: 'Short-form information about locations. Keys refer to location primary keys. Values refer to sub-arrays with the next keys: <dl> <dt> float <var>f_latitude</var> </dt> <dd> The latitude coordinate. </dd> <dt> float <var>f_longitude</var> </dt> <dd> The longitude coordinate. </dd> <dt> float <var>f_rate</var> </dt> <dd> The location rate. </dd> <dt> int <var>i_order</var> </dt> <dd> The order number. </dd> <dt> string <var>k_business</var> </dt> <dd> The business''s primary key. </dd> <dt> string <var>k_location</var> </dt> <dd> The location''s primary key. </dd> <dt> string <var>s_title</var> </dt> <dd> The location title. </dd> <dt> string <var>text_address</var> </dt> <dd> The full location address. </dd> <dt> string [<var>url_logo</var>] </dt> <dd> The location logo. </dd> </dl>'
                  a_location_full:
                    type: array[]
                    description: 'A list of models with full information about each location. Every element is an object of the {@link \Wl\Location\View\ViewApi}.'
      tags:
        - Location-ListBulk
  '/Wl/Fitbuilder/Message.json':
    post:
      summary: 'Notifies messengers with new information.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_data:
                  type: array
                  description: 'Messenger information: <dl> <dt> array `message` <dt> <dd> Message information: <dl><dt>string `id`</dt><dd>Message key.</dd> <dt>string `message`</dt><dd>Message text.</dd> <dt>string `updated_at`</dt><dd>Date/time when the message has been posted.</dd></dl> </dd> <dt> array `user_profile` </dt> <dd> User''s information. </dd> </dl>'
                k_channel:
                  type: string
                  description: 'Messenger channel key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Fitbuilder-Message
  '/Wl/Promotion/PromotionList.json':
    get:
      summary: 'Returns promotion list of the specified business.'
      parameters:
        - name: is_franchise
          in: query
          description: 'Determines whether to return promotions created by Enterprise Locations (for Enterprise Cloud businesses only). If `true`, promotions created by Enterprise Locations are included. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key used to get the promotions.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion:
                    type: array[]
                    description: 'A list of promotions. <dl> <dt> int <var>id_program</var> </dt> <dd> The promotion program. One of the {@link \RsProgramSid} constants. </dd> <dt> string <var>k_promotion</var> </dt> <dd> The key of the promotion. Primary key in {@link \RsPromotionSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the promotion. </dd> </dl>'
      tags:
        - Promotion-PromotionList
  '/Wl/Promotion/Promotion.json':
    get:
      summary: 'Returns promotion by the specified business and promotion keys. {@inheritdoc}'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business.'
          schema:
            type: string
        - name: k_promotion
          in: query
          description: 'The key of the promotion.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion:
                    type: array[]
                    description: 'Promotion information. <dl> <dt> array <var>a_access</var> </dt> <dd> Information about services that can be attended with this pass or membership. <dl> <dt>array[] <var>a_class</var></dt> <dd>A list of available classes. Each element is primary key from {@link \RsClassSql} table.</dd> <dt>array[] <var>a_event</var></dt> <dd>A list of available events. Each element is primary key from {@link \RsClassSql} table.</dd> <dt>array[] <var>a_resource</var></dt> <dd>A list of available assets. Each element is primary key from {@link \RsResourceSql} table.</dd> <dt>array[] <var>a_service</var></dt> <dd>A list of available appointment types. Each element is primary key from {@link \RsServiceSql} table.</dd> <dt>bool <var>is_class_all</var></dt> <dd>This will be `true` if any class in the business can be visited with this Purchase Option. Otherwise, this will be `false` if only selected classes can be visited with this Purchase Option. Selected classes can be found in the list of available classes and events.</dd> <dt>bool <var>is_event_all</var></dt> <dd>This will be `true` if any event in the business can be visited with this Purchase Option. Otherwise, this will be `false` if only selected events can be visited with this Purchase Option. Selected events can be found in the list of available classes and events.</dd> </dl> </dd> <dt> array <var>a_image</var> </dt> <dd> Information about Purchase Option image. This will be an empty array if the Purchase Option doesn''t have an image. <dl> <dt>string <var>i_height</var></dt> <dd>The height of the image.</dd> <dt>string <var>i_width</var></dt> <dd>The width of the image.</dd> <dt>string <var>url-thumbnail</var></dt> <dd>The link to the image.</dd> </dl> </dd> <dt> string <var>dl_expire</var> </dt> <dd> The local expiration date. This is the last day when the Purchase Option is active. This is used only when the ''Expires on a certain date'' duration type is set. </dd> <dt> int <var>i_duration</var> </dt> <dd> The number of periods for the ''Period'' duration type. For example, if the duration of the Purchase Option is 12 months, this field will be 12. </dd> <dt> int <var>i_limit</var> </dt> <dd> The number of visits that the owner can use for the Purchase Option. This will be `0` if the Purchase Option allows for unlimited visits. </dd> <dt> int <var>id_duration</var> </dt> <dd> The type of period for the ''Period'' duration type. For example, if the duration of the Purchase Option is 12 months, this field will display the ID of the month. For all possible options, see {@link \ADurationSid}. </dd> <dt> int <var>id_duration_type</var> </dt> <dd> The duration type. Possible duration types can be ''Without End'', ''Expires on a certain date'', ''Period''. For more information, see {@link \RsDurationTypeSid}. </dd> <dt> int <var>id_program</var> </dt> <dd> The Purchase Option type. For more information, see {@link \RsProgramSid}. </dd> <dt> bool <var>is_introductory</var> </dt> <dd> If `true`, this promotion is for introductory clients. Otherwise, this will be `false`. </dd> <dt> bool <var>is_online</var> </dt> <dd> If `true`, this promotion is available for online purchase. Otherwise, this will be `false`. </dd> <dt> string <var>k_promotion</var> </dt> <dd> The key of the promotion. Primary key in {@link \RsPromotionSql} table. </dd> <dt> string <var>m_price</var> </dt> <dd> The price. </dd> <dt> string <var>text_description</var> </dt> <dd> The description of the Purchase Option. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the Purchase Option. </dd> <dt> string <var>url_buy</var> </dt> <dd> The direct URL to the promotion purchase page. </dd> </dl>'
      tags:
        - Promotion-Promotion
  '/Wl/Lead/Lead.json':
    get:
      summary: 'Gets information necessary to display "Lead capture" widget.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of business to which the new user must be captured.'
          schema:
            type: string
        - name: k_skin
          in: query
          description: 'The key of the widget skin. If left empty, then the default skin is used. This will be the Lead Capture widget skin with "Use this widget for the Add Lead form" selected. If your business doesn''t have a skin selected, this endpoint will default to the system-wide default, which may lack fields your business requires when adding a lead or a client.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array[]
                    description: 'A list of profile fields in the business. Every element has the following keys: <dl> <dt> array[] <var>a_item</var> </dt> <dd> A list of possible options for an HTML select field. This value is only used if this field is an HTML select. Every element has the following keys: <dl> <dt>string <var>s_id</var></dt> <dd>The option ID.</dd> <dt>string <var>text_title</var></dt> <dd>The option title.</dd> </dl> </dd> <dt> int <var>id_field_general</var> </dt> <dd> The type of the general field. This is one of the {@link \RsFieldGeneralSid}. This value is only set if the field is one of the general fields. </dd> <dt> int <var>id_field_type</var> </dt> <dd> The field type. This is one of the {@link \RsFieldTypeSid} constants. </dd> <dt> bool <var>is_require</var> </dt> <dd> If `true`, then the field is mandatory. If `false`, then the field isn''t mandatory. </dd> <dt> string <var>k_field</var> </dt> <dd> The field key. Primary key in {@link \RsFieldSql} table. </dd> <dt> string <var>text_field</var> </dt> <dd> The field title. </dd> </dl>'
                  a_skin:
                    type: array
                    description: 'The skin configuration: <dl> <dt>array <var>a_style</var></dt><dd>The general style settings.</dd> <dt>array <var>background</var></dt><dd>The background settings.</dd> <dt>array <var>field-font</var></dt><dd>The font settings.</dd> <dt>array <var>header-text</var></dt><dd>The header settings.</dd> <dt>array <var>info-show</var></dt><dd>The information settings.</dd> <dt>array <var>submit-background</var></dt><dd>The settings for the submit button background.</dd> <dt>array <var>submit-font</var></dt><dd>The settings for the submit button font.</dd> <dt>array <var>submit-text</var></dt><dd>The settings for the submit button text.</dd> </dl>'
                  can_use_free_purchase:
                    type: bool|null
                    description: 'Whether it is possible to give free promotion when adding a user (only if free promotion is configured in the widget). `true` or `null` if it is possible, `false` if not. `null` used for backward compatibility.'
                  url_captcha:
                    type: string
                    description: 'The URL to load the image with a captcha test. This string is empty if it''s not necessary to pass a captcha test.'
      tags:
        - Lead-Lead
    post:
      summary: 'Saves new user via "Lead capture".'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_field_data:
                  type: string[]
                  description: 'A list of fields containing the lead information. The keys are the field keys and values are field values. If field key is `Address` field key, value may be an array or string. Can be a string if only address field is used. Will be an array if city and postal code are used, with the following keys: <dl> <dt>string <var>text_address</var></dt> <dd>Address.</dd> <dt>string <var>k_city</var></dt> <dd>City key. Primary key in {@link \AGeoSql}.</dd> <dt>string <var>text_postal</var></dt> <dd>Postal code.</dd> </dl>'
                k_business:
                  type: string
                  description: 'The key of business to which the new user must be captured.'
                k_skin:
                  type: string
                  description: 'The key of the widget skin. If left empty, then the default skin is used. This will be the Lead Capture widget skin with "Use this widget for the Add Lead form" selected. If your business doesn''t have a skin selected, this endpoint will default to the system-wide default, which may lack fields your business requires when adding a lead or a client.'
                s_captcha:
                  type: string
                  description: 'The characters entered by the lead for the captcha test. This isn''t necessary if the GET method returned an empty {@link LeadApi::$url_captcha}. This field isn''t necessary if the GET method returned an empty {@link LeadApi::$url_captcha}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_use_free_purchase:
                    type: bool|null
                    description: 'Whether it is possible to give free promotion when adding a user (only if free promotion is configured in the widget). `true` or `null` if it is possible, `false` if not. `null` used for backward compatibility.'
                  uid:
                    type: string
                    description: 'The key of the new user.'
      tags:
        - Lead-Lead
  '/Wl/Tag/TagList.json':
    get:
      summary: 'Returns tags of the specified business.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key of the tags.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'The tag list. Each element has the next structure:<dl> <dt>string <var>k_tag</var> </dt> <dd>The tag key. Primary key in the {@link \RsTagSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>The tag title.</dd> </dl>'
                  has_fee:
                    type: boolean
                    description: 'Whether a business did set up a penalty fee for failed automatic payments.'
                  has_surcharge:
                    type: boolean
                    description: 'Whether a business did set up surcharges.'
      tags:
        - Tag-TagList
  '/Wl/Tax/TaxList.json':
    get:
      summary: 'Returns taxes of the specified business.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business for which to get a list of taxes.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'A list of taxes. Each element has the following structure:<dl> <dt>float <var>f_value</var> </dt> <dd>The amount of the tax.</dd> <dt>string <var>k_tax</var> </dt> <dd>The type of the tax, one of the {@link \RsTaxSid} constants.</dd> <dt>string <var>k_tax</var> </dt> <dd>The tax key.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the tax.</dd> </dl>'
      tags:
        - Tax-TaxList
  '/Wl/Tax/Tax.json':
    get:
      summary: ''
      parameters:
        - name: k_tax
          in: query
          description: 'The tax key to get information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  text_tax:
                    type: string
                    description: 'The tax title.'
      tags:
        - Tax-Tax
  '/Wl/Announcement/AnnouncementList.json':
    get:
      summary: ''
      parameters:
        - name: id_order
          in: query
          description: 'Order ID for list of announcements. Used only when {@link AnnouncementListApi::$is_backend} is `true`. `null` in case when use default order.'
          schema:
            type: int|null
        - name: id_sort_field
          in: query
          description: 'Sort field ID for list of announcements. Used only when {@link AnnouncementListApi::$is_backend} is `true`. `null` in case when use default field.'
          schema:
            type: int|null
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location key for which need show announcement. `null` in case when need show location for all locations in business.'
          schema:
            type: string|null
        - name: text_search
          in: query
          description: 'The filter phrase to filter announcements by name.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'List of announcements.'
                  id_order:
                    type: int|null
                    description: 'Order ID for list of announcements. Used only when {@link AnnouncementListApi::$is_backend} is `true`. `null` in case when use default order.'
                  id_sort_field:
                    type: int|null
                    description: 'Sort field ID for list of announcements. Used only when {@link AnnouncementListApi::$is_backend} is `true`. `null` in case when use default field.'
      tags:
        - Announcement-AnnouncementList
  '/Thoth/ReportCore/Generator/Query.json':
    post:
      summary: 'Returns contents of a report as a table. If the report is not yet generated, it gets generated. If the report is being generated now, partial content may be returned.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cid_report:
                  type: number
                  format: int32
                  description: 'CID of the report to show. One of {@link ReportGeneratorReportAbstract} subclasses.'
                i_limit:
                  type: number
                  format: int32
                  description: 'How many rows of the report to return. `0` to not to return content at all. This may be useful to get metadata of the report.'
                i_offset:
                  type: number
                  format: int32
                  description: 'Offset. How many rows of the report to skip at the beginning of the list. Only return rows after the last skipped row. `0` to return contents from the very beginning.'
                is_actual:
                  type: boolean
                  description: 'Defines whether actual or already generated report should be returned. `true` to not attempt search generated report and generate it again. `false` to attempt search generated report.'
                is_backend:
                  type: boolean
                  description: 'Whether report is generating for the backend.'
                is_refresh:
                  type: boolean
                  description: 'Whether this report should be refreshed. `true` to refresh this report if it is already generated. Refreshing of the report may not be queried while report is being generated. `false` to only return contents of the report. If report is not yet generated, it automatically starts the generation in the background.'
                json_filter:
                  type: array
                  description: 'Filters that should be applied to the report. In this array, key is name of a filter field. A filter field is a property of a {@link ReportFilterAbstract} subclass. Name of the property of that subclass corresponds key in this array.'
                k_business:
                  type: string
                  description: 'Key of the business which report should be shown. Primary key in {@link \RsBusinessSql}. `0` or an empty string for system-wide reports.'
                s_sort:
                  type: string
                  description: 'Sorting order. A comma-separated list of fields to sort by. Name of a field may be prepended with a `+` or `-` sign to sort in ascending or descending order. Ascending order is the default. You may sort reports by report fields and by cell fields. To sort by a report field, just specify name of that field. To sort by a cell field, specify name of a report field and name of the cell field. Separate with a dot. For example: <tt>o_account.m_amount</tt>. You may specify a field which contains objects of {@link ReportGeneratorCellAbstract} without specification of a name of a cell field. In this case sorting specified by {@link ReportGeneratorCellAbstract::SORT} will be applied. Example value: <tt>s_first,+s_last,-o_account.m_amount,o_address</tt>. Means the following: * sort by <tt>s_first</tt> in ascending order (which is the default). * sort by <tt>s_last</tt> in ascending order (which is specified explicitly). * sort by <tt>m_amount</tt> field of <tt>o_account</tt> cell in descending order. * sort by default field (i.e. the one marked with &#64;`sort` tag) of <tt>o_address</tt> cell in ascending order. Note that you may not sort by fields that are marked with &#64;`store-no` tag.'
                s_sql:
                  type: string
                  description: 'An SQL query that should be executed on report table. See <tt>namespace.Wl/Report/Generator/doc/report-query-sql.md</tt> for details. Empty string to select all columns of the report table.'
                uid_actor:
                  type: string
                  description: 'Actor user. Primary key in {@link \PassportLoginSql}. `0` or an empty string for guests.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_dynamic:
                    type: array[]|reportgeneratorfieldinfo[]
                    description: 'A list of dynamic fields in this report. Copy of result of {@link ReportGeneratorReportAbstract::generatorDynamic()}.'
                  a_field:
                    type: string[]
                    description: 'A list of fields in this report. This array is effectively a title row for table that is returned in {@link QueryApi::$a_row}.'
                  a_row:
                    type: string[][]
                    description: 'Report data. This is an indexed array in which one row is an indexed array also. Indexes of the columns correspond columns in {@link QueryApi::$a_field}.'
                  a_stale:
                    type: int[]
                    description: 'A list of stale rows. This array is only filled in when report is being updated now, or due to some other reasons contains mixed version data (some data from the latest generation, and other from one of previous generations). Value is index in {@link QueryApi::$a_row}. If a row is not listed here, it is of the latest version.'
                  a_warning:
                    type: string[]
                    description: 'Warning list of the report.'
                  dtu_complete:
                    type: string
                    description: 'Date and time when this report has completed generation. `null` if generation of this report is not completed. See {@link ReportStorageListSql}.<tt>dtu_complete</tt> for additional details.'
                  dtu_queue:
                    type: string
                    description: 'Date and time when this report was put on generation queue. Effectively, this is the time when a user clicked to view this report. See {@link ReportStorageListSql}.<tt>dtu_queue</tt> for additional details.'
                  dtu_start:
                    type: string
                    description: 'Date and time when generation of this report has started. `null` if generation of this report is not started. See {@link ReportStorageListSql}.<tt>dtu_start</tt> for additional details.'
                  i_cas_change:
                    type: number
                    format: int32
                    description: 'A CAS (compare-and-swap) number that allows to track changes in the report storage. This number is changed every time content of the report gets updated. If this number is not changed, the content is not updated. Copy of {@link ReportStorageListSql}.<tt>i_cas_change</tt>.'
                  id_report_status:
                    type: number
                    format: int32
                    description: 'Status of the report. One of {@link ReportGeneratorStatusSid} constants.'
                  s_report:
                    type: string
                    description: 'Key of this report. This key may be used to subscribe to report changes with {@link UpdateChannel}.'
                  text_error:
                    type: string
                    description: 'Text of an error message that occurred during generation of the report. An empty string in no error messages have occurred.'
      tags:
        - Generator-Query
  '/Studio/Microservice/Editor/List.json':
    get:
      summary: 'Gets a list of microservices.'
      parameters:
        - name: id_remove
          in: query
          description: 'Specifies whether to show removed and/or not removed microservices. One of {@link \AFlagSid} constants. * {@link \AFlagSid::ON} to show only not removed microservices. * {@link \AFlagSid::OFF} to show only removed microservices. * {@link \AFlagSid::ALL} to show all microservices (removed and not removed).'
          schema:
            type: number
            format: int32
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: string[][]
                    description: 'A list of microservices. One element contains:<dl> <dt>bool <var>is_remove</var></dt> <dd>Whether the microservice has been deleted. `true` is the microservice is removed, `false` otherwise.</dd> <dt>string <var>json_path</var></dt> <dd> A list of repositories and paths of this microservice. Copy of {@link \Studio\Microservice\MicroserviceSql}.<var>json_path</var> field. </dd> <dt>string <var>k_project</var></dt> <dd>Project key. Primary key in {@link \StudioProjectSql} table.</dd> <dt>string <var>s_file</var></dt> <dd>File name.</dd> <dt>string <var>s_variable</var></dt> <dd> Microservice-specific variables. A set of pairs key=value, separated by newlines. The list of variables is described in class {@link PromotingConfigValue}. </dd> <dt>string <var>text_project</var></dt> <dd>Title of the project.</dd> <dt>string <var>text_title</var></dt> <dd>Title of the microservice.</dd> <dt>string <var>url_microservice_promoting</var></dt> <dd>URL of the promoting page for this microservice.</dd> </dl>'
      tags:
        - Editor-List
  '/Studio/Task/Branch/BranchList.json':
    get:
      summary: ''
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_data:
                    type: array
                    description: 'List of branch. One element contains: <dl> <dt>string[] <var>a_path</var></dt> <dd> Information about paths into which catalogs are cloned/copied. The structure corresponds to the {@link BranchSql}.<var>z_path</var> field. </dd> <dt>string <var>dtu_create</var></dt> <dd>Date when branch was created.</dd> <dt>string <var>k_deploy_instance</var></dt> <dd>Key of deployment instance. Primary key in {@link \StudioDeployInstanceSql} table.</dd> <dt>string <var>k_task</var></dt> <dd>Task key. Primary key in {@link \StudioTaskSql} table.</dd> <dt>string <var>text_create</var></dt> <dd>Formatted time interval when branch was created.</dd> <dt>string <var>text_fio</var></dt> <dd>Task author name.</dd> <dt>string <var>text_title</var></dt> <dd>Title of the task.</dd> <dt>string <var>url_task</var></dt> <dd>URL of the task.</dd> </dl>'
      tags:
        - Branch-BranchList
  '/Studio/Task/Branch/Branch.json':
    delete:
      summary: 'Changes a status of the branch for the specified task in the database and runs build for deleting a branch.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_build_mode:
                  type: number
                  format: int32
                  description: 'Mode of the <tt>BranchDelete</tt> build.'
                k_deploy_instance:
                  type: string
                  description: 'Deployment instance key which creates/deletes a branch for the specified task. Primary key in the {@link \StudioDeployInstanceSql} table.'
                k_task:
                  type: string
                  description: 'Task key within which a branch should be created/deleted. Primary key in the {@link \StudioTaskSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  url_build:
                    type: string
                    description: 'Url to build page. Empty string means that build is not started.'
      tags:
        - Branch-Branch
    get:
      summary: ''
      parameters:
        - name: id_stand_status
          in: query
          description: 'Stand status, one of {@link StandStatusSid}. `null` if not initialized and will be ignored.'
          schema:
            type: int|null
        - name: k_task
          in: query
          description: 'Task key within which a branch should be created/deleted. Primary key in the {@link \StudioTaskSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_branch_data:
                    type: array|string|null
                    description: 'Addition information about branch and related entities. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  a_stand_data:
                    type: array|string|null
                    description: 'Information about entities necessary for the functioning of the stand. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  id_branch_status:
                    type: int|null
                    description: 'Branch status, one of {@link BranchStatusSid}.'
                  id_stand_status:
                    type: int|null
                    description: 'Stand status, one of {@link StandStatusSid}. `null` if not initialized and will be ignored.'
      tags:
        - Branch-Branch
    post:
      summary: 'Registers a new branch for the specified task in the database and runs a build for creating a branch.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_deploy_instance:
                  type: string
                  description: 'Deployment instance key which creates/deletes a branch for the specified task. Primary key in the {@link \StudioDeployInstanceSql} table.'
                k_task:
                  type: string
                  description: 'Task key within which a branch should be created/deleted. Primary key in the {@link \StudioTaskSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_branch_data:
                    type: array|string|null
                    description: 'Addition information about branch and related entities. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  a_stand_data:
                    type: array|string|null
                    description: 'Information about entities necessary for the functioning of the stand. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  url_build:
                    type: string
                    description: 'Url to build page. Empty string means that build is not started.'
      tags:
        - Branch-Branch
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_stand_status:
                  type: int|null
                  description: 'Stand status, one of {@link StandStatusSid}. `null` if not initialized and will be ignored.'
                k_task:
                  type: string
                  description: 'Task key within which a branch should be created/deleted. Primary key in the {@link \StudioTaskSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_branch_data:
                    type: array|string|null
                    description: 'Addition information about branch and related entities. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  a_stand_data:
                    type: array|string|null
                    description: 'Information about entities necessary for the functioning of the stand. Has an arbitrary structure. `string` if it needs to set an empty value. `null` will not change.'
                  id_stand_status:
                    type: int|null
                    description: 'Stand status, one of {@link StandStatusSid}. `null` if not initialized and will be ignored.'
      tags:
        - Branch-Branch
  '/Studio/Task/Branch/BranchBuild.json':
    delete:
      summary: 'Deletes a branch from the database. <tt>BranchDelete</tt> build calls at the end of the executing.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                s_task_link:
                  type: string
                  description: 'Task link of the branch. Copy of the {@link \StudioTaskSql}.<var>s_link</var> field.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Branch-BranchBuild
    post:
      summary: 'Sets build that creates a branch and information about paths into which catalogs are cloned. <tt>BranchCreate</tt> build calls at the start of the executing.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_path:
                  type: array
                  description: 'Information about paths into which catalogs are cloned. Keys are aliases of the original repository catalogs. Values are paths into which original catalogs are cloned. Each element has the following structure:<dl> <dt>int <var>id_repository_server_type</var></dt> <dd>Repository service type ID. One of {@link \StudioRepositoryServerTypeSid} constants.</dd> <dt>string <var>s_destination</var></dt> <dd>Path into which original catalog is cloned/copied.</dd> <dt>string <var>s_repository</var></dt> <dd>Repository name.</dd> <dt>string <var>s_source</var></dt> <dd>Path of the original catalog.</dd> </dl> Set this property when a new branch is created. In other cases, an exception will be thrown.'
                k_build:
                  type: string
                  description: 'Build key that creates a branch for the specified task. Primary key in the {@link \StudioBuildSql} table.'
                s_task_link:
                  type: string
                  description: 'Task link of the branch. Copy of the {@link \StudioTaskSql}.<var>s_link</var> field.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Branch-BranchBuild
    put:
      summary: 'Changes branch status as {@link BranchStatusSid::READY}. <tt>BranchCreate</tt>> build calls at the end of the executing.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_build:
                  type: string
                  description: 'Build key that creates a branch for the specified task. Primary key in the {@link \StudioBuildSql} table.'
                s_task_link:
                  type: string
                  description: 'Task link of the branch. Copy of the {@link \StudioTaskSql}.<var>s_link</var> field.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Branch-BranchBuild
  '/Studio/Deploy/Cluster/Cluster.json':
    post:
      summary: 'Create new `Deploy Cluster`.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_port:
                  type: int|null
                  description: 'SSH port number that should be used by compilation server to connect instance servers.'
                is_active:
                  type: int|null
                  description: 'Whether this deployment cluster is active.'
                is_fingerprint:
                  type: boolean
                  description: 'Whether to update fingerprints. Additionally, this setting allows you to force the transfer of keys to the server.'
                k_deploy_cluster:
                  type: string|null
                  description: 'Key of the cluster being saved.'
                k_deploy_compile:
                  type: string|null
                  description: 'ID of deployment server that serves this cluster. Primary key in {@link \StudioDeployCompileSql}.'
                k_deploy_instance:
                  type: string|null
                  description: '`Deploy Instance` ID. Primary key in {@link \StudioDeployInstanceSql}.'
                s_cluster:
                  type: string|null
                  description: 'Cluster description contains either amazon security group id.'
                s_deploy_cluster:
                  type: string|null
                  description: 'Name of this deployment cluster.'
                s_key_control:
                  type: string|null
                  description: 'Private key to access all instances of cluster over SSH under control user.'
                s_ssh:
                  type: string|null
                  description: 'Private key to access all instances of cluster over SSH under instance user.'
                s_user:
                  type: string|null
                  description: 'Name of instance user.'
                s_user_control:
                  type: string|null
                  description: 'Name of control user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_deploy_cluster:
                    type: string|null
                    description: 'Key of the cluster being saved.'
      tags:
        - Cluster-Cluster
  '/Studio/Deploy/Instance/Instance.json':
    delete:
      summary: 'Delete an instance from database. For now only `stand` instances can be deleted physically.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_deploy_instance:
                  type: string|null
                  description: 'The key of `Studio Deploy Instance`.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Instance-Instance
    post:
      summary: 'Creates new `Deploy Instance`'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_role:
                  type: string[]|null
                  description: 'List of `Project Role`.'
                a_tag:
                  type: string[]|null
                  description: 'List of tags. Each is one of {@link Tag::TAG_LIST}.'
                is_button:
                  type: bool|null
                  description: 'Allow users to start builds manually by clicking a button.'
                is_commit:
                  type: bool|null
                  description: 'Run build automatically upon commit.'
                is_queue:
                  type: bool|null
                  description: 'Allow multiple commits to wait in the build queue. If not allowed, then only a single (the last one) commit may wait in the queue.'
                is_remove:
                  type: bool|null
                  description: 'Indicates if instance set as removed.'
                k_amazon_account:
                  type: string|null
                  description: 'The key of `Studio Amazon Account`.'
                k_deploy_instance:
                  type: string|null
                  description: 'The key of `Studio Deploy Instance`.'
                k_project:
                  type: string|null
                  description: 'The key of `Studio Project`'
                s_deploy_instance:
                  type: string|null
                  description: 'The name of `Studio Deploy Instance`.'
                s_path:
                  type: string|null
                  description: 'The value contains a list of repository path.'
                s_variable:
                  type: string|null
                  description: 'The value contains a list of variables.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Instance-Instance
  '/Studio/Personnel/DebugToken/DebugTokenService.json':
    get:
      summary: 'Return information is the debug token is valid.'
      parameters:
        - name: s_token
          in: query
          description: 'Debug token to check.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_valid:
                    type: boolean
                    description: 'Debug token to check and if valid to return `true` otherwise `false`.'
      tags:
        - DebugToken-DebugTokenService
  '/Studio/Service/Cid/Info.json':
    get:
      summary: 'Returns information about a CID.'
      parameters:
        - name: cid
          in: query
          description: 'CID of the class to retrieve information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  s_class:
                    type: string
                    description: 'Name of the class associated with specified CID.'
      tags:
        - Cid-Info
  '/Studio/Service/Cid/Register.json':
    post:
      summary: 'Registers a new CID. If class is registered already, returns its CID.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                s_class:
                  type: string
                  description: 'Name of the class to register.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cid:
                    type: number
                    format: int32
                    description: 'CID of requested class.'
      tags:
        - Cid-Register
  '/Studio/Service/Cid/Rename.json':
    put:
      summary: 'Allows to rename a class associated with a CID.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cid:
                  type: string
                  description: 'CID of the class to rename.'
                s_class:
                  type: string
                  description: 'New name to assign to a CID.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Cid-Rename
  '/Studio/Ip/Service/Edit.json':
    delete:
      summary: 'Deletes an IP service.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_service:
                  type: string|null
                  description: 'If a service is edited, its key is stored here. Primary key in {@link \Studio\Ip\Service\ServiceSql}. <tt>null</tt> if a new service should be created. This value is required for create and delete operations.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Service-Edit
    get:
      summary: 'Returns information about an IP service.'
      parameters:
        - name: k_ip_service
          in: query
          description: 'If a service is edited, its key is stored here. Primary key in {@link \Studio\Ip\Service\ServiceSql}. <tt>null</tt> if a new service should be created. This value is required for create and delete operations.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_service_timeout:
                    type: number
                    format: int32
                    description: 'Timeout of the service. One of {@link \Studio\Ip\Service\ServiceTimeoutSid} constants.'
                  id_service_type:
                    type: number
                    format: int32
                    description: 'Type of the service. One of {@link \Studio\Ip\Service\ServiceTypeSid} constants.'
                  text_group:
                    type: string
                    description: 'Group of services.'
                  text_title:
                    type: string
                    description: 'Name of the service.'
                  text_update:
                    type: string
                    description: 'Network update rules.'
      tags:
        - Service-Edit
    post:
      summary: 'Saves an IP service.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_service:
                  type: string|null
                  description: 'If a service is edited, its key is stored here. Primary key in {@link \Studio\Ip\Service\ServiceSql}. <tt>null</tt> if a new service should be created. This value is required for create and delete operations.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_service_timeout:
                    type: number
                    format: int32
                    description: 'Timeout of the service. One of {@link \Studio\Ip\Service\ServiceTimeoutSid} constants.'
                  id_service_type:
                    type: number
                    format: int32
                    description: 'Type of the service. One of {@link \Studio\Ip\Service\ServiceTypeSid} constants.'
                  text_group:
                    type: string
                    description: 'Group of services.'
                  text_title:
                    type: string
                    description: 'Name of the service.'
                  text_update:
                    type: string
                    description: 'Network update rules.'
      tags:
        - Service-Edit
  '/Studio/Ip/Bot/Access.json':
    delete:
      summary: 'Revokes bot access from a service.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_bot:
                  type: string
                  description: 'Key of a bot which access should be changed.'
                k_ip_service:
                  type: string
                  description: 'Key of a service which access should be changed.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Bot-Access
    put:
      summary: 'Grants bot access to a service.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_bot:
                  type: string
                  description: 'Key of a bot which access should be changed.'
                k_ip_service:
                  type: string
                  description: 'Key of a service which access should be changed.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Bot-Access
  '/Studio/Ip/Bot/Edit.json':
    delete:
      summary: 'Deletes a bot.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_bot:
                  type: string|null
                  description: 'If a bot is edited, its key is stored here. Primary key in {@link \Studio\Ip\Bot\BotSql}. <tt>null</tt> if a new bot should be created. This value is required for create and delete operations.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Bot-Edit
    get:
      summary: 'Returns information about a bot.'
      parameters:
        - name: k_ip_bot
          in: query
          description: 'If a bot is edited, its key is stored here. Primary key in {@link \Studio\Ip\Bot\BotSql}. <tt>null</tt> if a new bot should be created. This value is required for create and delete operations.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_active:
                    type: string
                    description: 'Whether this bot is active.'
                  text_bot:
                    type: string
                    description: 'Name of the bot.'
                  text_network:
                    type: string
                    description: 'Network of the bot. Note that value sent here is ignored in a case {@link Studio_Ip_Bot_EditModel.text_update} is not empty.'
                  text_password:
                    type: string
                    description: 'Update password.'
                  text_update:
                    type: string
                    description: 'Network update rules.'
      tags:
        - Bot-Edit
    post:
      summary: 'Saves a bot.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_ip_bot:
                  type: string|null
                  description: 'If a bot is edited, its key is stored here. Primary key in {@link \Studio\Ip\Bot\BotSql}. <tt>null</tt> if a new bot should be created. This value is required for create and delete operations.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_active:
                    type: string
                    description: 'Whether this bot is active.'
                  text_bot:
                    type: string
                    description: 'Name of the bot.'
                  text_network:
                    type: string
                    description: 'Network of the bot. Note that value sent here is ignored in a case {@link Studio_Ip_Bot_EditModel.text_update} is not empty.'
                  text_password:
                    type: string
                    description: 'Update password.'
                  text_update:
                    type: string
                    description: 'Network update rules.'
      tags:
        - Bot-Edit
  '/Core/Request/Api/KeySecret.json':
    get:
      summary: 'Gets a secret key for signing.'
      parameters:
        - name: s_csrf
          in: query
          description: 'The CSRF code from the client side.'
          schema:
            type: string
        - name: s_key_session
          in: query
          description: 'The session key.'
          schema:
            type: string
        - name: url_domain
          in: query
          description: 'Alias of {@link \Core\Request\Api\KeySecretApi::$url_origin}.'
          schema:
            type: string
        - name: url_origin
          in: query
          description: 'Origin for client requests.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  s_key_secret:
                    type: string
                    description: 'The secret key for the request signing.'
      tags:
        - Api-KeySecret
  '/Core/Request/Token/TokenPin.json':
    get:
      summary: 'Gets new pin code.'
      parameters:
        - name: text_push
          in: query
          description: 'The ID to use to send a security code via a push notification.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dtu_expire:
                    type: string
                    description: 'The expiration date/time of the PIN code.'
                  text_pin:
                    type: string
                    description: 'The PIN code.'
      tags:
        - Token-TokenPin
  '/Core/Passport/Login/Info.json':
    get:
      summary: 'Returns information about user that is currently signed in.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string|null
                    description: 'The current user key. This will be `null` if the user isn''t signed in.'
                  url_password_change:
                    type: string
                    description: 'A URL that a user can visit to reset their password.'
                  url_register:
                    type: string
                    description: 'The URL to the registration page.'
      tags:
        - Login-Info
  '/Core/Passport/ChangePassword/ChangePasswordApply.json':
    post:
      summary: 'Saves for user new password.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_code:
                  type: string
                  description: 'The verification code, which can be obtained from the "reset password" email link. This is a required value.'
                text_login:
                  type: string
                  description: 'The user''s login, which can be obtained from the "reset password" email link. This is a required value.'
                text_mail:
                  type: string
                  description: 'The user''s email address, which can be obtained from the "reset password" email link. This is a required value.'
                text_password:
                  type: string
                  description: 'The user''s new password. This is a required value.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - ChangePassword-ChangePasswordApply
  '/Core/Passport/ChangePassword/ChangePasswordBegin.json':
    post:
      summary: 'Sends to user "password recovery" mail.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_captcha:
                  type: string
                  description: 'The characters to pass captcha test. Specify this only if server requires captcha.'
                text_mail:
                  type: string
                  description: 'The user''s email. This is a required value.'
                url_reset:
                  type: string
                  description: 'The URL for the password reset page. This link will be used in a password reset email. Specify this only if you want to send the user to a custom password reset page. If empty, the default URL page will be used.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  text_error:
                    type: string
                    description: 'The error code. This will be an empty string if the email has been sent successfully.'
      tags:
        - ChangePassword-ChangePasswordBegin
  '/Core/Geo/Region/Region.json':
    get:
      summary: 'Retrieves information about countries and regions.'
      parameters:
        - name: id_locale
          in: query
          description: 'The locale ID to find regions for. One of the {@link LocaleSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_locale_all
          in: query
          description: 'Determines whether to get regions for all locales. If `true`, this will get regions for all locales. Otherwise, this will be `false`.'
          schema:
            type: boolean
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_region:
                    type: array[]
                    description: 'A list of regions grouped by their country. <dl> <dt> string[] <var>a_region</var> </dt> <dd> A list of regions in the country. Every element has the next keys: <dl> <dt> string <var>k_geo</var> </dt> <dd> The region key. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the region. </dd> </dl> </dd> <dt> string <var>k_geo_country</var> </dt> <dd> The country key. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the country. </dd> </dl>'
      tags:
        - Region-Region
  '/Core/Drive/ImageUpload/ImageUpload.json':
    get:
      summary: 'Returns information about the image.'
      parameters:
        - name: a_config
          in: query
          description: 'Allows to give custom parameters which can be required for different types of images.'
          schema:
            type: array
        - name: is_temporary
          in: query
          description: 'If `true`, the temporary image will be retrieved. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_id
          in: query
          description: 'The image ID set in {@link \Core\Drive\ImageUpload\ImageUploadApi::$s_class}.'
          schema:
            type: string
        - name: s_class
          in: query
          description: 'The name of the class that manages this image.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_text_empty:
                    type: array|null
                    description: 'Information about the text for an empty image upload. See the PHP side for more information.'
                  html_image_hint:
                    type: string
                    description: 'An HTML string to use for the image recommendation.'
                  i_height_max:
                    type: int|null
                    description: 'The maximum height of image.'
                  i_height_min:
                    type: int|null
                    description: 'The minimum height of image.'
                  i_thumbnail_height:
                    type: int|null
                    description: 'The height of the thumbnail image. This will be `null` until it''s loaded from the server.'
                  i_thumbnail_width:
                    type: int|null
                    description: 'The width of the thumbnail image. This will be `null` until it''s loaded from the server.'
                  i_width_max:
                    type: int|null
                    description: 'The maximum width of the image.'
                  i_width_min:
                    type: int|null
                    description: 'The minimum width of the image.'
                  is_circular:
                    type: bool|null
                    description: 'If `true`, the image is treated as circular. Otherwise, this will be `false`.'
                  is_delete_allow:
                    type: bool|null
                    description: 'If `true`, image deletion is permitted. Otherwise, this will be `false`. This will be `null` until it''s loaded from the server.'
                  s_code:
                    type: string|null
                    description: 'The link protection code.'
                  s_link:
                    type: string|null
                    description: 'The image link.'
                  url_empty:
                    type: string|null
                    description: 'The image URL that should be displayed in cases where no image is uploaded. This will be `null` until it''s loaded from the server.'
                  url_thumbnail:
                    type: string|null
                    description: 'The thumbnail URL of the image. This will be `null` until it''s loaded from the server.'
                  url_upload:
                    type: string|null
                    description: 'The script URL where new image should be uploaded from.'
                  url_view:
                    type: string|null
                    description: 'The URL of the full image.'
      tags:
        - ImageUpload-ImageUpload
    post:
      summary: 'Loads image information for a list of IDs. The POST method is used instead of the GET method because the maximum permitted URI length is restricted.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_config:
                  type: array
                  description: 'Allows to give custom parameters which can be required for different types of images.'
                s_class:
                  type: string
                  description: 'The name of the class that manages this image.'
                text_id:
                  type: string|null
                  description: 'A list of image IDs set in {@link \Core\Drive\ImageUpload\ImageUploadApi::$s_class}, serialised using JSON. This will be `null` if there''s no data being sent by the client.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_image:
                    type: array[]
                    description: 'Image information for every ID. Every element contains values such as the {@link \Core\Drive\ImageUpload\ImageUploadApi::_get()} result.'
      tags:
        - ImageUpload-ImageUpload
    put:
      summary: 'Updates the image.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_config:
                  type: array
                  description: 'Allows to give custom parameters which can be required for different types of images.'
                is_temporary:
                  type: boolean
                  description: 'If `true`, the temporary image will be retrieved. Otherwise, this will be `false`.'
                k_id:
                  type: string
                  description: 'The image ID set in {@link \Core\Drive\ImageUpload\ImageUploadApi::$s_class}.'
                s_class:
                  type: string
                  description: 'The name of the class that manages this image.'
                s_command:
                  type: string
                  description: 'The action that must be performed to the image.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_text_empty:
                    type: array|null
                    description: 'Information about the text for an empty image upload. See the PHP side for more information.'
                  html_image_hint:
                    type: string
                    description: 'An HTML string to use for the image recommendation.'
                  i_height_max:
                    type: int|null
                    description: 'The maximum height of image.'
                  i_height_min:
                    type: int|null
                    description: 'The minimum height of image.'
                  i_thumbnail_height:
                    type: int|null
                    description: 'The height of the thumbnail image. This will be `null` until it''s loaded from the server.'
                  i_thumbnail_width:
                    type: int|null
                    description: 'The width of the thumbnail image. This will be `null` until it''s loaded from the server.'
                  i_width_max:
                    type: int|null
                    description: 'The maximum width of the image.'
                  i_width_min:
                    type: int|null
                    description: 'The minimum width of the image.'
                  is_circular:
                    type: bool|null
                    description: 'If `true`, the image is treated as circular. Otherwise, this will be `false`.'
                  is_delete_allow:
                    type: bool|null
                    description: 'If `true`, image deletion is permitted. Otherwise, this will be `false`. This will be `null` until it''s loaded from the server.'
                  s_code:
                    type: string|null
                    description: 'The link protection code.'
                  s_link:
                    type: string|null
                    description: 'The image link.'
                  url_empty:
                    type: string|null
                    description: 'The image URL that should be displayed in cases where no image is uploaded. This will be `null` until it''s loaded from the server.'
                  url_thumbnail:
                    type: string|null
                    description: 'The thumbnail URL of the image. This will be `null` until it''s loaded from the server.'
                  url_upload:
                    type: string|null
                    description: 'The script URL where new image should be uploaded from.'
                  url_view:
                    type: string|null
                    description: 'The URL of the full image.'
      tags:
        - ImageUpload-ImageUpload
  '/Core/Drive/ImageUpload/ImageUploadTemporary.json':
    post:
      summary: 'Saves new uploaded image.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                f_image:
                  type: \wellnessliving\wlfile
                  description: 'The image to be uploaded.'
                k_id:
                  type: string
                  description: 'The key of the image within {@link ImageUploadTemporaryApi::$s_class}. For example, for a user''s photo, specify the user''s key here.'
                s_class:
                  type: string
                  description: 'The name of the class that manages this image. For example, for a user''s photo, specify the string `PassportLoginImage` here.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_crop:
                    type: boolean
                    description: 'If `true`, a crop is used. Otherwise, this will be `false` if a crop isn''t used (the image is saved in its original size).'
                  i_height:
                    type: number
                    format: int32
                    description: 'The actual height of the thumbnail image.'
                  i_height_src:
                    type: number
                    format: int32
                    description: 'The height of the original image.'
                  i_rotate:
                    type: number
                    format: int32
                    description: 'The angle of the image rotation compared to the original.'
                  i_width:
                    type: number
                    format: int32
                    description: 'The actual width of the thumbnail image.'
                  i_width_src:
                    type: number
                    format: int32
                    description: 'The width of the original image.'
                  id_type_src:
                    type: number
                    format: int32
                    description: 'The image type ID. One of the {@link \Core\Drive\DriveTypeSid} constants.'
                  is_resize:
                    type: boolean
                    description: 'If `true`, the thumbnail is a resized variant of the original image.'
                  url_thumbnail:
                    type: string
                    description: 'The URL to the resized and rotated image in file storage.'
                  url_view:
                    type: string
                    description: 'The URL to the original image in file storage.'
      tags:
        - ImageUpload-ImageUploadTemporary
  '/Social/Facebook/Login/Login.json':
    post:
      summary: 'Authorizes user with facebook.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                s_application:
                  type: string|null
                  description: 'The application ID. This will be `null` if the application is being used to make the request. Use the application credential from the {@link FacebookCredential} class for user authorization.'
                s_token:
                  type: string
                  description: 'The Facebook token.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-Login
  '/Social/Apple/Login/AppleLogin.json':
    delete:
      summary: 'Removes the association between a website client and the Apple account. Invalidates the tokens and associated client authorizations.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_application:
                  type: string
                  description: 'The application ID.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-AppleLogin
    post:
      summary: 'Signs user in with Apple.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_application:
                  type: string
                  description: 'The application ID.'
                text_authorization:
                  type: string
                  description: 'The authorization code.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-AppleLogin
  '/Social/Google/Plus/Login.json':
    post:
      summary: 'Authorizes user with Google.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                s_application:
                  type: string|null
                  description: 'The application ID. This will be `null` for application use, which makes the request. Use the application credential from {@link GoogleCredential} for user authorization.'
                s_code:
                  type: string
                  description: 'The Google server authorization code.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Plus-Login
  '/Wl/Pay/Method/List.json':
    get:
      summary: 'Returns list of active payment methods data.'
      parameters:
        - name: is_active
          in: query
          description: 'Whether only active payment methods should be returned.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: show_manual
          in: query
          description: 'Whether payment method {@link \RsPayMethodSid::ACCOUNT_MANUAL} should be included in response.'
          schema:
            type: boolean
        - name: uid
          in: query
          description: 'The key of a user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_pay_method:
                    type: array[]
                    description: 'A list of payment methods: <dl> <dt> int <var>id_pay_method</var> </dt> <dd> The payment method type ID. One of {@link \RsPayMethodSid} constants. </dd> <dt> string|null <var>k_pay_method</var> </dt> <dd> Payment method key. Primary key int the {@link \Wl\Pay\Method\MethodSql} table. May be <tt>null</tt> if it is a system payment method. </dd> <dt> string <var>s_title</var> </dt> <dd> The payment method name. </dd> </dl>'
      tags:
        - Method-List
  '/Wl/Pay/Account/Account.json':
    get:
      summary: 'Retrieves information about accounts of given user in given business.'
      parameters:
        - name: is_owner
          in: query
          description: 'If `true`, information for the account''s owner is returned. Clients can be configured to pay for a relative''s expenses. For example, a parent can pay for their child. Otherwise, `false` to indicate information strictly for the specified user is returned.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_account:
                    type: array
                    description: 'A list of the user''s accounts. Keys are account keys. This could be `0` if the user has no accounts in the currency of the given business. Values are account data: <dl> <dt> int <var>id_currency</var> </dt> <dd> Currency ID. One of {@link CurrencySid} constant. </dd> <dt> string <var>k_currency</var> </dt> <dd> Key of account currency. Primary key in {@link \RsCurrencySql} table. </dd> <dt> string|null <var>k_pay_account</var> </dt> <dd> ID of payment account. Primary key in {@link \RsPayAccountSql} table. <tt>null</tt> if this is a user account based on system payment method. </dd> <dt> string|null <var>k_pay_method</var> </dt> <dd> ID of custom payment method. <tt>null</tt> if this is a user account based on system payment method. Primary key in {@link \Wl\Pay\Method\MethodSql}. </dd> <dt> string <var>m_rest</var> </dt> <dd> Account balance. </dd> <dt> string|null <var>s_method</var> </dt> <dd> Name of a custom payment method. <tt>null</tt> if this is a user account based on system payment method. </dd> </dl>'
                  a_account_nx:
                    type: array[]
                    description: 'A list of accounts that is not created for this user yet.'
                  is_debtor:
                    type: boolean
                    description: 'Determines whether the user is a debtor. If `true` - the owner of this account is a debtor. If `false` - the user is not a debtor or the information is not returned for the account owner ({@link AccountApi::$is_owner} is `false`).'
      tags:
        - Account-Account
  '/Wl/Pay/Form/Environment.json':
    get:
      summary: 'Returns information about payment environment.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to retrieve payment information for. This will be `0` if not set yet. An empty string or `null` if payments are performed with the WellnessLiving system merchant.'
          schema:
            type: string
        - name: k_currency
          in: query
          description: 'The key of the currency to retrieve payment information for.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location to retrieve payment information for. This will be `0` if not set yet.'
          schema:
            type: string
        - name: uid_owner
          in: query
          description: 'The user ID to retrieve payment information for. Primary key in the {@link \PassportLoginSql} table. `null` if not defined.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_card_system:
                    type: array
                    description: 'A list of supported bank card systems. Keys refer to card types based on card numbers (see {@link \ACardSystemSid}), and values are IDs of card systems (one of {@link \ACardSystemSid} constants).'
                  a_method_staff:
                    type: array
                    description: 'A list of payment methods enabled for staff members. The ID is one of {@link \RsPayMethodSid} constants. The value is always `true`.'
                  a_method_support:
                    type: array[]
                    description: 'A list of all payment methods that can be used within this business. This array is sorted in the order in which payment methods should be shown to the user. Each element of the array has the following structure: <dl> <dt>int <var>id_pay_method</var></dt> <dd>The ID of type of payment method. One of {@link \RsPayMethodSid} constants.</dd> <dt>bool [<var>is_client</var>]</dt> <dd>Determines whether this method is available for clients. This field is only returned for custom payment methods.</dd> <dt>string|null <var>k_pay_method</var></dt> <dd> The key of the custom payment method. This will be `null` if this payment method isn''t customized. Primary key in {@link \Wl\Pay\Method\MethodSql} table. </dd> <dt>string [<var>s_method</var>]</dt> <dd>The name of payment method. This field is only returned for custom payment methods.</dd> </dl>'
                  a_mobile_config:
                    type: array|null
                    description: 'The configuration array that''s sent to mobile card reader plugin. The structure of this array depends on the payment processor being used.'
                  a_pay_processor:
                    type: array[]|null
                    description: 'Represents information about payment processors. Keys are payment methods IDs, one of {@link \RsPayMethodSid} constants. Value is the following array: <dl> <dt>array|null <var>a_public_keys</var></dt> <dd> Public keys configured for this payment processor. Copy of result of {@link PayProcessorPublicKeysInterface::publicKeys()}. `null` if this payment processor does not support public keys. </dd> <dt>array|null <var>a_public_info</var></dt> <dd> Public info configured for this payment processor. Copy of result of {@link PayProcessorPublicInfoInterface::publicInfo()}. `null` if this payment processor does not support public info. </dd> <dt>bool <var>hide_save_source</var></dt> <dd>Whether `save payment method` option should be hidden. `true` if hidden, `false` - otherwise.</dd> <dt>int <var>id_pay_processor</var></dt> <dd>ID of the payment processor. One of {@link PayProcessorSid} constants.</dd> <dt>null|bool <var>is_enabled_3ds</var></dt> <dd>`true` if 3DS should be performed, `false` if 3DS should not be performed. `null` if this is not defined for payment processor. Only for {@link PayProcessorSid::NUVEI} </dd> <dt>bool|null <var>is_test</var></dt> <dd> `true` if the merchant is in a test mode, `false` otherwise. `null` if this is not defined for payment processor. </dd> <dt>string <var>k_business_merchant</var></dt> <dd>Key of the business merchant. Primary key in {@link \RsBusinessMerchantSql}.</dd> </dl> `null` if no processors are set up.'
                  dl_now:
                    type: string
                    description: 'Current local date in current location {@link EnvironmentApi::$k_location} or business {@link EnvironmentApi::$k_business} if not set location.'
                  f_surcharge:
                    type: string|null
                    description: 'Surcharge amount for payment with card represented as a percent of transaction amount. This will be `null` if the percentage surcharge amount shouldn''t be withdrawn.'
                  f_surcharge_ach:
                    type: string|null
                    description: 'Surcharge amount for payment with ACH represented as a percent of transaction amount. This will be `null` if the percentage surcharge amount shouldn''t be withdrawn.'
                  id_locale:
                    type: int|null
                    description: 'The locale ID of the business.'
                  is_save_source:
                    type: boolean
                    description: 'Determines whether newly added payment sources should be saved. This will be `true` if payment sources should be saved, `false` if otherwise.'
                  is_tip:
                    type: boolean
                    description: 'Whether tips are accepted.'
                  m_surcharge:
                    type: string|null
                    description: 'Surcharge amount for payment with card represented as a fixed amount. This will be `null` if the fixed surcharge amount shouldn''t be withdrawn.'
                  m_surcharge_ach:
                    type: string|null
                    description: 'Surcharge amount for payment with ACH represented as a fixed amount. This will be `null` if the fixed surcharge amount shouldn''t be withdrawn.'
      tags:
        - Form-Environment
  '/Wl/Pay/Form/EnvironmentUser.json':
    get:
      summary: 'Returns information about payment environment.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to retrieve payment information for. This will be `0` if not set yet. An empty string or `null` if payments are performed with the WellnessLiving system merchant.'
          schema:
            type: string
        - name: k_currency
          in: query
          description: 'The key of the currency to retrieve payment information for.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location to retrieve payment information for. This will be `0` if not set yet.'
          schema:
            type: string
        - name: uid_owner
          in: query
          description: 'The user ID to retrieve payment information for. Primary key in the {@link \PassportLoginSql} table. `null` if not defined.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_card_system:
                    type: array
                    description: 'A list of supported bank card systems. Keys refer to card types based on card numbers (see {@link \ACardSystemSid}), and values are IDs of card systems (one of {@link \ACardSystemSid} constants).'
                  a_method_staff:
                    type: array
                    description: 'A list of payment methods enabled for staff members. The ID is one of {@link \RsPayMethodSid} constants. The value is always `true`.'
                  a_method_support:
                    type: array[]
                    description: 'A list of all payment methods that can be used within this business. This array is sorted in the order in which payment methods should be shown to the user. Each element of the array has the following structure: <dl> <dt>int <var>id_pay_method</var></dt> <dd>The ID of type of payment method. One of {@link \RsPayMethodSid} constants.</dd> <dt>bool [<var>is_client</var>]</dt> <dd>Determines whether this method is available for clients. This field is only returned for custom payment methods.</dd> <dt>string|null <var>k_pay_method</var></dt> <dd> The key of the custom payment method. This will be `null` if this payment method isn''t customized. Primary key in {@link \Wl\Pay\Method\MethodSql} table. </dd> <dt>string [<var>s_method</var>]</dt> <dd>The name of payment method. This field is only returned for custom payment methods.</dd> </dl>'
                  a_mobile_config:
                    type: array|null
                    description: 'The configuration array that''s sent to mobile card reader plugin. The structure of this array depends on the payment processor being used.'
                  a_pay_processor:
                    type: array[]|null
                    description: 'Represents information about payment processors. Keys are payment methods IDs, one of {@link \RsPayMethodSid} constants. Value is the following array: <dl> <dt>array|null <var>a_public_keys</var></dt> <dd> Public keys configured for this payment processor. Copy of result of {@link PayProcessorPublicKeysInterface::publicKeys()}. `null` if this payment processor does not support public keys. </dd> <dt>array|null <var>a_public_info</var></dt> <dd> Public info configured for this payment processor. Copy of result of {@link PayProcessorPublicInfoInterface::publicInfo()}. `null` if this payment processor does not support public info. </dd> <dt>bool <var>hide_save_source</var></dt> <dd>Whether `save payment method` option should be hidden. `true` if hidden, `false` - otherwise.</dd> <dt>int <var>id_pay_processor</var></dt> <dd>ID of the payment processor. One of {@link PayProcessorSid} constants.</dd> <dt>null|bool <var>is_enabled_3ds</var></dt> <dd>`true` if 3DS should be performed, `false` if 3DS should not be performed. `null` if this is not defined for payment processor. Only for {@link PayProcessorSid::NUVEI} </dd> <dt>bool|null <var>is_test</var></dt> <dd> `true` if the merchant is in a test mode, `false` otherwise. `null` if this is not defined for payment processor. </dd> <dt>string <var>k_business_merchant</var></dt> <dd>Key of the business merchant. Primary key in {@link \RsBusinessMerchantSql}.</dd> </dl> `null` if no processors are set up.'
                  dl_now:
                    type: string
                    description: 'Current local date in current location {@link EnvironmentApi::$k_location} or business {@link EnvironmentApi::$k_business} if not set location.'
                  f_surcharge:
                    type: string|null
                    description: 'Surcharge amount for payment with card represented as a percent of transaction amount. This will be `null` if the percentage surcharge amount shouldn''t be withdrawn.'
                  f_surcharge_ach:
                    type: string|null
                    description: 'Surcharge amount for payment with ACH represented as a percent of transaction amount. This will be `null` if the percentage surcharge amount shouldn''t be withdrawn.'
                  id_locale:
                    type: int|null
                    description: 'The locale ID of the business.'
                  is_save_source:
                    type: boolean
                    description: 'Determines whether newly added payment sources should be saved. This will be `true` if payment sources should be saved, `false` if otherwise.'
                  is_tip:
                    type: boolean
                    description: 'Whether tips are accepted.'
                  m_surcharge:
                    type: string|null
                    description: 'Surcharge amount for payment with card represented as a fixed amount. This will be `null` if the fixed surcharge amount shouldn''t be withdrawn.'
                  m_surcharge_ach:
                    type: string|null
                    description: 'Surcharge amount for payment with ACH represented as a fixed amount. This will be `null` if the fixed surcharge amount shouldn''t be withdrawn.'
      tags:
        - Form-EnvironmentUser
  '/Wl/Pay/Address/Address.json':
    get:
      summary: 'Gets user''s payment addresses information.'
      parameters:
        - name: id_pay_owner
          in: query
          description: 'The ID of the payment owner type. One of {@link \RsPayOwnerSid} constants.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'Business key, where the payment is performed. <tt>null</tt> if pay owner is not user.'
          schema:
            type: string
        - name: k_id
          in: query
          description: 'The primary key of a payment owner. This could be the business of the user depending on a {@link \Wl\Pay\Address\AddressApi::$id_pay_owner} value.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_pay_address:
                    type: array
                    description: 'The payee''s address information.'
      tags:
        - Address-Address
  '/Wl/Pay/Address/Profile.json':
    get:
      summary: 'Returns default payment address data that is retrieved from user profile.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key number used internally by WellnessLiving.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user whose data should be retrieved.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_geo_country:
                    type: string|null
                    description: 'The country key. This will be `null` if not set yet.'
                  k_geo_region:
                    type: string|null
                    description: 'The region ID. This will be `null` if not set yet.'
                  s_city:
                    type: string|null
                    description: 'The name of the city in the address. This will be `null` if not set yet.'
                  s_name:
                    type: string|null
                    description: 'The client name as listed in their address. This will be `null` if not set yet.'
                  s_phone:
                    type: string|null
                    description: 'The client phone number. This will be `null` if not set yet.'
                  s_postal:
                    type: string|null
                    description: 'The client postal or zip code. This will be `null` if not set yet.'
                  s_street1:
                    type: string|null
                    description: 'The first line of the client address. This will be `null` if not set yet.'
                  s_street2:
                    type: string|null
                    description: 'The second line of the client address. This will be `null` if not set yet.'
      tags:
        - Address-Profile
  '/Wl/Pay/Owner/Owner.json':
    get:
      summary: 'Returns information about payment owner.'
      parameters:
        - name: k_business
          in: query
          description: 'Business key. Primary key in {@link \RsBusinessSql}. `null` if not passed.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'Key of a user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_pay_owner:
                    type: number
                    format: int32
                    description: 'The type of user for which transactions can be made (this property is optional). This is one of the {@link \RsPayOwnerSid} constants.'
                  is_pay_self_only:
                    type: boolean
                    description: 'Is client pay only for self. If parent pays for child this flag will be `false` for both.'
                  k_pay_owner:
                    type: string
                    description: 'The payment owner key. This is used for financial transactions.'
                  k_pay_owner_money:
                    type: string
                    description: 'Key of the money owner. Copy of result of {@link PayOwner::ownerMoney()}.'
      tags:
        - Owner-Owner
  '/Wl/Catalog/CatalogList/Element.json':
    get:
      summary: 'Retrieves an information about current sale item.'
      parameters:
        - name: a_discount_code
          in: query
          description: 'Information about the discount code: <dl> <dt>string <var>f_amount</var></dt> <dd>The fixed amount of the discount.</dd> <dt>float <var>f_percent</var></dt> <dd>The percentage amount of the discount.</dd> <dt>int <var>i_limit</var></dt> <dt>string <var>k_discount_code</var></dt> <dd>The discount code key.</dd> <dt>string <var>s_discount_code</var></dt> <dd>The discount code value.</dd> </dl>'
          schema:
            type: array
        - name: a_sale_id_group
          in: query
          description: 'The list of items grouped by sale categories on the store page. Keys refer to sale IDs from {@link \RsSaleSid}, and values refer to data to identify an item:<dl> <dt>int <var>id_sale</var></dt> <dd>The item category ID. One of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The primary key of item.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The product option or <tt>0</tt> for any other cases. Primary key in {@link \RsShopProductOptionSql} table.</dd> </dl>'
          schema:
            type: array[]
        - name: dl_client_prorate
          in: query
          description: 'The client prorate date. This will be `null` in cases where the client prorate date hasn''t passed.'
          schema:
            type: string|null
        - name: i_image_height
          in: query
          description: 'The image height in pixels. Specify this value if you need the image to be returned in a specific size. The returned image will have default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'The image width in pixels. Specify this value if you need the image to be returned in a specific size. The returned image will have default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: i_promotion_image_height
          in: query
          description: 'The promotion image height in pixels. Specify this value if you need the image to be returned in a specific size. The returned image will have default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: i_promotion_image_width
          in: query
          description: 'The promotion image width in pixels. Specify this value if you need the image to be returned in a specific size. The returned image will have default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: id_sale
          in: query
          description: 'The ID of item category. One of the {@link \RsSaleSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_backend
          in: query
          description: 'Determines whether the API is called in the backend mode.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_id
          in: query
          description: 'The item key.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
        - name: k_shop_product_option
          in: query
          description: 'The product option key. This will be `null` if not set yet.'
          schema:
            type: string|null
        - name: text_item
          in: query
          description: 'A list of goods to get information for. Every element must contain the next keys: <dl> <dt>int <var>id_sale</var></dt> <dd>The ID of the item category. One of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The item key.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The product option key. This will be <tt>0</tt> if the item isn''t a product.</dd> </dl> Note that this must be serialized via JSON. If this field is specified, don''t specify any of the following fields: * {@link ElementApi::$id_sale} * {@link ElementApi::$k_id} * {@link ElementApi::$k_shop_product_option} This will be `null` to get information for only one item.'
          schema:
            type: string|null
        - name: uid_customer
          in: query
          description: 'The UID of a customer (user) for whom the purchase is made. This is used in the backend to calculate discounts.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_age_restriction:
                    type: array
                    description: 'The age restriction configuration. Age restrictions for an item apply when they''re configured for a specific item and the API is requested from the backend or when age restriction are public. <dl> <dt>int|null <var>i_age_from</var></dt> <dd>The minimum age permitted for the event. This will be `null` if a minimum age isn''t set or available.</dd> <dt>int|null <var>i_age_to</var></dt> <dd>The maximum age permitted for the event. This will be `null` if a maximum age isn''t set or available.</dd> <dt>bool <var>is_age_public</var></dt> <dd>If `true`, age restrictions are public and available. Otherwise, this will be `false` if they''re hidden. When restrictions are hidden and the current user isn''t a staff member, the age range will be empty.</dd> </dl>'
                  a_data:
                    type: array
                    description: 'Additional information specific for the item. The structure may be different depending on the item category. <dl> <dt> bool <var>is_renew_public</var> </dt> <dd> This applies only for promotions. <tt>true</tt> - clients can set promotion auto-renew.<br> <tt>false</tt> - clients can''t set promotion auto-renew. </dd> <dt> array[] <var>a_component</var> </dt> <dd> This applies only for coupons. Coupon components information. Each element will contain the following keys: <dl> <dt>int <var>id_program</var></dt> <dd>Program ID. One of {@link \RsProgramSid} ID''s. Only applies to promotions.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>Purchase item ID. One of {@link \RsPurchaseItemSid} ID''s.</dd> <dt>int <var>id_sale</var></dt> <dd>Sale ID. One of {@link \RsSaleSid} ID''s.</dd> <dt>int <var>k_id</var></dt> <dd>The identifier of the item.</dd> <dt>string <var>text_title</var></dt> <dd>The title of the item.</dd> </dl> </dd> </dl> Consider the following examples: * For a product, this contains inventory information. * For a gift card, this contains possible amounts. * For a session pass/membership/package, this contains information about start and stop dates.'
                  a_image:
                    type: array
                    description: 'Image information: <dl> <dt> int <var>i_height</var> </dt> <dd> The height in pixels. </dd> <dt> int <var>i_width</var> </dt> <dd> The width in pixels. </dd> <dt> bool <var>is_empty</var> </dt> <dd> <tt>true</tt> - the item has no image (in this case, ignore the other keys of this array).<br> <tt>false</tt> - the item has an image. </dd> <dt> string <var>s_url</var> </dt> <dd> The image URL. </dd> </dl> Use {@link ElementApi::$a_image_list} instead.'
                  a_image_list:
                    type: array[]
                    description: 'List of images. Keys are index and value is below information: <dl> <dt> int <var>i_height</var> </dt> <dd> The height in pixels. </dd> <dt> int <var>i_width</var> </dt> <dd> The width in pixels. </dd> <dt> bool <var>is_empty</var> </dt> <dd> `true` - item has no image (in this case ignore other keys of this array). `false` - item has an image. </dd> <dt> string <var>s_url</var> </dt> <dd> The image URL. </dd> </dl>'
                  a_installment_template:
                    type: array[]
                    description: 'A list of installment plans. Each element has the following next keys: <dl> <dt> int <var>i_count</var> </dt> <dd> The number of payments. </dd> <dt> int <var>id_duration</var> </dt> <dd> The duration of a single period. One of the {@link \ADurationSid} constants. </dd> <dt> int <var>i_period</var> </dt> <dd> The number of periods specified by <var>id_period</var> between individual payments. </dd> <dt> string <var>k_currency</var> </dt> <dd> The payment currency Key. </dd> <dt> string <var>k_pay_installment_template</var> </dt> <dd> The key of the installment plan template. Primary key in {@link \Wl\Pay\Installment\Template\Sql}. </dd> <dt> string <var>m_amount</var> </dt> <dd> The amount of the installment plan. </dd> <dt> string <var>s_duration</var> </dt> <dd> The title of the installment plan. </dd> </dl>'
                  a_item:
                    type: array[]
                    description: 'The list of information pertaining to the specified item. <dl> <dt>array <var>a_data</var></dt> <dd>Contains additional data for the sale item.</dd> <dt>array <var>a_image</var></dt> <dd>Contains information about one image connected to a sale item.</dd> <dt>array <var>a_tax</var></dt> <dd>Contains information about taxes. The structure of this array is described in {@link \RsTax::$a_tax}.</dd> <dt>string <var>id_purchase_option_view</var></dt> <dd>The Purchase Option view type. One of the {@link PurchaseOptionViewSid} constants.</dd> <dt>string <var>m_discount_code</var></dt> <dd>The discount code amount.</dd> <dt>string <var>m_discount_login</var></dt> <dd>The discount amount for the client type.</dd> <dt>string <var>s_comment</var></dt> <dd>Additional information about the sale item. For example, information about ''introductory offer''.</dd> <dt>string <var>s_price</var></dt> <dd>The price of the sale item in a human-readable format.</dd> <dt>string <var>s_sale</var></dt> <dd>The category title of the sale item.</dd> <dt>string <var>s_title</var></dt> <dd>The title of the sale item.</dd> </dl>'
                  a_tax:
                    type: array
                    description: 'A list of the item''s taxes. Keys refer tax keys, and values refer to the amount of tax.'
                  f_price:
                    type: string|null
                    description: 'The price of the sale item.'
                  f_price_include:
                    type: string|null
                    description: 'The price of the sale item, including tax.'
                  f_price_retail_product:
                    type: string
                    description: 'The retail price of the product. This will be empty if this isn''t a product.'
                  f_price_total_enrollment:
                    type: string
                    description: 'Full price of event. This will be empty if this isn''t an event.'
                  f_tax:
                    type: string|null
                    description: 'The tax amount.'
                  html_description:
                    type: string|null
                    description: 'The sale item description.'
                  html_special:
                    type: string|null
                    description: 'Special instructions for the sale item.'
                  id_purchase_item:
                    type: number
                    format: int32
                    description: 'The purchase item category ID. One of the {@link \RsPurchaseItemSid} constants.'
                  id_purchase_option_view:
                    type: number
                    format: int32
                    description: 'The ID of the item view category. One of the {@link PurchaseOptionViewSid} constants.'
                  id_sale:
                    type: number
                    format: int32
                    description: 'The ID of item category. One of the {@link \RsSaleSid} constants.'
                  is_contract:
                    type: boolean
                    description: 'If `true`, the item requires a contract. Otherwise, this will be `false`.'
                  k_id:
                    type: string
                    description: 'The item key.'
                  k_shop_product_option:
                    type: string|null
                    description: 'The product option key. This will be `null` if not set yet.'
                  m_discount_code:
                    type: string
                    description: 'The discount amount for a discount code.'
                  m_discount_login:
                    type: string
                    description: 'The discount amount for a user''s type.'
                  m_price:
                    type: string
                    description: 'The price on the price tag.'
                  m_price_include:
                    type: string
                    description: 'The price, including taxes.'
                  m_tax:
                    type: string
                    description: 'The tax amount.'
                  s_comment:
                    type: string
                    description: 'Additional comment(s). For example, information about ''introductory offer''.'
                  s_price:
                    type: string|null
                    description: 'The price of the sale item in a human-readable format.'
                  s_sale:
                    type: string|null
                    description: 'The category title of the sale item.'
                  s_title:
                    type: string|null
                    description: 'The sale item title.'
                  text_price:
                    type: string
                    description: 'The price on the price tag, with the currency sign.'
                  text_sale:
                    type: string
                    description: 'The title of the item category.'
                  text_title:
                    type: string
                    description: 'The item title.'
                  xml_description:
                    type: string|null
                    description: 'A detailed description.'
                  xml_special:
                    type: string|null
                    description: 'Special instructions.'
      tags:
        - CatalogList-Element
  '/Wl/Catalog/CatalogList/List.json':
    get:
      summary: 'Retrieves a list of all sale items.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of a location. If `0`, all products in the business are retrieved.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_product:
                    type: array
                    description: 'The list of all sale items.'
                  a_product_duplicate:
                    type: array
                    description: 'The list of products to show with duplicates. Products have their own order within every shop category, and they can be related to several categories. As a design decision, products are sorted in the backend using duplicates for every category.'
      tags:
        - CatalogList-List
  '/Wl/Catalog/CatalogList/CatalogProduct.json':
    get:
      summary: 'Gets store products by shop category.'
      parameters:
        - name: a_filter
          in: query
          description: 'Additional data to filter products.<dl> <dt>array [<var>a_quick_config</var>]</dt> <dd>Additional data for cases where the catalog list is in Quick Buy mode.</dd> <dt>array [<var>a_sale_id</var>]</dt> <dd>The list of special categories for the catalogue. Each value is a constant of {@link \RsSaleSid}.</dd> <dt>array [<var>a_shop_category</var>]</dt> <dd>Shop categories to filter by.</dd> <dt>int <var>i_last</var></dt> <dd>The last shown product.</dd> <dt>int <var>id_order</var></dt><dd>The sort order ID. One of the {@link SortOrderSid} constants.</dd> <dt>int <var>id_sort</var></dt> <dd>The sort options ID. One of the {@link ShopCategorySortSid} constants.</dd> <dt>string <var>k_business</var></dt> <dd>The business key.</dd> <dt>string [<var>k_location</var>]</dt> <dd>The location key.</dd> <dt>string [<var>s_title</var>]</dt> <dd>A title of a product to filter by.</dd> <dt>string [<var>uid</var>]</dt> <dd>The UID of a user.</dd> </dl>'
          schema:
            type: array
        - name: i_last
          in: query
          description: 'The currently shown element.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The business key to get products for.'
          schema:
            type: string
        - name: k_shop_category
          in: query
          description: 'The selected shop category. This will be `0` for the system''s Unassigned category or `null` if not set yet.'
          schema:
            type: string
        - name: s_cache_key
          in: query
          description: 'The cache key used to get products.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_category_sort:
                    type: array[]
                    description: 'Categories with sort settings. Keys refer to shop category keys. Values refer to sort settings. Contains the following structure:<dl> <dt>array <var>a_order</var></dt><dd>The order of the products by category if {@link ShopCategorySortSid::CUSTOM} is selected.</dd> <dt>int <var>id_order</var></dt><dd>The sort order. One of the {@link \Core\Sid\SortOrderSid} constants.</dd> <dt>int <var>id_sort</var></dt><dd>The sort order ID. One of the {@link SortOrderSid} constants.</dd> </dl>'
                  a_product:
                    type: array
                    description: 'The list of elements.'
                  i_last:
                    type: number
                    format: int32
                    description: 'The currently shown element.'
                  is_load_more:
                    type: boolean
                    description: 'Determines whether more products can be loaded.'
                  s_cache_key:
                    type: string
                    description: 'The cache key used to get products.'
      tags:
        - CatalogList-CatalogProduct
  '/Wl/Catalog/Cart/Cart.json':
    get:
      summary: 'Gets purchase cost data.'
      parameters:
        - name: a_item
          in: query
          description: 'The list of items in the cart. <dl> <dt>string <var>dl_client_prorate</var></dt> <dd>The client prorate date. This will be `null` in cases where the client prorate date hasn''t passed.</dd> <dt>int <var>i_quantity</var></dt> <dd>The quantity of sale items.</dd> <dt>int <var>id_sale</var></dt> <dd>The sale item type, one of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd> The sale item key. Note: For products, this will be the product key from {@link \RsShopProductSql}. You need to specify the product option key in the `k_shop_product_option` field or the first available option will be used automatically. </dd> <dt>?string [<var>k_login_prize</var>]</dt> <dd>Key of login prize used on item, primary key in {@link \RsLoginPrizeSql} table.</dd> <dt>string [<var>k_shop_product_option</var>]</dt> <dd> The shop product option key from {@link \RsShopProductOptionSql}. Note: Used for products only `id_sale` = {@link \RsSaleSid::PRODUCT}. If empty the first available option will be used automatically. </dd> </dl>'
          schema:
            type: array[]
        - name: is_auto_apply_prize
          in: query
          description: 'Whether selected login prize should be auto applied to first applicable item.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
        - name: k_login_prize
          in: query
          description: 'The login prize key.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code. If `null`, the discount code has been reset.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'The user key. This will be `0` for guests.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_discount_item:
                    type: string[]
                    description: 'The list of discounts for each item. Keys refer to unique item keys, and values refer to discount amounts for the item.'
                  a_item:
                    type: array[]
                    description: 'The list of items in the cart. <dl> <dt>string <var>dl_client_prorate</var></dt> <dd>The client prorate date. This will be `null` in cases where the client prorate date hasn''t passed.</dd> <dt>int <var>i_quantity</var></dt> <dd>The quantity of sale items.</dd> <dt>int <var>id_sale</var></dt> <dd>The sale item type, one of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd> The sale item key. Note: For products, this will be the product key from {@link \RsShopProductSql}. You need to specify the product option key in the `k_shop_product_option` field or the first available option will be used automatically. </dd> <dt>?string [<var>k_login_prize</var>]</dt> <dd>Key of login prize used on item, primary key in {@link \RsLoginPrizeSql} table.</dd> <dt>string [<var>k_shop_product_option</var>]</dt> <dd> The shop product option key from {@link \RsShopProductOptionSql}. Note: Used for products only `id_sale` = {@link \RsSaleSid::PRODUCT}. If empty the first available option will be used automatically. </dd> </dl>'
                  a_prize_propose:
                    type: array[]
                    description: 'List of prizes that can be redeemed and applied to items in the cart. <dl> <dt>int <var>i_score</var></dt> <dd>Amount of points needed to redeem the prize.</dd> <dt>string <var>k_reward_prize</var></dt> <dd>Reward prize key, primary key in {@link \RsRewardPrizeSql} table.</dd> <dt>string <var>text_discount</var></dt> <dd>Reward prize discount, e.g. ''$10.00 off'', ''10% off''.</dd> <dt>string <var>text_title</var></dt> <dd>Reward prize title, e.g. ''on any item'', ''on Water bottle'', ''on any Appointment Pass or Membership Purchase Option''.</dd> </dl>'
                  a_reward_item:
                    type: array[]
                    description: 'List of cart items to which the selected prize can be applied <dl> <dt>int <var>i_quantity</var></dt> <dd>The quantity of sale items.</dd> <dt>int <var>id_sale</var></dt> <dd>The sale item type, one of the {@link \RsSaleSid} constants.</dd> <dt>bool <var>is_login_prize_used</var></dt> <dd>Whether selected login prize discount applied to item.</dd> <dt>string <var>k_id</var></dt> <dd>The sale item key.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The shop product option. If <tt>null</tt>, the sale item has no options.</dd> </dl>'
                  a_reward_propose:
                    type: array[]
                    description: 'List of login prizes that can be applied to items in the cart. <dl> <dt>string <var>k_login_prize</var></dt> <dd>Login prize key, primary key in {@link \RsLoginPrizeSql} table.</dd> <dt>string <var>text_discount</var></dt> <dd>Reward prize discount, e.g. ''$10.00 off'', ''10% off''.</dd> <dt>string <var>text_discount_applied</var></dt> <dd>Applied login prize discount title, e.g. ''10% discount''.</dd> <dt>string <var>text_discount_purpose</var></dt> <dd>Purpose login prize discount title, e.g. ''Apply 10% off''.</dd> <dt>string <var>text_title</var></dt> <dd>Reward prize title, e.g. ''on any item'', ''on Water bottle'', ''on any Appointment Pass or Membership Purchase Option''.</dd> </dl>'
                  a_tax_list:
                    type: array
                    description: 'Values derived for individual tax rates. Keys refer to tax keys. Primary key in {@link \RsTaxSql}. And values refer to the amount of tax in the cart.'
                  i_score:
                    type: int|null
                    description: 'Amount of client''s reward points.'
                  m_discount:
                    type: string|null
                    description: 'The full discount of the cart. If `null`, the discount isn''t calculated yet.'
                  m_discount_total:
                    type: string
                    description: 'The total discount amount.'
                  m_subtotal:
                    type: string|null
                    description: 'The total amount in the catalog cart without tax. If `null`, the total amount isn''t set yet.'
                  m_tax:
                    type: string|null
                    description: 'The tax amount. If `null`, the tax amount isn''t set yet.'
                  m_tip_purchase:
                    type: string|null
                    description: 'The amount of appointment tips.'
                  m_total:
                    type: string|null
                    description: 'The total amount in the catalog cart. If `null`, the total amount isn''t set yet.'
      tags:
        - Cart-Cart
  '/Wl/Catalog/Cart/LimitQuantity.json':
    get:
      summary: 'Checks limit quantity and whether a promotion can be added to the cart.'
      parameters:
        - name: a_item
          in: query
          description: 'The cart items list with the next structure: <dl> <dt>int <var>i_quantity</var></dt> <dd>The quantity of sale items.</dd> <dt>int <var>id_sale</var></dt> <dd>The sale item type. One of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The sale item ID.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The shop product option. <tt>null</tt> if the sale item has no options.</dd> </dl>'
          schema:
            type: array[]
        - name: k_business
          in: query
          description: 'The business in which the purchase will be made.'
          schema:
            type: string
        - name: k_promotion
          in: query
          description: 'The promotion key to add to the cart.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  i_purchase_already:
                    type: int|null
                    description: 'The quantity if promotions have already been purchased by the current user. If `true`, the quantity exceeded. Otherwise, this will be `false`. This will be `null` if not set yet, there''s no limit quantity, or the limit quantity isn''t exceeded.'
                  i_purchase_current:
                    type: int|null
                    description: 'The current quantity of a promotion with the quantity limit in the cart. This will be `null` if not set yet, there''s no limit quantity, or the limit quantity isn''t exceeded.'
                  i_quantity_limit:
                    type: int|null
                    description: 'The quantity limit of the promotion. This will be `null` if not set yet or if there''s no limit quantity.'
                  is_limit_exceeded:
                    type: bool|null
                    description: 'Determines whether the limit quantity has been exceeded. If `true`, the limit quantity has been exceeded. Otherwise, this will be `false`. This will be `null` if not set yet.'
      tags:
        - Cart-LimitQuantity
  '/Wl/Catalog/Payment/Payment.json':
    post:
      summary: 'Allows to pay items for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_commission:
                  type: array
                  description: 'The staff commission earned for this purchase. If this isn''t empty, it has the next fields: <dl> <dt>string <var>k_staff</var></dt> <dd>The staff key. Primary key of {@link \RsStaffSql} table.</dd> <dt>string <var>k_staff_pay</var></dt> <dd>The payment schema key. Primary key of {@link \RsStaffSql} table.</dd> </dl>'
                a_item:
                  type: array[]
                  description: 'The list of items in the cart. This parameter is required. Every element must have the following keys: <dl> <dt> array [<var>a_config</var>] </dt> <dd> Additional configuration information. This may contain the next keys: <dl> <dt> array [<var>a_quick_gift</var>] </dt> <dd> A list of components to be added to the client. For quick gift cards only: <dl> <dt>int <var>i_count</var></dt> <dd>The quantity of elements.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The purchase type of the element. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd> The primary key of the element, depending on the element type. Pay attention that if you add a product into gift card, there must be specified not product key but product option key. Do not specify separate field `k_shop_product_option`. </dd></dl> </dd> <dt> array [<var>a_uid_share</var>] </dt> <dd> An array of UIDs representing the client''s relatives that share the Purchase Option. </dd> <dt> array [<var>a_wellness_program</var>] </dt> <dd> "Wellness Program" fields. <var>k_wellness_program</var> must be passed along with this array. See the description below. <dl> <dt>array <var>a_account</var></dt> <dd>See {@link EnrollmentFieldListApi::$a_account} for a full description.</dd> <dt>array <var>a_field</var></dt> <dd>See {@link EnrollmentFieldListApi::$a_field} for a full description.</dd> </dl> It''s recommended to validate the fields using the POST method of the {@link EnrollmentFieldListApi} model. </dd> <dt> string [<var>dt_prorate</var>] </dt> <dd> The prorate date, used only for memberships. </dd> <dt> string [<var>dt_send_local</var>] </dt> <dd> The date when the gift card will be sent. This is only used for gift cards. </dd> <dt> string [<var>dt_start</var>] </dt> <dd> The start date, used only for memberships. </dd> <dt> bool [<var>is_pay_when_start</var>] </dt> <dd> If `true`, the client won''t be charged for this item until its start date. Otherwise, this will be `false`. The Purchase Option must have a specified start date. </dd> <dt> bool [<var>is_prorate</var>] </dt> <dd> If this is set to `1`, this purchase will use the prorate rule. Otherwise, set this to `0`. This is only used for memberships. </dd> <dt> bool [<var>is_prorate_fix</var>] </dt> <dd> If this is set to `1`, the custom prorate amount will be used. Otherwise, set this to `0`. This is only used for memberships. </dd> <dt> bool [<var>is_prorate_only</var>] </dt> <dd> If this is set to `1`, this purchase is prorate only. Otherwise, set this to `0`. This is only used for memberships. </dd> <dt> bool [<var>is_renew</var>] </dt> <dd> If this is set to `1`, auto-renew will be enabled for the item. Otherwise, set this to `0`. This is only used for memberships. </dd> <dt> string [<var>k_appointment</var>] </dt> <dd> The appointment key, used only for appointment add-ons. </dd> <dt> string [<var>k_coupon_amount</var>] </dt> <dd> The key of the gift card amount, used only for gift cards. </dd> <dt> string [<var>k_staff</var>] </dt> <dt> string [<var>k_wellness_program</var>] </dt> <dd> The "Wellness Program" key. Set this for the insurance membership promotion. <var>a_wellness_program</var> array must be passed along with the key. See the array description above. <p>Use the following models to work with this type of promotion:</p> <ul> <li>{@link ProgramListApi} to obtain list of active programs.</li> <li>{@link EnrollmentFieldListApi} to get and validate fields for a given program.</li> </ul> </dd> <dd> The staff member key, used only for appointment tips. </dd> <dt> string [<var>m_prorate_custom</var>] </dt> <dd> The custom prorate price, used only memberships only. This is only used if <var>is_prorate_fix</var> is <tt>true</tt>. </dd> <dt> string [<var>s_code</var>] </dt> <dd> The gift card code. This is required for gift cards. </dd> <dt> string [<var>s_image</var>] </dt> <dd> The key of the image for the gift card. If empty, the business''s first gift card image will be used. Specify this only for gift cards. </dd> <dt> string [<var>s_mail</var>] </dt> <dd> The gift card receiver email. This is required for gift cards. </dd> <dt> string [<var>s_recipient</var>] </dt> <dd> The gift card receiver name. This is required for gift cards. </dd> <dt> string [<var>s_sender</var>] </dt> <dd> The gift card sender name. This is required for gift cards. </dd> <dt> string <var>[uid_to]</var> </dt> <dd> Specifies the recipient of a transfer Purchase Option. </dd> </dl> </dd> <dt> array[] [<var>a_tax_custom</var>] </dt> <dd> Customer taxes (optional). Every element must contain the following keys: <dl><dt>string <var>f_tax</var></dt><dd>The tax amount.</dd> <dt>string <var>k_tax</var></dt><dd>The tax key.</dd></dl> </dd> <dt> string [<var>html_contract</var>] </dt> <dd> The contract text. This is only required for items that require contract signing. </dd> <dt> int <var>i_quantity</var> </dt> <dd> The item quantity. </dd> <dt> int <var>id_sale</var> </dt> <dd> The item type ID. One of the {@link \RsSaleSid} constants. </dd> <dt> string <var>k_id</var> </dt> <dd> The item key. </dd> <dt> string [<var>k_login_prize</var>] </dt> <dd> The key of the login prize to apply a login prize discount. </dd> <dt> string [<var>k_shop_product_option</var>] </dt> <dd> The product option key, required only for products. </dd> <dt> string [<var>m_price_custom</var>] </dt> <dd> The custom price (optional). </dd> <dt> string <var>[s_signature]</var> </dt> <dd> The client signature, used for items that require a signed contract. </dd> </dl>'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                a_quiz_response:
                  type: array
                  description: 'The list of quiz response keys. Keys refer to quiz keys. Primary key from {@link \Core\Quiz\QuizSql} table. And values refer to responses. Primary key from {@link \Core\Quiz\Response\ResponseSql}. Or special values from the {@link QuizResponse::RESPONSE_SKIP} constant.'
                f_discount_percent:
                  type: number
                  format: float
                  description: 'The percentage discount (optional).'
                id_mode:
                  type: number
                  format: int32
                  description: 'The WellnessLiving mode type (required). One of the {@link ModeSid} constants.'
                is_guest:
                  type: boolean
                  description: 'Determines if the payment owner is an anonymous user (optional).'
                is_staff:
                  type: boolean
                  description: 'Specify this if operations are performed by the staff member (optional).'
                k_business:
                  type: string
                  description: 'The business key (required).'
                k_location:
                  type: string
                  description: 'The location key (required).'
                k_pay_installment_template:
                  type: string
                  description: 'The installment template key (optional). This will be `null` if the installment plan doesn''t exist or isn''t set for the purchased item.'
                k_visit:
                  type: string
                  description: 'The visit key to be paid (optional).'
                m_discount_flat:
                  type: string
                  description: 'The amount to discount (optional).'
                m_surcharge:
                  type: string
                  description: 'The manual surcharge amount. An empty string represents an automatic surcharge amount.'
                m_tip:
                  type: string
                  description: 'The tip amount (optional).'
                text_discount_code:
                  type: string
                  description: 'The discount code (optional).'
                text_receipt_note:
                  type: string
                  description: 'The custom receipt note.'
                uid:
                  type: string
                  description: 'The user''s key (required).'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_login_activity:
                    type: string|null
                    description: 'The key of login activity. This will be `null` if not set yet.'
                  k_purchase:
                    type: string
                    description: 'The purchase key created during payment.'
      tags:
        - Payment-Payment
  '/Wl/Classes/ClassList/BookList.json':
    get:
      summary: 'Gets a list of classes which take place in the specified location.'
      parameters:
        - name: i_image_height
          in: query
          description: 'The image height in pixels. Specify this value if you need the image to be returned in a specific size. If this value isn''t specified, the returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'The image width in pixels. Specify this value if you need the image to be returned in a specific size. If this value isn''t specified, the returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_class:
                    type: array[]
                    description: 'The class list. Every element has the following structure: <dl> <dt>array <var>a_class_tab</var></dt> <dd>The list of tab keys for the class.</dd> <dt>string <var>dtu_book_date</var></dt> <dd>The book date of an event in UTC date/time format. Can be empty string if user cannot book the event.</dd> <dt>bool <var>is_active</var></dt> <dd>This will be <tt>true</tt> if the class is active. Otherwise, this will be <tt>false</tt>.</dd> <dt>bool <var>is_event</var></dt> <dd>This will be <tt>true</tt> for events. Otherwise, this will be <tt>false</tt> for classes.</dd> <dt>sting <var>k_class</var></dt> <dd>The class key. The primary key in {@link \RsClassSql} table.</dd> <dt>sting <var>k_enrollment_block</var></dt> <dd>The enrollment block key. The primary key in {@link \RsEnrollmentBlockSql} table.</dd> <dt>string <var>m_price_total</var></dt> <dd>The total price for an event.</dd> <dt>sting <var>text_description</var></dt> <dd>The class description.</dd> <dt>sting <var>text_title</var></dt> <dd>The class name.</dd> </dl>'
      tags:
        - ClassList-BookList
  '/Wl/Classes/ClassView/Element.json':
    get:
      summary: ''
      parameters:
        - name: i_image_height
          in: query
          description: 'The image height in pixels. Specify this value if you need the image to be returned in a specific size. If this value isn''t specified, the returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'The image width in pixels. Specify this value if you need the image to be returned in a specific size. If this value isn''t specified, the returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class
          in: query
          description: 'The class key used to get information for a specific class. An empty value returns information for all classes of the business.'
          schema:
            type: string
        - name: show_cancelled
          in: query
          description: 'Defines if canceled schedules should be included in the result. If `true`, canceled schedules will be shown. Otherwise, this will be `false`.'
          schema:
            type: boolean
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_class_list:
                    type: array
                    description: 'Displays information about the class schedule(s). Each element has the next structure: <dl> <dt>array <var>a_schedule</var></dt> <dd>A list of class schedules. Each element has the next structure: <dl> <dt>array <var>a_repeat</var></dt> <dd>Schedule repeat options: <dl> <dt>int <var>i_repeat</var></dt> <dd>A count of the periods specified in <var>id_repeat</var>.</dd> <dt>int <var>id_repeat</var></dt> <dd>The measuring unit of <var>i_repeat</var>.</dd> </dl> </dd> <dt>string[] <var>a_staff_key</var></dt> <dd>A list of staff member keys that provide sessions for this schedule.</dd> <dt>string <var>dl_end</var></dt> <dd> The end date of the schedule in the location''s time zone. This will be empty or zero if the schedule is ongoing. </dd> <dt>string <var>dl_start</var></dt> <dd>The start date of the schedule in location''s time zone.</dd> <dt>int <var>i_day</var></dt> <dd>The day of the week, where the class schedule exists, starting with 1 for Monday and ending with 7 for Sunday.</dd> <dt>int <var>i_duration</var></dt> <dd>The duration of the schedule sessions in minutes.</dd> <dt>int <var>is_cancel</var></dt> <dd>Defines whether the schedule canceled or not.</dd> <dt>string <var>k_location</var></dt> <dd>The location key of the schedule.</dd> <dt>string <var>m_price</var></dt> <dd>The price of a single session of the schedule.</dd> <dt>string <var>text_time</var></dt> <dd>The time of the session in the following format: `[start_time] - [end_time]` in the locale''s time zone.</dd> </dl> </dd> <dt>array <var>a_config</var></dt> <dd>Class-specific business policies. This will be <tt>null</tt> in cases when the business policy is used.</dd> <dt>array <var>a_search_tag</var></dt> <dd>Tags for quick search.</dd> <dt>array <var>a_visits_required</var></dt> <dd>Information about visits that should be reviewed prior to visiting this class/event.</dd> <dt>bool|null <var>has_own_image</var></dt> <dd> This field will be `true` if the image used for the class is an image uploaded in the class setup. If an image isn''t uploaded in the class setup, but there''s at least one image in Setup->Locations image slider, this field will be `false`. This field will be `null` if the class image isn''t uploaded, and there are no images in location slider. In such cases, an empty image is used. </dd> <dt>string <var>html_description</var></dt> <dd>The browser-safe description.</dd> <dt>string <var>html_special_instruction</var></dt> <dd>Special instructions safe to be inserted to a browser.</dd> <dt>int <var>i_age_from</var></dt> <dd>The minimum age restriction.</dd> <dt>int <var>i_age_to</var></dt> <dd>The maximum age restriction.</dd> <dt>bool <var>is_age_public</var></dt> <dd>Determines whether age restriction exist and should be taken into account prior to booking this class/event.</dd> <dt>bool <var>is_bookable</var></dt> <dd>Determines whether clients can book the class or event online.</dd>w <dt>bool <var>is_online_private</var></dt> <dd> `true` - show classes only for clients who can book online. `false` - show classes for all clients. </dd> <dt>bool <var>is_promotion_client</var></dt> <dd>Determines whether clients of the business can see a list of applicable Purchase Options.</dd> <dt>bool <var>is_promotion_only</var></dt> <dd>Determines whether the item can be booked only using promotions.</dd> <dt>bool <var>is_promotion_staff</var></dt> <dd>Determines whether staff members of the business can see a list of applicable Purchase Options.</dd> <dt>bool <var>is_single_buy</var></dt> <dd> Determines whether the item can be paid with Drop In or not. If it can be paid with Drop In, then `m_price` shows the price for one visit. If this is `0`, it means the class is free. </dd> <dt>bool <var>is_virtual</var></dt> <dd>Determines whether the item is virtual.</dd> <dt>bool <var>is_event</var></dt> <dd> Determines whether the item is an event or class instance. If `true`, the item is an event instance. Otherwise, this will be `false`. </dd> <dt>string <var>k_class</var></dt> <dd>The class key.</dd> <dt>string<var>k_promotion_default</var></dt> <dd> Promotion key of the default promotion to use when paying for the class. `null` if no promotion is selected.</dd> <dt>string <var>m_price</var></dt> <dd>Drop In price, if the class allows payment for one visit.</dd> <dt>bool <var>show_special_instructions</var></dt> <dd> This will be `true` if special instructions can be public. Otherwise, this will be `false` if they should only be shown to the clients who booked the class. </dd> <dt>string <var>xml_description</var></dt> <dd>The item description.</dd> <dt>string <var>xml_special_instruction</var></dt> <dd>The item''s special instructions.</dd> <dt>string <var>url_image</var></dt> <dd>The URL link to the item image.</dd> </dl>'
      tags:
        - ClassView-Element
  '/Wl/Classes/Promotion/ClassPromotion.json':
    get:
      summary: 'Returns list of promotions that can be used to pay for the class / event.'
      parameters:
        - name: is_event
          in: query
          description: 'Determines whether the class is an event or not.'
          schema:
            type: boolean
        - name: is_login_type_ignore
          in: query
          description: '`true` - the login type or group restrictions are ignored and all pricing options will be returned. This will require staff or admin access level. `false` - the API should return only pricing options, which are available for the current user.'
          schema:
            type: boolean
        - name: is_related_only
          in: query
          description: '`true` - promotions should only be returned if they''re related to the given class or event. `false` - all promotions should be returned, even if they aren''t related to the given class or event.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class
          in: query
          description: 'The class key. This refers to the class or event with which you want to connect the promotions. This will be `null` or `0` if you need to return a list of promotions for an uncreated class or event.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion:
                    type: array[]
                    description: 'Promotion data with the following structure:<dl> <dt>string <var>k_promotion</var></dt> <dd>The promotion key. Primary key in {@link \RsPromotionSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>The title of the promotion.</dd> <dt>int <var>id_program</var></dt> <dd>One of the {@link \RsProgramSid} constants.</dd> <dt>bool <var>is_select</var></dt> <dd><tt>true</tt> if the promotion is related to the class or event, <tt>false</tt> otherwise.</dd> </dl>.'
                  k_promotion_default:
                    type: string|null
                    description: 'The default promotion key. This will be `null` if `k_class` wasn''t provided, or if the class has no default promotion.'
      tags:
        - Promotion-ClassPromotion
  '/Wl/Reward/Score/Score.json':
    get:
      summary: ''
      parameters:
        - name: a_login_activity
          in: query
          description: 'List of login activity keys for which points should be added or returned. Each value is primary key in {@link \RsLoginActivitySql}. NOTE: Login activity might belong to different users. It is possible for ex if booking performed for several users (usually family members) and required to retrieve sum of all scores for preformed activities.'
          schema:
            type: string[]
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  i_score:
                    type: number
                    format: int32
                    description: 'Depending on arguments specified during API request might be: * Total number of points which were earned for each activity in a list provided in {@link ScoreApi::$a_login_activity} in a case if it was provided. * Total number of points user currently own in a cast if {@link ScoreApi::$uid} specified.'
      tags:
        - Score-Score
    post:
      summary: 'Gives user reward points for sharing of certain activity into Facebook.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_login_activity:
                  type: string[]
                  description: 'List of login activity keys for which points should be added or returned. Each value is primary key in {@link \RsLoginActivitySql}. NOTE: Login activity might belong to different users. It is possible for ex if booking performed for several users (usually family members) and required to retrieve sum of all scores for preformed activities.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Score-Score
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business key within which score should be managed.'
                text_comment:
                  type: string
                  description: 'String to be added as a comment to manual reward points changes.'
                uid:
                  type: string
                  description: 'User key for which score should be managed.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  i_score:
                    type: number
                    format: int32
                    description: 'Depending on arguments specified during API request might be: * Total number of points which were earned for each activity in a list provided in {@link ScoreApi::$a_login_activity} in a case if it was provided. * Total number of points user currently own in a cast if {@link ScoreApi::$uid} specified.'
      tags:
        - Score-Score
  '/Wl/Schedule/ClassList/ClassList.json':
    get:
      summary: ''
      parameters:
        - name: a_location
          in: query
          description: 'The list of location keys to filter results. If it''s empty, schedule for all locations will be returned. All given locations should be from the same business, which is sent in {@link ClassListApi::$k_business}.'
          schema:
            type: string[]
        - name: dt_date
          in: query
          description: 'The list start date in UTC and in MySQL format.'
          schema:
            type: string
        - name: dt_end
          in: query
          description: 'The list end date in UTC and in MySQL format. <no-sdk> If left empty, the default duration is {@link ClassListApi::DEFAULT_PERIOD} days after {@link ClassListApi::$dt_date}. </no-sdk>'
          schema:
            type: string
        - name: is_response_short
          in: query
          description: '`true` means to not generate {@link ClassListApi::$a_session} result. Can be used, if you do not need full information about existing classes and result in {@link ClassListApi::$a_calendar} is enough.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: 'If `true`, sessions from every class tab are returned. If `false`, use the {@link ClassListApi::$k_class_tab} value.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class_tab
          in: query
          description: 'The category tab key. This will be `null` if not set yet. This will be ignored if {@link ClassListApi::$is_tab_all} is `true`.'
          schema:
            type: string
        - name: s_staff
          in: query
          description: 'The list of staff members to filter. A comma seperated list of staff keys. Primary keys in {@link \RsStaffSql} table.'
          schema:
            type: string
        - name: show_cancel
          in: query
          description: 'If `true`, canceled sessions will be returned. If `false`, canceled sessions won''t be returned.'
          schema:
            type: boolean
        - name: show_event
          in: query
          description: 'If `true`, events are also returned. If `false`, only classes are returned.'
          schema:
            type: boolean
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_calendar:
                    type: array[]
                    description: 'Keys are dates of the days inside requested date range, when there is at least one class in the business. If, locations are sent as a parameter, then at least one class in the given locations. Values are empty arrays for now. This is done to make possible to add some information about certain dates, if we need this.'
                  a_session:
                    type: array[]
                    description: 'A list of classes sessions starting with the date {@link ClassListApi::$dt_date} and in the 62 days ahead (or up to {@link ClassListApi::$dt_end}). Every element has the following keys: <dl> <dt> string[] <var>a_class_tab</var> </dt> <dd> Keys of class tab. Primary keys in {@link \Wl\Classes\Tab\Sql\ClassTab\Sql} table. </dd> <dt> string[] <var>a_staff</var> </dt> <dd> The list of staff keys for the staff member conducting the session. Primary keys in {@link \RsStaffSql} table. </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> The list of virtual locations keys. Each value is a location key. Primary keys in {@link \RsLocationSql} table. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time of the session start in UTC. </dd> <dt> string <var>dt_time</var> </dt> <dd> The time of the session start in the local time zone. </dd> <dt> string <var>dtl_date</var> </dt> <dd> The date/time of session start in the location''s time zone. </dd> <dt> bool <var>hide_application</var> </dt> <dd> Specifies whether the class will be hidden in the White Label Achieve Client App. If `true`, it means that the class won''t be displayed. Otherwise, this will be `false` to indicate that the class will be displayed. </dd> <dt> int <var>i_day</var> </dt> <dd> The day of the week when session is occurred. Constant from {@link \ADateWeekSid}. </dd> <dt> int <var>i_duration</var> </dt> <dd> The duration of the session in minutes. </dd> <dt> bool <var>is_cancel</var> </dt> <dd> If `true`, this class period was canceled. Otherwise, this will be `false`. </dd> <dt> bool <var>is_event</var> </dt> <dd> If `true`, this is an event. Otherwise, this will be `false`. </dd> <dt> bool <var>is_virtual</var> </dt> <dd> If `true`, this class is virtual. Otherwise, this will be `false`. </dd> <dt> string <var>k_class</var> </dt> <dd> The class key. Primary key in {@link \RsClassSql} table. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The class period key. Primary key in {@link \RsClassPeriodSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> The key of the session''s location. Primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>s_title</var> </dt> <dd> The title of the session. </dd> <dt> string <var>url_book</var> </dt> <dd> The direct link to start booking on the WellnessLiving website. </dd> </dl>'
                  is_timezone_different:
                    type: boolean
                    description: 'If `true`, the list of sessions contains sessions from different time zones. Otherwise, this will be `false`.'
                  is_virtual_service:
                    type: boolean
                    description: 'If `true`, there exists at least one virtual service by a specified {@link ClassListApi::$k_business} and {@link ClassListApi::$k_class_tab}, Otherwise, this will be `false`.'
      tags:
        - ClassList-ClassList
  '/Wl/Schedule/Page/PageElement.json':
    get:
      summary: 'Retrieves information about one element of schedule.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business to which the visit belongs.'
          schema:
            type: string
        - name: k_visit
          in: query
          description: 'Visit key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment_visit_info:
                    type: array
                    description: 'Additional visit information about this appointment. Empty array if it''s not an appointment. <dl> <dt> int <var>id_visit</var> </dt> <dd> Visit status. One of {@link VisitSid} constants. </dd> <dt> bool <var>is_confirmed</var> </dt> <dd> `true` means that appointment was requested and confirmed by the staff. </dd> <dt> bool <var>is_deny</var> </dt> <dd> `true` means that appointment was requested and denied by the staff. </dd> <dt> bool <var>is_notify_request_accept</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be confirmed by the staff. </dd> <dt> bool <var>is_notify_request_deny</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be denied by the staff. </dd> <dt> bool <var>is_request</var> </dt> <dd> `true` means that appointment was requested, but not confirmed by the staff. </dd> </dl>'
                  a_asset:
                    type: array[]
                    description: 'List of assets: <dl> <dt>string <var>s_name</var></dt> <dd>Asset title that consists of the asset title itself concatenated with its index (in case of multiple assets) by ''#''.</dd> <dt>string <var>i_count</var></dt> <dd>Number of sessions.</dd> </dl>.'
                  a_class_info:
                    type: array|null
                    description: 'Class data:<dl> <dt>int <var>i_book_active</var></dt> <dd>A total number of booked visits in the class, including all lists: active and waitlist.</dd> <dt>int <var>i_capacity</var></dt> <dd>Class capacity.</dd> <dt>int <var>i_wait</var></dt> <dd>A total number of booked visits in the waitlist.</dd> </dl> <tt>null</tt> if it isn''t class visit.'
                  a_staff:
                    type: array[]
                    description: 'A list of staff members involved in the visit. Each element is an array with the following elements: <dl> <dt> string <var>k_staff</var> </dt> <dd> The staff member key. Primary key in {@link \RsStaffSql} table. </dd> <dt> string <var>s_family</var> </dt> <dd> The surname of the staff member. </dd> <dt> string <var>s_name</var> </dt> <dd> The first name of the staff member. </dd> </dl>'
                  dt_cancel:
                    type: string
                    description: 'The latest date and time for when the visit can be canceled without penalty.'
                  dt_date_global:
                    type: string
                    description: 'The date and time of the visit in UTC.'
                  dt_date_local:
                    type: string
                    description: 'The date and time of the visit in the local time zone.'
                  dtl_location:
                    type: string
                    description: 'Session date/time in timezone of the location where it takes place.'
                  html_description:
                    type: string
                    description: 'The description of the service.'
                  html_special:
                    type: string
                    description: 'The special instructions for the service.'
                  i_capacity:
                    type: int|null
                    description: 'Capacity of the service. <tt>null</tt> indicates that the capacity is not set.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The scheduled duration of the visit. <tt>0</tt> means that session duration is hidden.'
                  i_wait_spot:
                    type: number
                    format: int32
                    description: 'Estimated place of reservation on the waiting list.'
                  id_note:
                    type: int|null
                    description: 'The note type ID. This will be set to `null` if notes aren''t allowed. This is one of the {@link \Wl\Visit\Note\Sid\NoteSid} constants. This will be `null` if notes aren''t allowed.'
                  id_virtual_provider:
                    type: int|null
                    description: 'The virtual provider ID. One of the {@link \Wl\Virtual\VirtualProviderSid} constants. This will be `null` for non-virtual services.'
                  id_visit:
                    type: number
                    format: int32
                    description: 'The visit type ID. One of the {@link VisitSid} constants. This will be `null` if not loaded yet.'
                  is_checkin:
                    type: boolean
                    description: 'If `true`, then this visit is ready to be checked in. If `false`, then this visit can''t be checked in.'
                  is_enable_client_cancel:
                    type: boolean
                    description: 'This will be `true` if clients can cancel the session. Otherwise, this will be `false`.'
                  is_event:
                    type: boolean
                    description: 'If `true`, then this visit is a part of a larger event. If `false`, then this visit is an individual session.'
                  is_in_progress:
                    type: boolean
                    description: '<tt>true</tt> - service is in progress; <tt>false</tt> - otherwise.'
                  is_virtual:
                    type: boolean
                    description: '<tt>true</tt> - service is virtual; <tt>false</tt> - otherwise.'
                  k_appointment:
                    type: string
                    description: 'The appointment key. This will be set only if the visit is an appointment. If the visit is a class or event, this will be `null`.'
                  k_class:
                    type: string|null
                    description: 'The class key. This will be set only if the visit is a class or an event. If the visit is an appointment, this will be `null`.'
                  k_class_period:
                    type: string
                    description: 'The class period key. This will be set only if the visit is a class or an event. If the visit is an appointment, this will be `null`.'
                  k_location:
                    type: string
                    description: 'The location key.'
                  k_resource:
                    type: string|null
                    description: 'Resource key.'
                  k_service:
                    type: string|null
                    description: 'Session key. Primary key in {@link \RsServiceSql} table.'
                  s_title:
                    type: string
                    description: 'The name of class or service.'
                  text_location:
                    type: string
                    description: 'Location title.'
                  text_room:
                    type: string
                    description: 'Room where session takes place.'
                  text_timezone:
                    type: string
                    description: 'Timezone abbreviation.'
                  uid:
                    type: string
                    description: 'The user key.'
                  url_image:
                    type: string
                    description: 'URL of the image representing the service or resource.'
                  url_virtual_join:
                    type: string
                    description: 'Url to wait page is the beginning of an online service.'
      tags:
        - Page-PageElement
  '/Wl/Schedule/Page/PageList.json':
    get:
      summary: 'Retrieves items of schedule for the client.'
      parameters:
        - name: dtu_end
          in: query
          description: 'If the date is set, a list of services before this date will be returned. The date and time is in UTC and in MySQL format. If left as `null`, then a list of services that aren''t limited to the end date will be returned.'
          schema:
            type: string|null
        - name: dtu_start
          in: query
          description: 'If the date is set, a list of services after this date will be returned. The date and time is in UTC and in MySQL format. If left as `null`, then a list of services that aren''t limited to the start date will be returned.'
          schema:
            type: string|null
        - name: is_past
          in: query
          description: 'If `true`, then all the client previous visits will be retrieved. If `false` or left as `null`, then all the client upcoming visits will be retrieved.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_visit:
                    type: array[]
                    description: 'Elements of user''s schedule. Every element has next keys: <dl> <dt>string <var>k_business</var></dt> <dd> Key of the business in which this visit was made. Primary key in {@link \RsBusinessSql} table. </dd> <dt> string <var>k_visit</var> </dt> <dd> Key of a book/visit. Primary key in {@link \RsVisitSql} table. </dd> </dl>'
      tags:
        - Page-PageList
  '/Wl/Schedule/ClassView/ClassView.json':
    get:
      summary: 'Retrieves information about class.'
      parameters:
        - name: a_session_request
          in: query
          description: 'A list of sessions to get information for. Every element has the following keys: <dl> <dt>string <var>dt_date</var></dt> <dd>The date/time of the session in UTC.</dd> <dt>string <var>k_class_period</var></dt> <dd>The session key. Primary key in {@link \RsClassPeriodSql} table.</dd> </dl> `null` if requesting a single session.'
          schema:
            type: array[]|null
        - name: dt_date
          in: query
          description: 'The date/time of the session.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Key of the business in which the action is performed. `null` if key of the business was not passed. Key of the business is required if {@link ClassViewApi} was passed.'
          schema:
            type: string|null
        - name: k_class_period
          in: query
          description: 'The class period key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_asset:
                    type: array[]|null
                    description: 'Asset list data.'
                  a_class:
                    type: array|null
                    description: 'Detailed information about the class. When loaded, it contains the following fields: <dl> <dt>array <var>a_image</var></dt> <dd>Information describing a class image.<dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>bool <var>is_empty</var></dt> <dd>This will be `true` if there''s no image and a default is used.</dd> <dt>bool|null <var>is_own</var></dt> <dd>This field will be `true` if the image used for the class is an image uploaded in class setup. If the image is not uploaded in the class setup, but there is at least one image in Setup->Locations image slider, this field will be `false`. `null` if class image is not uploaded, and there are no images in location slider, in this case empty image is used.</dd> <dt>string <var>s_url</var></dt> <dd>The URL link to the image.</dd> </dl></dd> <dt>int[] <var>a_tag</var></dt> <dd>A list of tags that can be used to describe the class in the catalog.</dd> <dt>bool <var>can_book</var></dt> <dd>Determines whether the current client can book this class.</dd> <dt>string <var>dt_date_global</var></dt> <dd>The session date/time in UTC.</dd> <dt>string <var>dt_date_local</var></dt> <dd>The start date in the local time zone.</dd> <dt>string <var>html_deny_reason</var></dt> <dd>The reason why the client can''t book this class. This will be set only if <var>can_book</var> is `false`.</dd> <dt>string <var>html_description</var></dt> <dd>The class description.</dd> <dt>string <var>html_special</var></dt> <dd>The special instructions.</dd> <dt>int|null <var>i_age_from</var></dt> <dd>The lower bound of age permitted in the class. This will be `null` there''s no age limit set.</dd> <dt>int|null <var>i_age_to</var></dt> <dd>The upper bound of age permitted in the class. This will be `null` there''s no age limit.</dd> <dt>int <var>i_book</var></dt> <dd>The count of booked visits.</dd> <dt>int <var>i_capacity</var></dt> <dd>The class capacity.</dd> <dt>int <var>i_duration</var></dt> <dd>The class duration in minutes.</dd> <dt> int <var>id_deny_reason</var> </dt> <dd> ID of deny reason. One of {@link \Wl\Schedule\ClassView\DenyReasonSid} constants. </dd> <dt>bool <var>is_book</var></dt> <dd>This will be `true` if the current class was booked by the current client.</dd> <dt>bool <var>is_cancel</var></dt> <dd>This will be `true` if the class period was canceled. Otherwise, this will be `false`.</dd> <dt>bool <var>is_promotion_only</var></dt> <dd>This will be `true` if this class can only be paid for using a Purchase Option. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait_list</var></dt> <dd>This will be `true` if user is only on the wait list. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait_list_enabled</var></dt> <dd>This will be `true` if the wait list is enabled for this class. Otherwise, this will be `false`.</dd> <dt>string <var>m_price</var></dt> <dd>The session price.</dd> <dt>bool <var>hide_price</var></dt> <dd>Hide individual price of the class session, if client has applicable pricing option.</dd> <dt>string <var>s_duration</var></dt> <dd>The class duration in a human readable format.</dd> <dt>string <var>s_title</var></dt> <dd>The class name.</dd> <dt>string <var>text_room</var></dt> <dd>The class room.</dd> </dl> This will be `null` if data isn''t loaded yet.'
                  a_location:
                    type: array|null
                    description: 'Location data. This will be `null` if data isn''t loaded yet.'
                  a_session_result:
                    type: array[]
                    description: 'A list of sessions with information, received in a multiple session mode. Every element has the following keys: <dl> <dt>array <var>a_class</var></dt> <dd>Class information.</dd> <dt>array <var>a_location</var></dt> <dd>Location information.</dd> <dt>array <var>a_staff</var></dt> <dd>Staff member information.</dd> <dt>array <var>dt_date</var></dt> <dd>The session date/time in UTC.</dd> <dt>array <var>k_class_period</var></dt> <dd>The session key.</dd> </dl>'
                  a_staff:
                    type: array[]|null
                    description: 'Staff member list data. This will be `null` if data isn''t loaded yet.'
                  a_visits_required:
                    type: array[]
                    description: 'A list of classes and events that clients should visit before this one. <dl> <dt>int <var>i_count</var></dt> <dd>The number of visits.</dd> <dt>bool <var>is_event</var></dt> <dd>This will be `true` if this is an event. Otherwise, this will be `false` if this is a class.</dd> <dt>string <var>k_class</var></dt> <dd>The key of the class or event.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the class or event.</dd> </dl>'
      tags:
        - ClassView-ClassView
    post:
      summary: 'Retrieves information about classes.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_session_request:
                  type: array[]|null
                  description: 'A list of sessions to get information for. Every element has the following keys: <dl> <dt>string <var>dt_date</var></dt> <dd>The date/time of the session in UTC.</dd> <dt>string <var>k_class_period</var></dt> <dd>The session key. Primary key in {@link \RsClassPeriodSql} table.</dd> </dl> `null` if requesting a single session.'
                dt_date:
                  type: string
                  description: 'The date/time of the session.'
                k_business:
                  type: string|null
                  description: 'Key of the business in which the action is performed. `null` if key of the business was not passed. Key of the business is required if {@link ClassViewApi} was passed.'
                k_class_period:
                  type: string
                  description: 'The class period key.'
                s_session_request:
                  type: string
                  description: 'A list of sessions to get information for. A serialized array. See {@link ClassViewApi::$a_session_request} for the array structure. Serialization and sending by POST is necessary to send big lists.'
                uid:
                  type: string
                  description: 'The user key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_asset:
                    type: array[]|null
                    description: 'Asset list data.'
                  a_class:
                    type: array|null
                    description: 'Detailed information about the class. When loaded, it contains the following fields: <dl> <dt>array <var>a_image</var></dt> <dd>Information describing a class image.<dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>bool <var>is_empty</var></dt> <dd>This will be `true` if there''s no image and a default is used.</dd> <dt>bool|null <var>is_own</var></dt> <dd>This field will be `true` if the image used for the class is an image uploaded in class setup. If the image is not uploaded in the class setup, but there is at least one image in Setup->Locations image slider, this field will be `false`. `null` if class image is not uploaded, and there are no images in location slider, in this case empty image is used.</dd> <dt>string <var>s_url</var></dt> <dd>The URL link to the image.</dd> </dl></dd> <dt>int[] <var>a_tag</var></dt> <dd>A list of tags that can be used to describe the class in the catalog.</dd> <dt>bool <var>can_book</var></dt> <dd>Determines whether the current client can book this class.</dd> <dt>string <var>dt_date_global</var></dt> <dd>The session date/time in UTC.</dd> <dt>string <var>dt_date_local</var></dt> <dd>The start date in the local time zone.</dd> <dt>string <var>html_deny_reason</var></dt> <dd>The reason why the client can''t book this class. This will be set only if <var>can_book</var> is `false`.</dd> <dt>string <var>html_description</var></dt> <dd>The class description.</dd> <dt>string <var>html_special</var></dt> <dd>The special instructions.</dd> <dt>int|null <var>i_age_from</var></dt> <dd>The lower bound of age permitted in the class. This will be `null` there''s no age limit set.</dd> <dt>int|null <var>i_age_to</var></dt> <dd>The upper bound of age permitted in the class. This will be `null` there''s no age limit.</dd> <dt>int <var>i_book</var></dt> <dd>The count of booked visits.</dd> <dt>int <var>i_capacity</var></dt> <dd>The class capacity.</dd> <dt>int <var>i_duration</var></dt> <dd>The class duration in minutes.</dd> <dt> int <var>id_deny_reason</var> </dt> <dd> ID of deny reason. One of {@link \Wl\Schedule\ClassView\DenyReasonSid} constants. </dd> <dt>bool <var>is_book</var></dt> <dd>This will be `true` if the current class was booked by the current client.</dd> <dt>bool <var>is_cancel</var></dt> <dd>This will be `true` if the class period was canceled. Otherwise, this will be `false`.</dd> <dt>bool <var>is_promotion_only</var></dt> <dd>This will be `true` if this class can only be paid for using a Purchase Option. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait_list</var></dt> <dd>This will be `true` if user is only on the wait list. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait_list_enabled</var></dt> <dd>This will be `true` if the wait list is enabled for this class. Otherwise, this will be `false`.</dd> <dt>string <var>m_price</var></dt> <dd>The session price.</dd> <dt>bool <var>hide_price</var></dt> <dd>Hide individual price of the class session, if client has applicable pricing option.</dd> <dt>string <var>s_duration</var></dt> <dd>The class duration in a human readable format.</dd> <dt>string <var>s_title</var></dt> <dd>The class name.</dd> <dt>string <var>text_room</var></dt> <dd>The class room.</dd> </dl> This will be `null` if data isn''t loaded yet.'
                  a_location:
                    type: array|null
                    description: 'Location data. This will be `null` if data isn''t loaded yet.'
                  a_session_result:
                    type: array[]
                    description: 'A list of sessions with information, received in a multiple session mode. Every element has the following keys: <dl> <dt>array <var>a_class</var></dt> <dd>Class information.</dd> <dt>array <var>a_location</var></dt> <dd>Location information.</dd> <dt>array <var>a_staff</var></dt> <dd>Staff member information.</dd> <dt>array <var>dt_date</var></dt> <dd>The session date/time in UTC.</dd> <dt>array <var>k_class_period</var></dt> <dd>The session key.</dd> </dl>'
                  a_staff:
                    type: array[]|null
                    description: 'Staff member list data. This will be `null` if data isn''t loaded yet.'
      tags:
        - ClassView-ClassView
  '/Wl/Schedule/Tab/Tab.json':
    get:
      summary: 'Gets information about tabs for page "Book now".'
      parameters:
        - name: is_widget
          in: query
          description: 'Whether we are inside the widget or not.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the current business.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the current location.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the current user. This isn''t used on the back end as the back end uses the current user to build a list of tabs. Therefore, the model must depend on the current user ID. If changed to a relative (the current user is changed, but the application isn''t restarted), information about the booking tabs for this user''s relative will be requested. This will be `null` if not set yet.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_tab:
                    type: array[]
                    description: 'An array containing information about tabs to present to the user. Each array index corresponds to a tab. Each array element is an array that contains the following fields: <dl> <dt> int <var>id_class_tab_object</var> </dt> <dd> The tab type ID which is one of the {@link \Wl\Classes\Tab\TabSid} constants. </dd> <dt> int|null <var>id_class_tab_system</var> </dt> <dd> If this tab has redefined a default system Class Tab then it references a constant defined in {@link \Wl\Classes\Tab\TabSid}. Otherwise, this will be `null`. </dd> <dt> string|null <var>k_class_tab</var> </dt> <dd> The class tab key. This will be `null` if it''s a system tab. </dd> <dt> string <var>k_id</var> </dt> <dd> A unique identifier in the list. </dd> <dt> string <var>s_title</var> </dt> <dd> The tab title. </dd> </dl>'
      tags:
        - Tab-Tab
  '/Wl/Shop/Category/Category.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to get shop categories for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_shop_category:
                    type: array
                    description: 'An array containing information about all store categories. Each array element is an array containing the following fields: <dl> <dt> bool <var>is_default</var> </dt> <dd> Whether category is selected as default. </dd> <dt> int <var>i_order</var> </dt> <dd> The display order for the category. </dd> <dt> string <var>k_shop_category</var> </dt> <dd> The shop category key. Primary key in {@link \RsShopCategorySql} table. </dd> <dt> string <var>text_description</var> </dt> <dd> The category description. </dd> <dt> string <var>text_title</var> </dt> <dd> The category name. </dd> </dl>'
      tags:
        - Category-Category
    post:
      summary: 'Creates new shop category.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The key of the business to get shop categories for.'
                text_title:
                  type: string
                  description: 'Title of new category.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_shop_category:
                    type: string
                    description: 'Key of the created shop category.'
      tags:
        - Category-Category
  '/Wl/Profile/Alert/Alert.json':
    get:
      summary: 'Retrieves a list of notices to show in user''s profile.'
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_alert:
                    type: array[]
                    description: 'A list of alerts. Every element is an array with the following keys: <dl> <dt> string|null <var>dt_date</var> </dt> <dd> The date and time in MySQL format in local time when the alert was last modified. This will be `null` if the date isn''t available for this alert. </dd> <dt> bool <var>is_today</var> </dt> <dd> This will be `true` if the alert was added today. Otherwise, this will be `false`. </dd> <dt> int <var>id_profile_note</var> </dt> <dd> ID of alert type. One of {@link \RsProfileNoteSid} constants. </dd> <dt> string [<var>k_pay_account</var>] </dt> <dd> The key of the client''s account. Primary key in {@link \RsPayAccountSql} table. </dd> <dt> string [<var>k_purchase_item</var>] </dt> <dd> The key of the purchase item. Primary key in {@link \RsPurchaseItemSql} table. </dd> <dt> string <var>s_text</var> </dt> <dd> The alert''s text. </dd> </dl>'
                  a_warning:
                    type: array[]
                    description: 'A list of warnings. Every element is an array with the following keys: <dl> <dt> string[] <var>a_location_flag</var> </dt> <dd> The list of locations keys from {@link \RsLocationSql} table, where this note is flagged. </dd> <dt> bool <var>dt_create</var> </dt> <dd> The date and time in MySQL format in local time when the warning was created. </dd> <dt> bool <var>dt_date</var> </dt> <dd> The date and time in MySQL format in local time when the warning was last modified. </dd> <dt> bool <var>is_book_restricted</var> </dt> <dd> `true` means that client is restricted to make bookings, `false` - otherwise. </dd> <dt> bool <var>is_flag</var> </dt> <dd> This will be `true` if the client is flagged. Otherwise, this will be `false`. </dd> <dt> bool <var>is_purchase_restricted</var> </dt> <dd> `true` means that client is restricted to make purchases. Otherwise, this will be `false`. </dd> <dt> bool <var>is_today</var> </dt> <dd> This will be `true` if the warning was added today. Otherwise, this will be `false`. </dd> <dt> string <var>s_text</var> </dt> <dd> The text of the warning. </dd> <dt> string <var>text_author</var> </dt> <dd> Staff name, who created a note. </dd> <dt> string <var>text_editor</var> </dt> <dd> Staff name, who edited a note last time. </dd> </dl>'
      tags:
        - Alert-Alert
  '/Wl/Profile/Alert/AlertEdit.json':
    delete:
      summary: 'Deletes existing note.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Key of current business. Primary key in {@link \RsBusinessSql} table.'
                k_login_note:
                  type: string
                  description: 'Login note key to edit or get info for. Primary key in {@link \RsLoginNoteSql} table. Empty if new entry is being added.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Alert-AlertEdit
    get:
      summary: 'Retrieves login note data.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of current business. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_login_note
          in: query
          description: 'Login note key to edit or get info for. Primary key in {@link \RsLoginNoteSql} table. Empty if new entry is being added.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'Key of a user to show information or post a note for. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_note_data:
                    type: array
                    description: 'Login note information, result of {@link \RsLoginNoteEditView::load()} method.'
      tags:
        - Alert-AlertEdit
    post:
      summary: 'Creates new text note or updates the existing one.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_location:
                  type: string[]
                  description: 'The list of location keys to flag client in.'
                id_login_note_access:
                  type: number
                  format: int32
                  description: 'Login note access type id. One of {@link \RsLoginNoteAccessSid} constants.'
                is_book:
                  type: boolean
                  description: 'Whether flagged user can book. Does not matter if {@link AlertEditApi::$is_flag} is `false`.'
                is_flag:
                  type: boolean
                  description: 'Whether to flag the user.'
                is_purchase:
                  type: boolean
                  description: 'Whether flagged user can make purchases. Does not matter if {@link AlertEditApi::$is_flag} is `false`.'
                k_business:
                  type: string
                  description: 'Key of current business. Primary key in {@link \RsBusinessSql} table.'
                k_login_note:
                  type: string
                  description: 'Login note key to edit or get info for. Primary key in {@link \RsLoginNoteSql} table. Empty if new entry is being added.'
                text_note:
                  type: string
                  description: 'Note text.'
                uid:
                  type: string
                  description: 'Key of a user to show information or post a note for. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Alert-AlertEdit
  '/Wl/Profile/Attach/AttachElement.json':
    delete:
      summary: 'Deletes the attachment.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_attach:
                  type: string
                  description: 'Attachment key.'
                k_business:
                  type: string
                  description: 'Business key.'
                uid:
                  type: string
                  description: 'User key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Attach-AttachElement
    get:
      summary: 'Gets the data for the attachment editing form.'
      parameters:
        - name: k_attach
          in: query
          description: 'Attachment key.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dtu_create:
                    type: string
                    description: 'Date and time of the creation.'
                  dtu_edit:
                    type: string
                    description: 'Date and time of the last edit.'
                  s_show_delete:
                    type: string
                    description: 'Flag for showing a delete button.'
                  text_description:
                    type: string
                    description: 'Attachment description.'
                  text_filename:
                    type: string
                    description: 'Attachment file name.'
                  text_filesize:
                    type: string
                    description: 'Attachment file size.'
                  text_filetype:
                    type: string
                    description: 'Attachment file type.'
                  url_file:
                    type: string
                    description: 'URL to get attachment file.'
                  url_preview:
                    type: string|null
                    description: 'URL to get preview attachment data. `null` in case when preview not available.'
      tags:
        - Attach-AttachElement
    post:
      summary: 'In case the attachment key is not specified, it adds a new attachment. In case the attachment key is specified, edits the attachment.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_private:
                  type: bool|null
                  description: '`true` if the attachment is private; `false` otherwise. `null` until initialized.'
                k_attach:
                  type: string
                  description: 'Attachment key.'
                k_business:
                  type: string
                  description: 'Business key.'
                uid:
                  type: string
                  description: 'User key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  text_description:
                    type: string
                    description: 'Attachment description.'
                  text_filename:
                    type: string
                    description: 'Attachment file name.'
      tags:
        - Attach-AttachElement
  '/Wl/Profile/Attach/AttachList.json':
    get:
      summary: ''
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
        - name: text_search
          in: query
          description: 'The filter phrase to filter attach by name.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'Business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'List of client attach.'
      tags:
        - Attach-AttachList
  '/Wl/Profile/Contract/Contract.json':
    get:
      summary: ''
      parameters:
        - name: dt_start
          in: query
          description: 'The start date of the contract.'
          schema:
            type: string
        - name: f_manual_discount
          in: query
          description: 'The percentage discount for the item.'
          schema:
            type: number
            format: float
        - name: id_purchase_item
          in: query
          description: 'The type of purchase item. This is one of the {@link \RsPurchaseItemSid} constants. Optional if {@link \Wl\Profile\Contract\ContractApi::$k_purchase_item} is not empty.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: k_id
          in: query
          description: 'The key of the purchase item in the database. The item key. Depends on {@link ContractApi::$id_purchase_item} property.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the selected location.'
          schema:
            type: string
        - name: k_purchase_item
          in: query
          description: 'The key of the selected purchase item.'
          schema:
            type: string
        - name: m_discount_flat
          in: query
          description: 'Amount of a flat manual discount.'
          schema:
            type: string
        - name: m_price_custom
          in: query
          description: 'The custom price of the item.'
          schema:
            type: string
        - name: s_discount_code
          in: query
          description: 'The discount code used for the item.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the current user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  html_contract:
                    type: string
                    description: 'The text of the contract.'
                  i_minor_age:
                    type: number
                    format: int32
                    description: 'Age of minor which documents can be signed by parent or legal guardian.'
                  text_title:
                    type: string
                    description: 'Title of purchase option.'
      tags:
        - Contract-Contract
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_agree:
                  type: bool|null
                  description: '<tt>false</tt> if user has not agreed to use Electronic Signatures, <tt>true</tt> if user has agreed to use Electronic Signatures, <tt>null</tt> otherwise.'
                k_business:
                  type: string
                  description: 'The key of the business to show information for.'
                k_purchase_item:
                  type: string
                  description: 'The key of the selected purchase item.'
                s_signature:
                  type: string
                  description: 'An encoded version of the client signature. This is different from the signature needed to communicate with an endpoint.'
                uid:
                  type: string
                  description: 'The key of the current user.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Contract-Contract
  '/Wl/Profile/Purchase/PurchaseElement.json':
    get:
      summary: 'Retrieves information about 1 purchase item.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key. Currently used only with {@link \Wl\Profile\Purchase\PurchaseElementApi::$k_session_pass} variable.'
          schema:
            type: string|null
        - name: k_code
          in: query
          description: 'The key of the redemption code used to obtain some goods. This should be specified only for items obtained via redemption code (not for ordinary purchases or for purchased promotions without purchases). This will be `null` if not set yet.'
          schema:
            type: string
        - name: k_enrollment_book
          in: query
          description: 'The key of an entirely booked event. This must be specified if the purchased item is a whole event and a component of a package.'
          schema:
            type: string
        - name: k_login_product
          in: query
          description: 'The key of a purchased product. This must be specified if the purchased item is a product and a component of a package.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The key of the user''s promotion. This should only be specified for promotions given without a purchase. This isn''t for ordinary purchases or for promotions obtained via redemption codes. This will be `null` if not set yet.'
          schema:
            type: string
        - name: k_purchase_item
          in: query
          description: 'The key of the purchased item. This should be specified only for ordinary purchases, not for those obtained via redemption codes or as a result of an old import.'
          schema:
            type: string
        - name: k_session_pass
          in: query
          description: 'The key of the make-up session used to attend an event.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_component:
                    type: array[]
                    description: 'List of components (not empty if this purchase element is a package). Every element has keys: <dl> <dt> string [<var>k_enrollment_book</var>] </dt> <dd> Key of enrollment book. Primary key in {@link \RsenrollmentBookSql} table. </dd> <dt> string [<var>k_login_product</var>] </dt> <dd> Key of product. Primary key in {@link \RsLoginProductSql} table. </dd> <dt> string [<var>k_login_promotion</var>] </dt> <dd> Key of promotion. Primary key in {@link \RsLoginPromotionSql} table. </dd> <dt> string [<var>k_session_pass</var>] </dt> <dd> Session key. Primary key in {@link \Wl\Session\Pass\Sql} table. </dd> </dl>'
                  a_logo:
                    type: array
                    description: 'An array containing information about the image of the purchased item. Every element has the following keys: <dl> <dt>int <var>i_height</var></dt> <dd>The height of the image.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the image.</dd> <dt>bool <var>is_empty</var></dt> <dd>If `true`, then the purchased item doesn''t have image. If `false`, then the item has an image.</dd> <dt>string <var>s_url</var></dt> <dd>The URL for the image.</dd> </dl>'
                  a_restrict:
                    type: array[]
                    description: 'This field is used only for promotions. It contains restrictions that will apply to bookings made with this promotion. Every element has the following keys: <dl> <dt>int <var>i_limit</var></dt> <dd>The number of sessions that may be booked during this period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of sessions that remain available.</dd> <dt>string <var>s_date</var></dt> <dd>The name of the period type.</dd> </dl>'
                  a_tax:
                    type: array[]
                    description: 'The list of taxes paid for the purchased item. Every element has the following fields: <dl> <dt>string <var>f_tax_discount</var></dt> <dd>The amount of tax.</dd> <dt>string <var>s_tax</var></dt> <dd>The name of the tax.</dd> </dl>'
                  can_renew:
                    type: boolean
                    description: 'This is `true` only if the purchased item is a promotion and the user can control the renewal of the promotion. Otherwise, this will be `false`.'
                  dl_purchase:
                    type: string
                    description: 'Local date of purchase in MySQL format.'
                  dl_start:
                    type: string
                    description: 'The start date of the promotion. This is used only if the purchased item is a promotion.'
                  dt_end:
                    type: string
                    description: 'The expiration date of the promotion. This is used only if the purchased item is a promotion.'
                  dt_hold_end:
                    type: string
                    description: 'The end date of the promotion hold. This is used only for promotions on hold. This may be empty if the hold is internal.'
                  dt_hold_start:
                    type: string
                    description: 'The start date of the promotion hold. This is used only for promotions on hold.'
                  dt_purchase:
                    type: string
                    description: 'The purchase date of the purchased item. This is given in GMT in MySQL format.'
                  dt_send:
                    type: string
                    description: 'The date for when the email regarding the gift card should be sent (or was sent) to the receiver. This is only used for gift cards.'
                  f_discount_login_type_percent:
                    type: number
                    format: float
                    description: 'The percentage value of the discount for the client type. This is empty if this discount wasn''t applied.'
                  html_description:
                    type: string
                    description: 'The description of the purchased item.'
                  i_book:
                    type: number
                    format: int32
                    description: 'The number of sessions remaining for a promotion. This is used only for promotions. This will be `0` if the purchased item isn''t a promotion or if there are no remaining sessions.'
                  i_buy:
                    type: number
                    format: int32
                    description: 'The number of purchased items bought at the time of purchase. This field will be `0` for purchase items obtained via a redemption code or as a result of an old import.'
                  i_discount_count:
                    type: number
                    format: int32
                    description: 'The percentage value of the discount given by a reward prize. This field will be `0` if a discount wasn''t applied.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'This field is only added for promotions. Duration of promotion. Measurement unit is <var>id_duration</var>.'
                  i_left:
                    type: number
                    format: int32
                    description: 'The number of bookings remaining in this promotion. This value is used only for non-sequential promotions.'
                  i_limit:
                    type: number
                    format: int32
                    description: 'The number of visits which can be made with this promotion. This is used only for promotions.'
                  i_payment_period:
                    type: number
                    format: int32
                    description: 'The duration of the regular payments interval. This is used only for “membership” type promotions.'
                  i_remain:
                    type: number
                    format: int32
                    description: 'The number of remaining bookings for the promotion. This is used only for promotions.'
                  i_remain_duration:
                    type: number
                    format: int32
                    description: 'The number of minutes remaining for the promotion. This is used only for promotions that work with a limited number of minutes.'
                  i_renew:
                    type: number
                    format: int32
                    description: 'Not <tt>0</tt> only for promotions. How many times promotion was updated.'
                  i_use:
                    type: number
                    format: int32
                    description: 'This is used only for promotions. This is the number of visits that were attended for the promotion.'
                  id_activation:
                    type: number
                    format: int32
                    description: 'Activation mode. One on {@link \RsActivationSid} constants. This field is only added for promotions.'
                  id_discount_commission_type:
                    type: number
                    format: int32
                    description: 'The type of discount given via a reward prize. One on the {@link \RsCommissionTypeSid} constants. This will be empty if this discount wasn''t applied.'
                  id_duration:
                    type: number
                    format: int32
                    description: 'The type of duration for the promotion. This is used only for “membership” type promotions. This determines whether the promotion lasts indefinitely, has a fixed duration, or ends on a specific date. One of the {@link \RsDurationTypeSid} constants.'
                  id_program_type:
                    type: number
                    format: int32
                    description: 'The ID of the promotion program. One of the {@link \RsProgramTypeSid} constants. This is used only for promotions.'
                  id_purchase_item:
                    type: number
                    format: int32
                    description: 'The ID of the purchase item type. One of the {@link \RsPurchaseItemSid} constants.'
                  id_sale:
                    type: number
                    format: int32
                    description: 'The ID of the sale category. One of the {@link \RsSaleSid} constants.'
                  is_active:
                    type: boolean
                    description: 'If `true`, then the purchase item is active. If `false`, then the purchase item isn''t active.'
                  is_component:
                    type: boolean
                    description: 'If `true`, then the purchased item is a component of another purchase item, as is the case of a package. If `false`, then the purchased item isn''t a component of another purchase item.'
                  is_convert:
                    type: boolean
                    description: 'If `true`, then this promotion will be converted to a different promotion after it expires. It `false`, then the promotion won''t be converted to a different promotion after it expires. This can only be true for certain promotions.'
                  is_expire:
                    type: boolean
                    description: 'This is `true` only if the purchased item is an expired promotion. Otherwise, this will be `false`.'
                  is_hold:
                    type: boolean
                    description: 'This is `true` only if the purchased item is a promotion placed on hold. Otherwise, this will be `false`.'
                  is_limit:
                    type: boolean
                    description: 'If `true`, then the usage of this purchased item is disabled. If `false`, then the usage of this purchased item is enabled.'
                  is_login_type_member:
                    type: bool|null
                    description: 'If `true`, then the discount was applied for the member type. If `false`, then the discount was applied for the pass holder type. If `null`, then the discount was applied for the prospect type (this won''t be `null` only if a discount based on a client type was applied).'
                  is_mail:
                    type: boolean
                    description: 'If `true`, then the gift card email notification will be sent to the receiver. This is `true` only if the purchased item is a gift card. Otherwise, this will be `false`.'
                  is_past:
                    type: boolean
                    description: 'If `true`, then the gift card email notification has been sent. This can only be `true` if the purchased item is a gift card. Otherwise, this will be `false`.'
                  is_redeem:
                    type: boolean
                    description: 'This is `true` if the gift card has been redeemed. This can only be true if the purchased item is a gift card. Otherwise, this will be `false`.'
                  is_renew:
                    type: boolean
                    description: 'This is `true` if the promotion is auto-renewable. This can only be true if the purchased item is a promotion. Otherwise, this will be `false`.'
                  is_transfer:
                    type: boolean
                    description: 'This is `true` if the promotion has been transferred. This can only be `true` if the purchased item is a promotion. This is `false` if the promotion hasn''t been transferred or in all other cases.'
                  k_code_result:
                    type: string
                    description: 'The key of the redemption code. This won''t be `0` if the purchased item is obtained via a redemption code or if it''s a component of a package which is obtained via a redemption code.'
                  k_currency:
                    type: string
                    description: 'The key of the currency used to make the purchase.'
                  k_login_promotion_result:
                    type: string
                    description: 'The key of the purchased promotion. This won''t be `0` only for promotions.'
                  k_purchase_result:
                    type: string
                    description: 'The key of the whole purchase which includes the given purchased item.'
                  m_cost_item:
                    type: string
                    description: 'The cost of the purchased item.'
                  m_cost_total:
                    type: string
                    description: 'The total cost of the purchase, including taxes and fees.'
                  m_discount_amount:
                    type: string
                    description: 'The amount of the discount given via a reward prize. This will be empty if the discount wasn''t applied.'
                  m_discount_login_type_amount:
                    type: string
                    description: 'The amount of the discount for the client type. This will be empty if the discount wasn''t applied.'
                  m_discount_manual:
                    type: string
                    description: 'Amount of manual discount. Empty if this discount was not applied.'
                  m_period_price:
                    type: string
                    description: 'The amount to pay for each payment period. This is used only for promotions with the "membership" program type.'
                  m_price:
                    type: string
                    description: 'Source price of item.'
                  m_refund:
                    type: string
                    description: 'The amount refunded. This will be `0` if there are no refunds.'
                  s_code:
                    type: string
                    description: 'The redemption code. This is used only if the purchase is bought using a redemption code.'
                  s_gift_code:
                    type: string
                    description: 'The code to redeem gift card. This won''t be empty only for gift cards. This can be auto-generated or custom (entered manually by the staff member during purchase). The max length is 20 characters, which can include both numbers and letters.'
                  s_gift_recipient:
                    type: string
                    description: 'Name of gift recipient. This won''t be empty only for gift cards.'
                  s_limit_actor:
                    type: string
                    description: 'The name of the staff member who disabled the usage of the purchased item. This will be empty if the purchased item is enabled.'
                  s_mail:
                    type: string
                    description: 'The email address the gift card was sent to. This is used only for gift cards.'
                  s_message:
                    type: string
                    description: 'The text of the message sent to the gift card recipient. This is used only for gift cards. This will be empty if an email notification shouldn''t be sent.'
                  s_payer:
                    type: string
                    description: 'The name of the user who paid for this purchase.'
                  s_promotion_convert:
                    type: string
                    description: 'The title of the converted promotion. This is used only for promotions which must be converted to another promotion after expiration.'
                  s_purchase:
                    type: string
                    description: 'The purchase ID number as it appears on the receipt. This value will also include the leading 0s for the ID number.'
                  s_recipient:
                    type: string
                    description: 'The name of the user who paid for this purchase.'
                  s_sender:
                    type: string
                    description: 'The name of the sender. This is used only for gift cards.'
                  s_title:
                    type: string
                    description: 'The name of the purchased item.'
                  sid_value:
                    type: string
                    description: 'The string ID of the purchased item. This ID may be used to change the view of the purchased item.'
                  uid_payer:
                    type: string
                    description: 'The key of the user who paid for this purchase.'
                  uid_recipient:
                    type: string
                    description: 'The key of the user who paid for this purchase.'
      tags:
        - Purchase-PurchaseElement
  '/Wl/Profile/Purchase/PurchaseList.json':
    get:
      summary: 'Retrieves a list of user''s purchase items to show in user profile.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of a business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of a user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_purchase:
                    type: array[]
                    description: 'A list of purchased items. Every element contains a sub-array with the following fields: <dl> <dt> bool[] <var>a_active</var> </dt> <dd> The value of <var>a_purchase[''is_active'']</var>. For packages, this also contains the values of <var>a_purchase[''is_active'']</var> of every component. </dd> <dt> int[] <var>a_sale</var> </dt> <dd> The value of <var>a_purchase[''id_sale'']</var>. For packages, this also contains the values of <var>a_purchase[''id_sale'']</var> of every component. </dd> <dt> string <var>dt_add</var> </dt> <dd> The date that the purchase was added. </dd> <dt> int <var>id_purchase_item</var> </dt> <dd> The ID of the purchase type. One of the constants {@link \RsPurchaseItemSid}. </dd> <dt> int <var>id_sale</var> </dt> <dd> The ID of the sale category in the store. One of the constants {@link \RsSaleSid}. </dd> <dt> bool <var>is_active</var> </dt> <dd> If `true`, then the purchase item is active. Otherwise, this will be `false`. </dd> <dt> bool [<var>is_component</var>] </dt> <dd> If `true`, then the purchase item is a package component. Otherwise, this will be `false`. </dd> <dt> string <var>k_appointment</var> </dt> <dd> Appointment key. Primary key from {@link \RsAppointmentSql} table. </dd> <dt> string <var>k_code</var> </dt> <dd> The redemption code key that was used to make a purchase. This is used only if <var>k_login_promotion</var> and <var>k_purchase</var> are empty. </dd> <dt> string [<var>k_enrollment_book</var>] </dt> <dd> The key of an event that requires clients to book every session at once. This is used only if the event is part of a package. </dd> <dt> string <var>k_id</var> </dt> <dd> The key of the purchase type referring to different types of keys depending on the value of <var>id_sale</var>. </dd> <dt> string [<var>k_login_product</var>] </dt> <dd> The key of the purchased product. This is used only if the event is part of a package. </dd> <dt> string <var>k_login_promotion</var> </dt> <dd> The key of the user''s existing purchase options. This is used only if `k_code` and `k_purchase` are empty. </dd> <dt> string <var>k_purchase</var> </dt> <dd> The key of a purchase where no special case rules are in effect. This is used only used if `k_code` is empty. </dd> <dt> string <var>k_purchase_item</var> </dt> <dd> The key of a purchase item where no special case rules are in effect. This is used only if <var>k_code</var> is empty. </dd> <dt> string <var>k_service</var> </dt> <dd> Service key. Primary key in {@link \RsServiceSql} table. </dd> <dt> string [<var>k_session_pass</var>] </dt> <dd> In certain cases a session can be canceled and makeup sessions can be granted to a client in lieu of other compensation. This is the key of one of the makeup sessions used to attend an event. This is also present for a repeat purchase of an event. Primary key in {@link \Wl\Session\Pass\Sql} table. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the purchase item. </dd> <dt> string <var>uid</var> </dt> <dd> The ID of the purchase owner. Primary key {@link \PassportLoginSql} in table. </dd> </dl>'
      tags:
        - Purchase-PurchaseList
  '/Wl/Profile/Term/Term.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The key of the current business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dt_agree:
                    type: string|null
                    description: 'The date/time of the waiver confirmation. <tt>null</tt> if waiver is not confirmed.'
                  html_contract:
                    type: string
                    description: 'The text of the online waiver.'
                  i_minor_age:
                    type: number
                    format: int32
                    description: 'Age of minor which documents can be signed by parent or legal guardian.'
                  ip_agree:
                    type: string|null
                    description: 'The IP address from which the confirmation was carried out. <tt>null</tt> if waiver is not confirmed.'
                  is_agree:
                    type: boolean
                    description: 'Flag of successful saving agreement. <tt>true</tt> if agreement was sign up successful <tt>false</tt> - otherwise.'
                  s_name:
                    type: string
                    description: 'The user''s name.'
                  url_signature:
                    type: string|false
                    description: 'The URL to the image with the client''s signature. <tt>false</tt> if waiver is not confirmed.'
      tags:
        - Term-Term
  '/Wl/Profile/PurchaseList/PurchaseListElement.json':
    get:
      summary: 'Retrieves information about 1 purchase item.'
      parameters:
        - name: i_image_height
          in: query
          description: 'Image Height in pixels. Please specify this value if you need purchase image to be returned in specific size. In case this value is not specified returned image will have default purchase size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'Image Width in pixels. Please specify this value if you need purchase image to be returned in specific size. In case this value is not specified returned image will have default purchase size.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The business key. Currently used only with {@link \Wl\Profile\PurchaseList\PurchaseListElementApi::$k_session_pass} variable.'
          schema:
            type: string|null
        - name: k_code
          in: query
          description: 'The ID of the redemption code used to obtain the item. This should be specified only for items obtained via redemption code (not for ordinary purchases or for purchased promotions without purchases). This will be `null` if not set yet.'
          schema:
            type: string
        - name: k_enrollment_book
          in: query
          description: 'The key of an entirely booked event. This must be specified if the purchased item is a whole event and part of a package.'
          schema:
            type: string
        - name: k_login_product
          in: query
          description: 'The key of a purchased product. This must be specified if the purchased item is a product and part of a package.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The key of the user''s promotion. This should only be specified for promotions given without a purchase. This isn''t for ordinary purchases or for promotions obtained via redemption codes. This will be `null` if not set yet.'
          schema:
            type: string
        - name: k_purchase_item
          in: query
          description: 'The key of the purchased item. This should be specified only for ordinary purchases and not for purchases obtained via redemption codes or as a result of an old import.'
          schema:
            type: string
        - name: k_session_pass
          in: query
          description: 'The ID of the makeup session used to attend an event. This must be specified if the purchase item is a component of a package and a whole event booking. And only for items which aren''t components of package.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_component:
                    type: array[]
                    description: 'A list of components. This won''t be empty if this purchase element is a package. Every element has keys: <dl> <dt> string [<var>k_enrollment_book</var>] </dt> <dd> The booking enrollment key. </dd> <dt> string [<var>k_login_product</var>] </dt> <dd> The key referencing the product a user purchased. </dd> <dt> string [<var>k_login_promotion</var>] </dt> <dd> The key of a user''s Purchase Option. </dd> <dt> string [<var>k_session_pass</var>] </dt> <dd> The key of a user''s session pass. </dd> </dl>'
                  a_logo:
                    type: array
                    description: 'An array containing information about the image of the purchased item. Every element has the following keys: <dl> <dt> int <var>i_height</var> </dt> <dd> The height of the image. </dd> <dt> int <var>i_width</var> </dt> <dd> The width of the image. </dd> <dt> bool <var>is_empty</var> </dt> <dd> If `true`, then the purchased item doesn''t have an image. If `false`, then the item has an image. </dd> </dl>'
                  a_restrict:
                    type: array[]
                    description: 'This field is used only for promotions. It contains restrictions that will apply to bookings made with this promotion. Every element has the following keys: <dl> <dt> int <var>i_limit</var> </dt> <dd> The number of sessions that may be booked during this period. </dd> <dt> int <var>i_remain</var> </dt> <dd> The number of sessions that remain available. </dd> <dt> string <var>text_date</var> </dt> <dd> The name of the period type. </dd> </dl>This will be an empty array for other purchased items.'
                  a_tax:
                    type: array[]
                    description: 'The list of taxes paid for the purchased item. Every element has the following fields: <dl> <dt> string <var>f_tax_discount</var> </dt> <dd> The amount of tax. </dd> <dt> string <var>s_tax</var> </dt> <dd> The name of the tax. </dd> </dl>'
                  can_renew:
                    type: boolean
                    description: 'This is `true` only if the purchased item is a promotion and the user can control the renewal of the promotion. Otherwise, this will be `false`.'
                  dl_end:
                    type: string
                    description: 'The expiration date of the promotion. Only available if the item is a promotion.'
                  dl_purchase:
                    type: string
                    description: 'The local date of the purchase in MySQL format.'
                  dl_send:
                    type: string
                    description: 'The local date in MySQL format when mail about purchasing was sent (or will be sent) to the user. This won''t be empty only for gift cards.'
                  dl_start:
                    type: string
                    description: 'The start date of the promotion. Only available if the item is a promotion.'
                  dt_cancel:
                    type: string
                    description: 'The local date of cancellation in MySQL format. Only available if the item is a membership.'
                  dt_hold_end:
                    type: string
                    description: 'The end date of the promotion hold. This is used only for promotions on hold. This value may be empty if the hold is eternal.'
                  dt_hold_start:
                    type: string
                    description: 'The start date of the promotion hold. Only available if the item is a promotion and on hold.'
                  dt_purchase:
                    type: string
                    description: 'The purchase date of the purchased item. This is given in UTC in MySQL format.'
                  dt_redeem:
                    type: string
                    description: 'The date in MySQL format when gift card was redeemed. Only available if the item is a gift card.'
                  f_discount_login_type_percent:
                    type: number
                    format: float
                    description: 'The percentage value of the discount for the client type. This will be empty if a discount wasn''t applied.'
                  html_description:
                    type: string
                    description: 'The description of the purchased item.'
                  i_book:
                    type: number
                    format: int32
                    description: 'The number of sessions remaining for a promotion. This value is used only for promotions. This value will be `0` if the purchased item isn''t a promotion or if there are no remaining sessions.'
                  i_book_duration:
                    type: number
                    format: int32
                    description: 'Displays the number of minutes of sessions that were booked by this promotion. This isn''t `0` only for promotions.'
                  i_buy:
                    type: number
                    format: int32
                    description: 'The number of purchased items bought at the time of purchase. This will be `0` for purchase items obtained via a redemption code or as a result of an import.'
                  i_discount_count:
                    type: number
                    format: int32
                    description: 'The percentage value of the discount given by a reward prize. This will be `0` if a discount wasn''t applied.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The duration of the promotion. The measurement unit is <var>id_duration</var>. This field is only added for promotions.'
                  i_left:
                    type: number
                    format: int32
                    description: 'The number of bookings left with this promotion. This value is used only for non-sequential promotions.'
                  i_limit:
                    type: number
                    format: int32
                    description: 'The number of visits that can be made with this promotion. This value is used only for promotions.'
                  i_payment_period:
                    type: number
                    format: int32
                    description: 'The interval duration of the regular payments. This value is used only for membership-type promotions.'
                  i_remain:
                    type: number
                    format: int32
                    description: 'The number of remaining bookings for the promotion. This is used only for promotions.'
                  i_remain_duration:
                    type: number
                    format: int32
                    description: 'The number of minutes remaining for the promotion. This is used only for promotions that work with a limited number of minutes.'
                  i_renew:
                    type: number
                    format: int32
                    description: 'Displays how many times promotion was updated. This isn''t `0` only for promotions.'
                  i_use:
                    type: number
                    format: int32
                    description: 'The number of visits that were attended for the promotion. This is used only for promotions.'
                  i_use_duration:
                    type: number
                    format: int32
                    description: 'The number of minutes the user has already used with this purchase of this promotion. This isn''t `0` only for promotions.'
                  id_activation:
                    type: number
                    format: int32
                    description: 'The activation mode. One of the {@link \RsActivationSid} constants. This field is only added for promotions.'
                  id_discount_commission_type:
                    type: number
                    format: int32
                    description: 'The type of discount given via a reward prize. One of the {@link \RsCommissionTypeSid} constants. This will be empty if this discount wasn''t applied.'
                  id_duration:
                    type: number
                    format: int32
                    description: 'The type of duration for the promotion. This is used only for membership-type promotions. This determines whether the promotion lasts indefinitely, has a fixed duration, or ends on a specific date. The measurement unit for key <var>i_payment_period</var>. One of the {@link \RsDurationTypeSid} constants.'
                  id_program_type:
                    type: number
                    format: int32
                    description: 'The ID of the promotion program. This is used only for promotions. The measurement unit for key <var>i_payment_period</var>. The ID of promotion program type. One of the {@link \RsProgramTypeSid} constants.'
                  id_purchase_item:
                    type: number
                    format: int32
                    description: 'The ID of the purchase item type. The measurement unit for key <var>i_payment_period</var>. The ID of purchase item type. One of the {@link \RsPurchaseItemSid} constants.'
                  id_sale:
                    type: number
                    format: int32
                    description: 'The ID of the sale category. One of the constants {@link \RsSaleSid}.'
                  is_active:
                    type: boolean
                    description: 'If `true`, then the purchase item is active. If `false`, then the purchase item isn''t active.'
                  is_asset:
                    type: boolean
                    description: 'Whether the purchase item is asset.'
                  is_component:
                    type: boolean
                    description: 'If `true`, then the purchased item is a component of another purchase item, as is the case of a package. If `false`, then the purchased item isn''t a component of another purchase item.'
                  is_convert:
                    type: boolean
                    description: 'If `true`, then this promotion will be converted to a different promotion after it expires. If `false`, then the promotion won''t be converted to a different promotion after it expires. This can only be true for certain promotions.'
                  is_expire:
                    type: boolean
                    description: 'This is `true` only if the purchased item is a promotion that has expired. Otherwise, this will be `false` in all other cases.'
                  is_hold:
                    type: boolean
                    description: 'This is `true` only if the purchased item is a promotion and has been placed on hold. Otherwise, this is `false` in all other cases.'
                  is_limit:
                    type: boolean
                    description: 'If `true`, then the usage of this purchased item is disabled. If `false`, then the usage of this purchased item is enabled.'
                  is_login_type_member:
                    type: bool|null
                    description: 'If `true`, then the discount was applied for the member type. If `false`, then the discount was applied for the pass holder type. If `null`, then the discount was applied for the prospect type. This won''t be `null` only if a discount based on a client type was applied.'
                  is_mail:
                    type: boolean
                    description: 'If `true`, then the gift card email notification will be sent to the receiver. This is `true` only if the purchased item is a gift card. Otherwise, this will be `false` in all other cases.'
                  is_past:
                    type: boolean
                    description: 'If `true`, then the gift card email notification has been sent. This can only be `true` if the purchased item is a gift card. Otherwise, this will be `false` in all other cases.'
                  is_redeem:
                    type: boolean
                    description: 'This is `true` if the gift card has been redeemed. This can only be `true` if the purchased item is a gift card. Otherwise, this will be `false` in all other cases.'
                  is_renew:
                    type: boolean
                    description: 'This is `true` if the promotion is auto-renewable. This can only be `true` if the purchased item is a promotion. Otherwise, this will be `false` in all other cases.'
                  is_transfer:
                    type: boolean
                    description: 'This is `true` if the promotion has been transferred. This can only be true if the purchased item is a promotion. This is `false` if the promotion hasn''t been transferred or in all other cases.'
                  k_code_result:
                    type: string
                    description: 'The key of the redemption code. This value will not be `0` if the purchased item is obtained via a redemption code or if it''s a component of a package obtained via a redemption code.'
                  k_currency:
                    type: string
                    description: 'The key of the currency used to make the purchase.'
                  k_id:
                    type: string
                    description: 'The key of the item. This can correspond to one of many values depending on {@link PurchaseListElementApi::$id_sale}.'
                  k_login_promotion_result:
                    type: string
                    description: 'The key of the purchased promotion. This won''t be `0` only for promotions.'
                  k_purchase_result:
                    type: string
                    description: 'The key of the whole purchase, including the given purchased item.'
                  m_cost_item:
                    type: string
                    description: 'The cost of the purchased item.'
                  m_cost_total:
                    type: string
                    description: 'The total cost of the purchase, including taxes and fees.'
                  m_discount_amount:
                    type: string
                    description: 'The amount of the discount via prize. This will be empty if this discount wasn''t applied.'
                  m_discount_login_type_amount:
                    type: string
                    description: 'The amount of the discount for the client type. This value will be empty if the discount wasn''t applied.'
                  m_discount_manual:
                    type: string
                    description: 'The amount of the manual discount. This will be empty if this discount wasn''t applied.'
                  m_period_price:
                    type: string
                    description: 'The amount to pay for each payment period. This is used only for promotions with the membership program type.'
                  m_price:
                    type: string
                    description: 'The source price of item.'
                  m_refund:
                    type: string
                    description: 'The amount refunded. This will be `0` if there are no refunds.'
                  s_code:
                    type: string
                    description: 'The redemption code. This value is used only if the purchase is bought via a redemption code.'
                  s_gift_code:
                    type: string
                    description: 'The code to redeem the gift card. This isn''t empty only for gift cards. This can be auto-generated or custom (entered manually by the staff member during purchase). The max length is 20 characters, including numbers and letters.'
                  s_gift_recipient:
                    type: string
                    description: 'The name of gift recipient. This isn''t empty only for gift cards.'
                  s_limit_actor:
                    type: string
                    description: 'The name of the staff member who disabled the usage of the purchased item. This will be empty if the purchased item is enabled.'
                  s_mail:
                    type: string
                    description: 'The email address to which the gift card was sent. This is used only for gift cards.'
                  s_message:
                    type: string
                    description: 'The test of the message sent to the gift card recipient. This is used only for gift cards. This will be empty if an email notification shouldn''t be sent.'
                  s_payer:
                    type: string
                    description: 'The name of the user who paid for this purchase.'
                  s_promotion_convert:
                    type: string
                    description: 'The title of the converted promotion. This value is used only for promotions that must be converted to another promotion after expiration.'
                  s_purchase:
                    type: string
                    description: 'The purchase ID number as it appears on the receipt. This value will also include the leading 0s for the ID number.'
                  s_recipient:
                    type: string
                    description: 'The name of the user who paid for this purchase.'
                  s_sender:
                    type: string
                    description: 'The name of the sender. This value is used only for gift cards.'
                  s_title:
                    type: string
                    description: 'The name of the purchased item.'
                  sid_value:
                    type: string
                    description: 'The string ID of the purchased item. This ID may be used to change the view of the purchased item.'
                  text_expire:
                    type: string
                    description: 'Expire conditions for the purchased item (only for promotion).'
                  uid_payer:
                    type: string
                    description: 'The key of the user who paid for this purchase.'
                  uid_recipient:
                    type: string
                    description: 'The key of the user who paid for this purchase.'
      tags:
        - PurchaseList-PurchaseListElement
  '/Wl/Profile/PurchaseList/PurchaseList.json':
    get:
      summary: 'Retrieves a list of user''s purchase items to show in user profile.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of a business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of a user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_purchase:
                    type: array[]
                    description: 'A list of purchased items. Every element contains a sub-array with the following fields: <dl> <dt> bool[] <var>a_active</var> </dt> <dd> The value of <var>a_purchase[''is_active'']</var>. For packages, this also contains the values of <var>a_purchase[''is_active'']</var> of every component. </dd> <dt> int[] <var>a_sale</var> </dt> <dd> The value of <var>a_purchase[''id_sale'']</var>. For packages, this also contains the values of <var>a_purchase[''id_sale'']</var> of every component. </dd> <dt> string <var>dt_add</var> </dt> <dd> The date that the purchase was added. </dd> <dt> int <var>id_purchase_item</var> </dt> <dd> The ID of the purchase type. One of the constants {@link \RsPurchaseItemSid}. </dd> <dt> int <var>id_sale</var> </dt> <dd> The ID of the sale category in the store. One of the constants {@link \RsSaleSid}. </dd> <dt> bool <var>is_active</var> </dt> <dd> If `true`, then the purchase item is active. Otherwise, this will be `false`. </dd> <dt> bool [<var>is_component</var>] </dt> <dd> If `true`, then the purchase item is a package component. Otherwise, this will be `false`. </dd> <dt> string <var>k_appointment</var> </dt> <dd> Appointment key. Primary key from {@link \RsAppointmentSql} table. </dd> <dt> string <var>k_code</var> </dt> <dd> The redemption code key that was used to make a purchase. This is used only if <var>k_login_promotion</var> and <var>k_purchase</var> are empty. </dd> <dt> string [<var>k_enrollment_book</var>] </dt> <dd> The key of an event that requires clients to book every session at once. This is used only if the event is part of a package. </dd> <dt> string <var>k_id</var> </dt> <dd> The key of the purchase type referring to different types of keys depending on the value of <var>id_sale</var>. </dd> <dt> string [<var>k_login_product</var>] </dt> <dd> The key of the purchased product. This is used only if the event is part of a package. </dd> <dt> string <var>k_login_promotion</var> </dt> <dd> The key of the user''s existing purchase options. This is used only if `k_code` and `k_purchase` are empty. </dd> <dt> string <var>k_purchase</var> </dt> <dd> The key of a purchase where no special case rules are in effect. This is used only used if `k_code` is empty. </dd> <dt> string <var>k_purchase_item</var> </dt> <dd> The key of a purchase item where no special case rules are in effect. This is used only if <var>k_code</var> is empty. </dd> <dt> string <var>k_service</var> </dt> <dd> Service key. Primary key in {@link \RsServiceSql} table. </dd> <dt> string [<var>k_session_pass</var>] </dt> <dd> In certain cases a session can be canceled and makeup sessions can be granted to a client in lieu of other compensation. This is the key of one of the makeup sessions used to attend an event. This is also present for a repeat purchase of an event. Primary key in {@link \Wl\Session\Pass\Sql} table. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the purchase item. </dd> <dt> string <var>uid</var> </dt> <dd> The ID of the purchase owner. Primary key {@link \PassportLoginSql} in table. </dd> </dl>'
      tags:
        - PurchaseList-PurchaseList
  '/Wl/Profile/Edit/Edit.json':
    get:
      summary: 'Returns current user profile information.'
      parameters:
        - name: id_register_source
          in: query
          description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
          schema:
            type: int|null
        - name: is_staff
          in: query
          description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_error_list:
                    type: array|null
                    description: 'List of errors. `null` if there was no mistake.'
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  a_structure:
                    type: array[]
                    description: 'The values and structure of all fields. Array keys are field IDs (`k_field`). Array values are the field values. The array has the following structure: <dl> <dt>int [<var>id_field_general</var>]</dt> <dd> The ID of a system field. One of the {@link \RsFieldGeneralSid} constants. This value is only defined if <var>id_field_type</var>={@link \RsFieldTypeSid::GENERAL}. </dd> <dt>bool <var>is_require</var></dt> <dd>Indicates whether the value of this field is required. This will be `1` if required or `0` if the field is optional.</dd> <dt>int <var>id_field_type</var></dt> <dd>The type of field. One of the {@link \RsFieldTypeSid} constants.</dd> <dt>string <var>k_field</var></dt> <dd>The field ID (<var>k_field</var>). A copy of the key of this array element.</dd> <dt>string <var>s_title</var></dt> <dd>The title of the field.</dd> <dt>mixed <var>x_value</var></dt> <dd>The value of the field. This value is defined by individual fields.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  is_short:
                    type: boolean
                    description: 'Indicates whether to display the full profile edit form or the short version. This is assumed to be used only in user registration mode.'
                  s_class:
                    type: string|null
                    description: 'Exception class name. `null` if there was no mistake.'
                  s_code:
                    type: string|null
                    description: 'Code of the error. `null` if there was no mistake.'
                  text_message:
                    type: string|null
                    description: 'Error message. `null` if there was no mistake.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-Edit
    post:
      summary: 'Creates a new user.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_family_relation:
                  type: array|null
                  description: 'Family relation data for new created user. `null` if family relation is not required.'
                a_image_upload:
                  type: array
                  description: 'Information for user''s photo. It is necessary to save simultaneously user and photo in staff member mode. Attention! Data from this field is taken directly from a POST somewhere in the depths of the photo upload.'
                a_new:
                  type: array
                  description: 'A copy of the {@link EditApi::$a_change}. This is used for POST requests when creating a new user.'
                id_mode:
                  type: int|null
                  description: 'ID of source mode. One of {@link \Wl\Mode\ModeSid} constants.'
                id_register_source:
                  type: int|null
                  description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
                is_exception_throw:
                  type: boolean
                  description: '`true` to throw an exception in a case of validation error; `false` to not throw.'
                is_sing_in:
                  type: boolean
                  description: 'This will be `true` to sign in a created user. Otherwise, this will be `false`.'
                is_staff:
                  type: boolean
                  description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
                k_business:
                  type: string
                  description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
                text_business_uid_key:
                  type: string
                  description: 'Compound key delimited wit a colon. First part is business key, where selected client exists. Primary key in {@link \RsBusinessSql} table. Second part - uid of already existed user we want to add. Primary key in {@link \PassportLoginSql} table. Empty if non-existent client is being added.'
                text_password:
                  type: string
                  description: 'The password to be set for a new user.'
                uid:
                  type: string
                  description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
                uid_existed:
                  type: string
                  description: 'The UID of an existing user in another business to add to the current business.'
                uid_relative_key:
                  type: string
                  description: 'UID of the user, whose email was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose email is inherited.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_error_list:
                    type: array|null
                    description: 'List of errors. `null` if there was no mistake.'
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  is_short:
                    type: boolean
                    description: 'Indicates whether to display the full profile edit form or the short version. This is assumed to be used only in user registration mode.'
                  s_class:
                    type: string|null
                    description: 'Exception class name. `null` if there was no mistake.'
                  s_code:
                    type: string|null
                    description: 'Code of the error. `null` if there was no mistake.'
                  s_status:
                    type: string|null
                    description: 'Status of the request. `null` if there was no mistake.'
                  text_message:
                    type: string|null
                    description: 'Error message. `null` if there was no mistake.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-Edit
    put:
      summary: 'Updates values of profile fields.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_change:
                  type: array
                  description: 'A list of fields to change. Values are the new field values. Specific values depend on an individual field type. Some fields may be strings while others are arrays. If a composite field is changed, all fields should be specified (for example, if you change your address, you''ll need to specify the city). Keys are the `k_field` values.'
                id_register_source:
                  type: int|null
                  description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
                is_staff:
                  type: boolean
                  description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
                k_business:
                  type: string
                  description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
                uid:
                  type: string
                  description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-Edit
  '/Wl/Profile/Edit/Create.json':
    post:
      summary: 'Creates a new user.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The key of the business where you''re creating new user.'
                text_firstname:
                  type: string
                  description: 'First name of the user.'
                text_lastname:
                  type: string
                  description: 'Last name of the user.'
                text_mail:
                  type: string
                  description: 'Email of the user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    description: 'The key of the user added.'
      tags:
        - Edit-Create
  '/Wl/Profile/Edit/EditByToken.json':
    get:
      summary: 'Returns current user profile information.'
      parameters:
        - name: id_register_source
          in: query
          description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
          schema:
            type: int|null
        - name: is_staff
          in: query
          description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
          schema:
            type: string
        - name: text_token
          in: query
          description: 'The security token.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_error_list:
                    type: array|null
                    description: 'List of errors. `null` if there was no mistake.'
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  a_structure:
                    type: array[]
                    description: 'The values and structure of all fields. Array keys are field IDs (`k_field`). Array values are the field values. The array has the following structure: <dl> <dt>int [<var>id_field_general</var>]</dt> <dd> The ID of a system field. One of the {@link \RsFieldGeneralSid} constants. This value is only defined if <var>id_field_type</var>={@link \RsFieldTypeSid::GENERAL}. </dd> <dt>bool <var>is_require</var></dt> <dd>Indicates whether the value of this field is required. This will be `1` if required or `0` if the field is optional.</dd> <dt>int <var>id_field_type</var></dt> <dd>The type of field. One of the {@link \RsFieldTypeSid} constants.</dd> <dt>string <var>k_field</var></dt> <dd>The field ID (<var>k_field</var>). A copy of the key of this array element.</dd> <dt>string <var>s_title</var></dt> <dd>The title of the field.</dd> <dt>mixed <var>x_value</var></dt> <dd>The value of the field. This value is defined by individual fields.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  is_short:
                    type: boolean
                    description: 'Indicates whether to display the full profile edit form or the short version. This is assumed to be used only in user registration mode.'
                  s_class:
                    type: string|null
                    description: 'Exception class name. `null` if there was no mistake.'
                  s_code:
                    type: string|null
                    description: 'Code of the error. `null` if there was no mistake.'
                  text_message:
                    type: string|null
                    description: 'Error message. `null` if there was no mistake.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-EditByToken
    post:
      summary: 'Creates a new user.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_family_relation:
                  type: array|null
                  description: 'Family relation data for new created user. `null` if family relation is not required.'
                a_image_upload:
                  type: array
                  description: 'Information for user''s photo. It is necessary to save simultaneously user and photo in staff member mode. Attention! Data from this field is taken directly from a POST somewhere in the depths of the photo upload.'
                a_new:
                  type: array
                  description: 'A copy of the {@link EditApi::$a_change}. This is used for POST requests when creating a new user.'
                id_mode:
                  type: int|null
                  description: 'ID of source mode. One of {@link \Wl\Mode\ModeSid} constants.'
                id_register_source:
                  type: int|null
                  description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
                is_exception_throw:
                  type: boolean
                  description: '`true` to throw an exception in a case of validation error; `false` to not throw.'
                is_sing_in:
                  type: boolean
                  description: 'This will be `true` to sign in a created user. Otherwise, this will be `false`.'
                is_staff:
                  type: boolean
                  description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
                k_business:
                  type: string
                  description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
                text_business_uid_key:
                  type: string
                  description: 'Compound key delimited wit a colon. First part is business key, where selected client exists. Primary key in {@link \RsBusinessSql} table. Second part - uid of already existed user we want to add. Primary key in {@link \PassportLoginSql} table. Empty if non-existent client is being added.'
                text_password:
                  type: string
                  description: 'The password to be set for a new user.'
                uid:
                  type: string
                  description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
                uid_existed:
                  type: string
                  description: 'The UID of an existing user in another business to add to the current business.'
                uid_relative_key:
                  type: string
                  description: 'UID of the user, whose email was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose email is inherited.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_error_list:
                    type: array|null
                    description: 'List of errors. `null` if there was no mistake.'
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  is_short:
                    type: boolean
                    description: 'Indicates whether to display the full profile edit form or the short version. This is assumed to be used only in user registration mode.'
                  s_class:
                    type: string|null
                    description: 'Exception class name. `null` if there was no mistake.'
                  s_code:
                    type: string|null
                    description: 'Code of the error. `null` if there was no mistake.'
                  s_status:
                    type: string|null
                    description: 'Status of the request. `null` if there was no mistake.'
                  text_message:
                    type: string|null
                    description: 'Error message. `null` if there was no mistake.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-EditByToken
    put:
      summary: 'Updates values of profile fields.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_change:
                  type: array
                  description: 'A list of fields to change. Values are the new field values. Specific values depend on an individual field type. Some fields may be strings while others are arrays. If a composite field is changed, all fields should be specified (for example, if you change your address, you''ll need to specify the city). Keys are the `k_field` values.'
                id_register_source:
                  type: int|null
                  description: 'Registration source ID. One of {@link RegisterSourceSid} constants. Used only to register new clients. * If the client is already authorized, the field value will not be used. * If the client is not authorized and no value is set, {@link RegisterSourceSid::SELF} will be used. <no-sdk> Use the {@link EditApi::_registerSourceGet()} method to get the value required for the field list object, for method {@link FieldList::registerSourceSet()}. </no-sdk>'
                is_staff:
                  type: boolean
                  description: 'Indicates whether to display the form as a user or as a staff member. Staff members may have access to different fields than the user.'
                k_business:
                  type: string
                  description: 'The key of the business you''re editing. An empty value will return the system-wide fields.'
                uid:
                  type: string
                  description: 'The key of the user to edit. If empty, an empty form will be displayed to add a new user.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_phone_inherit:
                    type: array
                    description: 'An array contained with information about phone inheritance. The array has the following structure: <dl> <dt>bool [`is_phone_inherit`]</dt> <dd>Indicates weather to inherit phone numbers from relative or not. `1` if phone inheritance is needed, ''0'' otherwise.</dd> <dt>string [`text_relative`]</dt> <dd>Relative''s name.</dd> <dt>string `uid_relative`</dt> <dd>User key of relative.</dd> </dl>'
                  is_address_inherit:
                    type: boolean
                    description: 'Whether the address be inherited. `true` if address inherit, otherwise `false`.'
                  uid_inherit_address:
                    type: string|null
                    description: 'UID of the user, whose address was inherited by the existing client we want to add. Empty if non-existent user is being added or user to add is the one, whose address is inherited. `null` If the address is not inherited.'
      tags:
        - Edit-EditByToken
  '/Wl/Profile/Edit/EditPassword.json':
    post:
      summary: 'Saves new password for user.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_old_password_required:
                  type: boolean
                  description: 'Checks if the current password is required or not to update the password.'
                k_business:
                  type: string
                  description: 'The key ID of business where actions take place. Primary key in {@link \RsBusinessSql} table. Business is necessary for mail sending only.'
                s_password_confirm:
                  type: string
                  description: 'The confirmation of new password.'
                s_password_new:
                  type: string
                  description: 'The new password.'
                s_password_old:
                  type: string
                  description: 'The old password.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Edit-EditPassword
  '/Wl/Profile/Setting/Setting.json':
    get:
      summary: 'Retrieves a list of user settings and other additional information for the settings page.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_account_management_email:
                    type: boolean
                    description: 'Determines whether email notifications related to purchases, contracts, and other activity in a client''s account are enabled.'
                  is_account_management_sms:
                    type: boolean
                    description: 'Determines whether SMS notifications related to purchases, contracts, and other activity in a client''s account are enabled.'
                  is_news_and_updates_email:
                    type: boolean
                    description: 'Determines whether email notifications related to news and updates from the business regarding their services, availability, and promotions are enabled.'
                  is_news_and_updates_sms:
                    type: boolean
                    description: 'Whether sms notifications related to news and updates from the business regarding their services, availability and promotions are enabled.'
                  is_schedule_and_reminders_email:
                    type: boolean
                    description: 'Determines whether email notifications related to the services a client has booked are enabled.'
                  is_schedule_and_reminders_sms:
                    type: boolean
                    description: 'Determines whether SMS notifications related to the services a client has booked are enabled.'
                  text_language:
                    type: string
                    description: 'SID of language code.'
      tags:
        - Setting-Setting
    post:
      summary: 'Unsubscribe user from selected mail types({@link \RsMailSid}).'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The key of the business to show information for.'
                uid:
                  type: string
                  description: 'The key of the user to show information for.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_account_management_email:
                    type: boolean
                    description: 'Determines whether email notifications related to purchases, contracts, and other activity in a client''s account are enabled.'
                  is_account_management_sms:
                    type: boolean
                    description: 'Determines whether SMS notifications related to purchases, contracts, and other activity in a client''s account are enabled.'
                  is_news_and_updates_email:
                    type: boolean
                    description: 'Determines whether email notifications related to news and updates from the business regarding their services, availability, and promotions are enabled.'
                  is_news_and_updates_sms:
                    type: boolean
                    description: 'Whether sms notifications related to news and updates from the business regarding their services, availability and promotions are enabled.'
                  is_schedule_and_reminders_email:
                    type: boolean
                    description: 'Determines whether email notifications related to the services a client has booked are enabled.'
                  is_schedule_and_reminders_sms:
                    type: boolean
                    description: 'Determines whether SMS notifications related to the services a client has booked are enabled.'
      tags:
        - Setting-Setting
  '/Wl/Profile/Activity/Element.json':
    get:
      summary: 'Retrieves information about activity item.'
      parameters:
        - name: k_login_activity
          in: query
          description: 'The key of the activity item represented by this endpoint.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_credit_score:
                    type: string[]
                    description: 'Messages with description what did user do to get account credits as reward points.'
                  a_reward_score:
                    type: string[]
                    description: 'Messages with description what did user do to get points.'
                  can_profile:
                    type: boolean
                    description: 'Verifies that current user can view the specified profile.'
                  dt_date_gmt:
                    type: string
                    description: 'The date of the activity in GMT.'
                  dt_date_local:
                    type: string
                    description: 'The date of the activity in the client''s time zone.'
                  html_message:
                    type: string
                    description: 'Description of the action, who and what did.'
                  i_credit_score:
                    type: number
                    format: int32
                    description: 'Total amount of account credits user got for {@link ElementApi::$k_login_activity}. This field is a copy of result of {@link \RsLoginActivity::reward()}.'
                  i_score:
                    type: number
                    format: int32
                    description: 'The total amount of rewards points the client received for the activity.'
                  i_spend:
                    type: number
                    format: int32
                    description: 'The rewards points used to redeem a prize.'
                  id_icon:
                    type: int|null
                    description: 'The ID of the icon that should be shown for this activity. One of {@link IconSid} constants. This will be `null` is no special icon for this activity.'
                  id_type:
                    type: number
                    format: int32
                    description: 'The ID of the activity item returned by this endpoint. One of {@link \RsLoginActivityTypeSid} constants.'
                  k_id:
                    type: string
                    description: 'Object ID, for example, class period ID for books and visits.'
                  s_message:
                    type: string
                    description: 'The description of the activity. This should include the nature of the activity and the people involved.'
                  url_link:
                    type: string
                    description: 'Link to share activity with social networks.'
      tags:
        - Activity-Element
  '/Wl/Profile/Activity/List.json':
    get:
      summary: 'Retrieves a list of activity items to show in user profile.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the client to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_activity:
                    type: string[]
                    description: 'An array listing client activities, where each activity is provided as an ID number. The order of items in this array is the order in which the elements should be displayed.'
      tags:
        - Activity-List
  '/Wl/Purchase/Receipt/PurchaseReceipt.json':
    get:
      summary: 'Gets purchase information.'
      parameters:
        - name: is_url_public
          in: query
          description: 'Whether {@link PurchaseReceiptApi::$url_print} and {@link PurchaseReceiptApi::$url_print_receipt} require authentication. If `true`, the URL contains a token that allows temporary access to the page without logging in. If ''false'', the page requires authentication.'
          schema:
            type: boolean
        - name: k_purchase
          in: query
          description: 'The key of the purchase.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_account_rest:
                    type: array
                    description: 'Information about the account balance for a user''s account after payment for the purchase. Every element has the following keys: <dl> <dt> string <var>m_amount</var> </dt> <dd> The account balance on the user''s account. </dd> <dt> string <var>text_currency</var> </dt> <dd> The currency of the amount. </dd> <dt> string <var>text_method</var> </dt> <dd> The payment method title. </dd> </dl>'
                  a_business:
                    type: array
                    description: 'Information about the business. <dl> <dt> array <var>a_logo</var> </dt> <dd> The business logo. <dl> <dt> int <var>i_height</var> </dt> <dd> The image height. </dd> <dt> int <var>i_width</var> </dt> <dd> The image width. </dd> <dt> bool <var>is_empty</var> </dt> <dd> This will be `true` if the image is empty. Otherwise, this will be `false`. </dd> <dt> string <var>text_url</var> </dt> <dd> The URL of the image. </dd> </dl> </dd> <dt> string <var>text_address</var> </dt> <dd> The business''s address. </dd> <dt> string <var>text_mail</var> </dt> <dd> The business''s email address. </dd> <dt> string <var>text_phone</var> </dt> <dd> The business''s phone number. </dd> <dt> string <var>text_title</var> </dt> <dd> The business name. </dd> </dl>'
                  a_card:
                    type: array
                    description: 'Payment transaction information. Every element has the following keys: <dl> <dt> string <var>text_card_number</var> </dt> <dd> The card or account number. </dd> <dt> string <var>text_card_system</var> </dt> <dd> The card system name from {@link \ACardSystemSid}. </dd> <dt> string <var>text_title</var> </dt> <dd> The payment account title. This will be ''Account number'' for ACH, ''Card'' for all other cases. </dd> </dl>'
                  a_customer:
                    type: array
                    description: 'Information about the customer. <dl> <dt> string <var>text_address</var> </dt> <dd> The customer''s address. </dd> <dt> string <var>text_mail</var> </dt> <dd> The customer''s email address. </dd> <dt> string <var>text_name</var> </dt> <dd> The customer''s name. </dd> <dt> string <var>text_phone</var> </dt> <dd> The customer''s phone number. </dd> </dl>'
                  a_pay_method:
                    type: array
                    description: 'A list of payment methods for the current purchase. Every element has the following keys: <dl> <dt> string <var>m_amount</var> </dt> <dd> The amount of the payment. </dd> <dt> string <var>text_currency</var> </dt> <dd> The currency of the amount. </dd> <dt> string <var>text_pay_method</var> </dt> <dd> The payment method title. </dd> </dl>'
                  a_price:
                    type: array
                    description: 'Complete information about price information for the purchase. <dl> <dt> string <var>m_discount</var> </dt> <dd> The discount amount. </dd> <dt> string <var>m_discount_code</var> </dt> <dd> The discount amount for a discount code. </dd> <dt> string <var>m_sum</var> </dt> <dd> The subtotal amount (the sum of the prices). </dd> <dt> string <var>m_tax</var> </dt> <dd> The amount of taxes. </dd> <dt> string <var>m_tip</var> </dt> <dd> The amount of tips. </dd> <dt> string <var>m_total</var> </dt> <dd> The total amount. </dd> <dt> string <var>text_currency</var> </dt> <dd> The currency of the purchase. </dd> <dt> string <var>text_discount_code</var> </dt> <dd> The discount code applied to the purchase. </dd> </dl>'
                  a_purchase_item:
                    type: array[]
                    description: 'A list of purchase items. Every element has the following keys: <dl> <dt> array <var>a_logo</var> </dt> <dd> The purchase item logo. <dl> <dt> int <var>i_height</var> </dt> <dd> The image height. </dd> <dt> int <var>i_width</var> </dt> <dd> The image width. </dd> <dt> bool <var>is_empty</var> </dt> <dd> Determines whether the image is empty. </dd> <dt> string <var>text_url</var> </dt> <dd> The URL of the image. </dd> </dl> </dd> <dt> int <var>i_count</var> </dt> <dd> The number of items in the purchase. </dd> <dt> string <var>k_purchase_item</var> </dt> <dd> The key of the purchase item. </dd> <dt> string <var>m_price</var> </dt> <dd> The price of the single item. </dd> <dt> string <var>m_price_total</var> </dt> <dd> The price of all items. </dd> <dt> string <var>text_category</var> </dt> <dd> The type of the item (for example, a pass or membership). </dd> <dt> string <var>text_currency</var> </dt> <dd> The currency of the price. </dd> <dt> string <var>text_info</var> </dt> <dd> Additional information about the purchase item. </dd> <dt> string <var>text_title</var> </dt> <dd> The name of the purchase item. </dd> <dt> string <var>text_description</var> </dt> <dd> The description of the purchase item. </dd> <dt> string <var>url_print</var> </dt> <dd> The URL to print. Only available if the purchase item is a coupon (gift card). </dd> </dl>'
                  dtl_purchase:
                    type: string
                    description: 'The local date of the purchase in MySQL format.'
                  has_signature:
                    type: boolean
                    description: 'Determines whether the payment contained a signature.'
                  html_receipt:
                    type: string
                    description: 'HTML representation of the purchase receipt.'
                  text_purchase_id:
                    type: string
                    description: 'The normalized purchase ID.'
                  text_receipt:
                    type: string
                    description: 'The receipt text set in the store settings.'
                  url_print:
                    type: string
                    description: 'The URL for printing on a normal printer.'
                  url_print_receipt:
                    type: string
                    description: 'The URL for printing on a receipt printer.'
      tags:
        - Receipt-PurchaseReceipt
  '/Wl/Purchase/Mail/PurchaseMail.json':
    post:
      summary: 'Sends mail message with list of purchased items for specified purchase.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_send_force:
                  type: boolean
                  description: 'Determines whether mail sending should be forced.'
                k_purchase:
                  type: string
                  description: 'The key of the purchase.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Mail-PurchaseMail
  '/Wl/Purchase/Share/PurchaseShare.json':
    post:
      summary: 'Saves data about share post the purchase to social network.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id_social:
                  type: number
                  format: int32
                  description: 'The social network. One of the {@link \ASocialSid} constants.'
                k_purchase:
                  type: string
                  description: 'The key of the purchase.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  url_share:
                    type: string
                    description: 'The URL to the sharing page.'
      tags:
        - Share-PurchaseShare
  '/Wl/Resource/Layout/Layout.json':
    get:
      summary: ''
      parameters:
        - name: k_resource_layout
          in: query
          description: 'The key of the layout.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_resource:
                    type: array[]
                    description: 'The list of assets. Every element contains the following keys: <dl> <dt> array <var>a_image</var> </dt> <dd> The asset''s appearance information. See {@link \RsResourceImage::data()} for details. </dd> <dt> int <var>i_cell_x</var> </dt> <dd> The vertical cell number. Not empty if assets are snapped to grid. </dd> <dt> int <var>i_cell_y</var> </dt> <dd> The horizontal cell number. Not empty if assets are snapped to grid. </dd> <dt> int <var>i_left</var> </dt> <dd> The horizontal offset in pixels. Not empty if assets aren''t snapped to grid. </dd> <dt> int <var>i_top</var> </dt> <dd> The vertical offset in pixels. Not empty if assets aren''t snapped to grid. </dd> <dt> int <var>i_index</var> </dt> <dd> Asset number. </dd> <dt> string <var>k_resource</var> </dt> <dd> The asset key. Primary key in {@link \RsResourceSql} table. </dd> <dt> string <var>s_name</var> </dt> <dd> Asset name. </dd> <dt> string <var>s_title</var> </dt> <dd> The asset title. </dd> </dl>'
                  a_shape_custom:
                    type: array[]
                    description: 'A list of custom shapes. Every element is an array with the following keys: <dl> <dt> float <var>f_height</var> </dt> <dd> The height for the shape {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::RECTANGLE}. Empty for other shapes. </dd> <dt> float <var>f_width</var> </dt> <dd> The width for the shape {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::RECTANGLE}. Empty for other shapes. </dd> <dt> int <var>i_degree_from</var> </dt> <dd> The start angle for the shape {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::PIE}. Empty for other shapes. </dd> <dt> int <var>i_degree_to</var> </dt> <dd> The start angle for shape {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::PIE}. Empty for other shapes. </dd> <dt> int <var>i_left</var> </dt> <dd> The position of the shape by horizontal axis. </dd> <dt> int <var>i_radius</var> </dt> <dd> The radius for shapes {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::PIE} and {@link \Wl\Resource\Layout\Shape\LayoutShapeSid::CIRCLE}. Empty for other shapes. </dd> <dt> int <var>i_top</var> </dt> <dd> The position of the shape by vertical axis. </dd> <dt> int <var>id_resource_layout_shape</var> </dt> <dd> The shape type ID. One of the {@link \Wl\Resource\Layout\Shape\LayoutShapeSid} constants. </dd> <dt> string <var>k_resource_layout_shape</var> </dt> <dd> The shape key. Primary key in {@link \Wl\Resource\Layout\Shape\Sql} table. </dd> <dt> string <var>s_color_background</var> </dt> <dd> The shape''s background color. </dd> <dt> string <var>s_color_foreground</var> </dt> <dd> The shape''s foreground color. </dd> <dt> string <var>s_text</var> </dt> <dd> The shape''s title. </dd> </dl>'
                  a_shape_icon:
                    type: array[]
                    description: 'A list of shapes and icons. Every element is an array with the following keys: <dl> <dt> int <var>i_cell_x</var> </dt> <dd> The cell number, positioned by the horizontal axis. Empty if grid is turned off. </dd> <dt> int <var>i_cell_y</var> </dt> <dd> The cell number, positioned by the vertical axis. Empty if grid is turned off. </dd> <dt> int <var>i_left</var> </dt> <dd> The horizontal position in pixels. Empty if grid is turned on. </dd> <dt> int <var>i_top</var> </dt> <dd> The vertical position in pixels. Empty if grid is turned on. </dd> <dt> int <var>id_shape_icon</var> </dt> <dd> The icon ID. One of the {@link ImageIconSid} constants. </dd> </dl>'
                  i_grid:
                    type: number
                    format: int32
                    description: 'The grid size.'
                  is_grid:
                    type: boolean
                    description: 'This will be `true` if snap to grid is enabled. Otherwise, this will be `false`.'
                  k_resource_type:
                    type: string
                    description: 'The key of the asset category.'
                  s_color_active:
                    type: string
                    description: 'The color for active assets. Hex encoding with prefix `#`.'
                  show_name:
                    type: boolean
                    description: 'This will be `true` if asset names are displayed. Otherwise, this will be `false`.'
                  show_number:
                    type: boolean
                    description: 'This will be `true` if asset numbers are displayed. Otherwise, this will be `false`.'
      tags:
        - Layout-Layout
  '/Wl/Appointment/Edit/AddonUpdate.json':
    get:
      summary: 'Return data about appointment''s add-ons.'
      parameters:
        - name: a_uid
          in: query
          description: 'List of user keys to get add-ons for. Not empty only when getting add-ons for new appointment ({@link AddonUpdateApi::$k_appointment} is null). User key ''-1'' means walk-in, user key ''0'' means new user (user will be created together with appointment).'
          schema:
            type: string[]
        - name: k_appointment
          in: query
          description: 'The appointment key.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'The business key. This will be an empty string if not set yet.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location key. Primary key in {@link \RsLocationSql} table. Not empty only when getting add-ons for new appointment ({@link AddonUpdateApi::$k_appointment} is null).'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'Service key. Primary key in {@link \RsServiceSql} table. Not empty only when getting add-ons for new appointment ({@link AddonUpdateApi::$k_appointment} is null).'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_addon_data:
                    type: array
                    description: 'Data to show appointment add-ons:<dl> <dt>array[] <var>a_addon</var></dt> <dd>Data about appointment add-ons. Each element contains data about a single add-on: <dl> <dt>string <var>html_amount</var></dt><dd>The add-on''s additional amount. This will be an empty string if the add-on doesn''t have an additional amount.</dd> <dt>string <var>html_duration</var></dt><dd>The add-on''s additional duration. This will be an empty string if the add-on doesn''t add duration.</dd> <dt>string <var>html_title</var></dt><dd>The add-on''s name.</dd> <dt>int <var>i_count_banked</var></dt><dd>The quantity purchased and not used for the add-on.</dd> <dt>int <var>i_count_paid</var></dt><dd>The quantity paid for the add-on.</dd> <dt>int <var>i_count_use</var></dt><dd>The quantity used in current appointment for the add-on.</dd> <dt>int <var>i_inventory_current</var></dt><dd>The add-ons inventory count.</dd> <dt>int <var>i_product</var></dt><dd>The add-on''s quantity.</dd> <dt>bool <var>is_select</var></dt><dd>Determines whether the add-on is added to appointment.</dd> <dt>bool <var>is_track</var></dt><dd>Whether product usage tracking for client.</dd> <dt>string <var>k_shop_product_option</var></dt><dd>The add-on product key. Primary key in {@link \RsShopProductOptionSql} table.</dd> <dt>string <var>url</var></dt><dd>The URL for the add-on picture. This will be an empty string if the add-on doesn''t have a picture.</dd> </dl></dd> <dt>array[] <var>a_addon_buy</var></dt> <dd>Contains appointment add-ons that have zero quantity, zero usage quantity and zero banked quantity.</dd> <dt>array[] <var>a_addon_own</var></dt> <dd>Contains appointment add-ons that have zero quantity, zero usage quantity and non-zero banked quantity.</dd> <dt>array[] <var>a_addon_select</var></dt> <dd>Contains appointment add-ons that have non-zero quantity or non-zero usage quantity.</dd> <dt>bool <var>is_addon_banking</var></dt> <dd>Whether at least one of appointment add-ons is bankable.</dd> <dt>bool <var>is_all_addon_selected</var></dt> <dd>Whether all appointment add-ons have non-zero quantity or non-zero usage quantity.</dd> <dt>bool <var>is_search</var></dt> <dd>Determines whether the add-on search field needs to be shown.</dd></dl>'
      tags:
        - Edit-AddonUpdate
    put:
      summary: 'Replacement addons for the appointment.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_addon:
                  type: array|array[]
                  description: 'The appointment addon-ons. Old format - an array where each value is key of the add-on. Primary key in {@link \RsShopProductOptionSql} table. New format - each element is an array: <dl> <dt>int <var>i_product</var></dt> <dd> The add-on count. Max value is 255.</dd> <dt>int [<var>i_use</var>]</dt> <dd> The add-on use count. Max value is 255. Not set means same value as add-on count.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The add-on key. Primary key in {@link \RsShopProductOptionSql} table.</dd> </dl>'
                is_duration_update:
                  type: boolean
                  description: 'Determines whether the appointment duration needs to be updated. When called from {@link rs_appointment_edit_save_change_trx()} duration already updated.'
                k_appointment:
                  type: string
                  description: 'The appointment key.'
                k_business:
                  type: string
                  description: 'The business key. This will be an empty string if not set yet.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Edit-AddonUpdate
  '/Wl/Book/Process/Process.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_family_relation_login_allow:
                    type: int[]|null
                    description: 'Relationships who clients are allowed to book for. One of the {@link \RsFamilyRelationSid} constants. This will be `null` if clients aren''t allowed to book for their relationships.'
                  a_path:
                    type: array[]
                    description: 'All the steps to be performed to make a booking. Every element has the next keys: <dl> <dt> int <var>id_book_process</var> </dt> <dd> The step ID. One of the {@link ProcessSpaSid} constants. </dd> <dt> bool [<var>is_current</var>] </dt> <dd> <tt>true</tt> - this item is current. <tt>false</tt> - this item isn''t current or not set yet. </dd> </dl>'
                  id_pay_require:
                    type: number
                    format: int32
                    description: 'The purchase rule ID. One of the {@link RequirePaySid} constants.'
                  is_age_require:
                    type: boolean
                    description: '`true` if this class has age restriction and requires user to specify age. `false` otherwise.'
                  is_card_authorize:
                    type: boolean
                    description: 'Determines if the client must authorize the credit card.'
                  is_event:
                    type: boolean
                    description: 'If `true`, the session being booked is an event. Otherwise, this will be `false`.'
                  is_family_relation_book:
                    type: boolean
                    description: 'Determines whether clients are allowed to book for their relationships without switching profiles.'
                  is_free:
                    type: boolean
                    description: 'Determines whether the class/event is free (price).'
                  is_have_ach:
                    type: boolean
                    description: '`true` if the client has an ach account, `false` otherwise.'
                  is_have_credit_card:
                    type: boolean
                    description: 'If `true`, the client has a credit card. Otherwise, this will be `false`.'
                  is_session:
                    type: boolean
                    description: '`true` - the client can select several sessions per booking. `false` - the client can''t select several sessions.'
                  is_wait:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list. Otherwise, this will be `false`.'
                  is_wait_list_unpaid:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list without payment, `false` otherwise.'
                  k_location:
                    type: string
                    description: 'The key of the location where the session is booked.'
      tags:
        - Process-Process
  '/Wl/Book/Process/Process59.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_family_relation_login_allow:
                    type: int[]|null
                    description: 'Relationships who clients are allowed to book for. One of the {@link \RsFamilyRelationSid} constants. This will be `null` if clients aren''t allowed to book for their relationships.'
                  a_path:
                    type: array[]
                    description: 'All the steps to be performed to make a booking. Every element has the next keys: <dl> <dt> int <var>id_book_process</var> </dt> <dd> The step ID. One of the {@link ProcessSpaSid} constants. </dd> <dt> bool [<var>is_current</var>] </dt> <dd> <tt>true</tt> - this item is current. <tt>false</tt> - this item isn''t current or not set yet. </dd> </dl>'
                  id_pay_require:
                    type: number
                    format: int32
                    description: 'The purchase rule ID. One of the {@link RequirePaySid} constants.'
                  is_age_require:
                    type: boolean
                    description: '`true` if this class has age restriction and requires user to specify age. `false` otherwise.'
                  is_card_authorize:
                    type: boolean
                    description: 'Determines if the client must authorize the credit card.'
                  is_event:
                    type: boolean
                    description: 'If `true`, the session being booked is an event. Otherwise, this will be `false`.'
                  is_family_relation_book:
                    type: boolean
                    description: 'Determines whether clients are allowed to book for their relationships without switching profiles.'
                  is_free:
                    type: boolean
                    description: 'Determines whether the class/event is free (price).'
                  is_have_ach:
                    type: boolean
                    description: '`true` if the client has an ach account, `false` otherwise.'
                  is_have_credit_card:
                    type: boolean
                    description: 'If `true`, the client has a credit card. Otherwise, this will be `false`.'
                  is_session:
                    type: boolean
                    description: '`true` - the client can select several sessions per booking. `false` - the client can''t select several sessions.'
                  is_wait:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list. Otherwise, this will be `false`.'
                  is_wait_list_unpaid:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list without payment, `false` otherwise.'
                  k_location:
                    type: string
                    description: 'The key of the location where the session is booked.'
      tags:
        - Process-Process59
  '/Wl/Book/Process/Process54.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_family_relation_login_allow:
                    type: int[]|null
                    description: 'Relationships who clients are allowed to book for. One of the {@link \RsFamilyRelationSid} constants. This will be `null` if clients aren''t allowed to book for their relationships.'
                  a_path:
                    type: array[]
                    description: 'All the steps to be performed to make a booking. Every element has the next keys: <dl> <dt> int <var>id_book_process</var> </dt> <dd> The step ID. One of the {@link ProcessSpaSid} constants. </dd> <dt> bool [<var>is_current</var>] </dt> <dd> <tt>true</tt> - this item is current. <tt>false</tt> - this item isn''t current or not set yet. </dd> </dl>'
                  id_pay_require:
                    type: number
                    format: int32
                    description: 'The purchase rule ID. One of the {@link RequirePaySid} constants.'
                  is_age_require:
                    type: boolean
                    description: '`true` if this class has age restriction and requires user to specify age. `false` otherwise.'
                  is_card_authorize:
                    type: boolean
                    description: 'Determines if the client must authorize the credit card.'
                  is_event:
                    type: boolean
                    description: 'If `true`, the session being booked is an event. Otherwise, this will be `false`.'
                  is_family_relation_book:
                    type: boolean
                    description: 'Determines whether clients are allowed to book for their relationships without switching profiles.'
                  is_free:
                    type: boolean
                    description: 'Determines whether the class/event is free (price).'
                  is_have_ach:
                    type: boolean
                    description: '`true` if the client has an ach account, `false` otherwise.'
                  is_have_credit_card:
                    type: boolean
                    description: 'If `true`, the client has a credit card. Otherwise, this will be `false`.'
                  is_session:
                    type: boolean
                    description: '`true` - the client can select several sessions per booking. `false` - the client can''t select several sessions.'
                  is_wait:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list. Otherwise, this will be `false`.'
                  is_wait_list_unpaid:
                    type: boolean
                    description: 'If `true`, the user can be placed on a wait list without payment, `false` otherwise.'
                  k_location:
                    type: string
                    description: 'The key of the location where the session is booked.'
      tags:
        - Process-Process54
  '/Wl/Business/Account/BusinessAccount.json':
    get:
      summary: 'Generates list of active business keys for the same region as the requesting user (proper permissions required).'
      parameters:
        - name: is_prospects
          in: query
          description: '`true` returns WellnessLiving customers. `false` returns prospects. Test and churned businesses are never returned.'
          schema:
            type: boolean
        - name: is_published
          in: query
          description: 'Specifies if only businesses having published locations should be returned.'
          schema:
            type: boolean
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_keys:
                    type: string[]
                    description: 'A list of business keys.'
      tags:
        - Account-BusinessAccount
  '/Wl/Business/Config/BusinessConfig.json':
    get:
      summary: 'Gets information about a business config.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_policy:
                    type: array
                    description: 'All business policies connected to clients and bookings. <dl> <dt>int <var>a_wait_service</var></dt> <dd>The keys are listed as IDs from {@link \RsServiceSid}, and values are flags outlining whether wait listing is allowed.</dd> <dt>int <var>i_book_before</var></dt> <dd>The minimum hours|days|months before a class can be booked.</dd> <dt>int <var>i_book_future</var></dt> <dd>The maximum hours|days|months after a class can be booked.</dd> <dt>int <var>i_cancel</var></dt> <dd>The minimum hours|days|months before a class can be canceled without penalty.</dd> <dt>int <var>i_promote</var></dt> <dd>The minimum hours|days|months before a class can be promoted from a wait list.</dd> <dt>int <var>i_reattempt_count</var></dt> <dd>The number of failed auto-payment reattempts.</dd> <dt>int <var>id_book_before</var></dt> <dd>The hours|days|months from {@link \ADurationSid}.</dd> <dt>int <var>id_book_future</var></dt> <dd>The hours|days|months from {@link \ADurationSid}.</dd> <dt>int <var>id_cancel</var></dt> <dd>The hours|days|months from {@link \ADurationSid}.</dd> <dt>int <var>id_promote</var></dt> <dd>The hours|days|months from {@link \ADurationSid}.</dd> <dt>bool <var>is_book_inside_active_pay_period</var></dt> <dd> `true` - clients with Purchase Options are only allowed to book sessions within their current paid period.<br> `false` - clients with Purchase Options are only allowed to book sessions during the Purchase Option''s duration. </dd> <dt>int <var>is_disable_promotion</var></dt> <dd> If `true`, a client''s automatic payment fails, their account shouldn''t be debited, and their Purchase Option becomes inactive. Otherwise, this will be `false` (the default value). </dd> <dt>bool <var>is_enable_payment_penalty</var></dt> <dd>Determines whether to charge a penalty after the final auto-payment attempt.</dd> <dt>bool <var>is_enable_payment_reattempt</var></dt> <dd>Determines whether to reattempt failed auto-payments.</dd> <dt>bool <var>is_enable_staff_ip_restriction</var></dt> <dd>Determines whether to restrict which IP addresses staff can login from.</dd> <dt>int <var>is_prevent_booking</var></dt> <dd>If `true`, booking for a client with negative balance is disabled. Otherwise, this will be `false` (the default value).</dd> <dt>bool <var>is_staff_restrict</var></dt> <dd>If true, clients can''t choose a provider in the appointment wizard. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait</var></dt> <dd>Determines whether to enable or disable the wait list.</dd> <dt>int <var>k_currency</var></dt> <dd>The currency.</dd> <dt>int <var>k_timezone</var></dt> <dd>The time zone.</dd> <dt>string <var>m_payment_penalty</var></dt> <dd>The penalty amount to charge after the final auto-payment attempt.</dd> <dt>string <var>url_custom</var></dt> <dd>The custom URL from Business URLs.</dd> </dl>'
                  is_location_select:
                    type: boolean
                    description: 'Determines whether staff members should select a location at checkout. If `true`, staff members should select a location at checkout. Otherwise, this will be `false`.'
                  is_white_label:
                    type: boolean
                    description: 'Determines whether the business has white label setting enabled in the admin settings. If `true`, admin settings are enabled. Otherwise, this will be `false`.'
      tags:
        - Config-BusinessConfig
  '/Wl/Business/AmazonRegion/AmazonRegion.json':
    get:
      summary: ''
      parameters:
        - name: a_business
          in: query
          description: 'List of business key.'
          schema:
            type: string[]
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_region:
                    type: int[]
                    description: 'List of region IDs for {@link AmazonRegionApi::$a_business}. Key - is business key. Primary key in {@link \RsBusinessSql} table. Value - is region ID. One of {@link AmazonRegionSid} constants. `0` if this business is form an unknown region.'
      tags:
        - AmazonRegion-AmazonRegion
  '/Wl/Business/Partner/PartnerSettings.json':
    get:
      summary: 'Updates partner url for a business that takes part in the partner program.'
      parameters:
        - name: text_code
          in: query
          description: 'The unique code that a business can provide other businesses to tell them about system.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_business_tour:
                    type: number
                    format: int32
                    description: 'The homepage tour of the business, which depends on the type.'
                  k_business:
                    type: string
                    description: 'The business key.'
                  text_name_first:
                    type: string
                    description: 'The first name of the business representative.'
                  text_name_last:
                    type: string
                    description: 'The last name of the business representative.'
                  text_position:
                    type: string
                    description: 'The job title of the business representative.'
                  text_review:
                    type: string
                    description: 'The text of the review about the WellnessLiving system.'
                  url_photo:
                    type: string|null
                    description: 'A link to the photo of the business representative. `null` in case when image is not uploaded.'
      tags:
        - Partner-PartnerSettings
  '/Wl/Business/Select/BusinessSelect.json':
    get:
      summary: 'Performs checks and generates a list of businesses according to a given configuration.'
      parameters:
        - name: a_config
          in: query
          description: 'Configuration data used to determine the list of businesses returned. This array has the following keys: <dl> <dt>bool <var>is_role</var></dt> <dd>This will be `true` if we are checking for businesses where the user is a staff member. This will be `false` if we are checking for businesses where the user is a client.</dd> <dt>string <var>[k_business]</var></dt> <dd>The business key.</dd> </dl>'
          schema:
            type: array
        - name: k_business
          in: query
          description: 'Business in which a list of business is requested. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User who is requesting the list of businesses. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_select:
                    type: array
                    description: 'Business list with additional parameters for a business select HTML component. This array contains the following keys and values. <dl> <dt>array <var>a_business</var></dt> <dd>List of businesses the user can access. It is an array, each value is an array with the following keys:<dl> <dt>string <var>k_business</var></dt> <dd>The key of the business.</dd> <dt>string <var>s_title</var></dt> <dd>The name of the business.</dd> <dt>bool <var>selected</var></dt> <dd>This will be true for the current business.</dd> </dl></dd> <dt>string <var>is_select</var></dt> <dd>This will be `true` if one of the listed businesses is selected.</dd> <dt>string <var>name<var></dt> <dd>Information for the widget, the name of the key in the list. This should always be `k_business`.</dd> <dt>string <var>onchange</var></dt> <dd>Information for the widget, what the widget will do on selection.</dd> <dt>string <var>s_id</var></dt> <dd>Information for the widget, the widget instance ID.</dd> <dt>string <var>s_style</var></dt> <dd>Information for the widget, any additional CSS to apply.</dd> </dl>'
      tags:
        - Select-BusinessSelect
  '/Wl/Business/Design/BusinessDesign.json':
    get:
      summary: 'API method to get business design data.'
      parameters:
        - name: k_business
          in: query
          description: 'Business key to get design data. May be <tt>null</tt>. In this case default business design data is returned.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_data:
                    type: array
                    description: 'Design data for a business. Contains the following keys: <dl> <dt>int <var>id_layout</var></dt> <dd>Layout ID. For more details, see {@link \RsPageFrontendHeaderLayoutSid}.</dd> <dt>int <var>id_logo_position</var></dt> <dd>Logo position ID. For more details, see {@link \RsBusinessDesignLogoPositionSid}.</dd> <dt>int <var>id_logo_style</var></dt> <dd>Logo style ID. For more details, see {@link \RsBusinessDesignLogoStyleSid}.</dd> <dt>bool <var>is_attend_self</var></dt> <dd>If <tt>true</tt> clients can check-in using the Client Web App and Achieve Web App.</dd> <dt>bool <var>is_appointment_capacity</var></dt> <dd>If <tt>true</tt> the capacity and number of clients signed up to the appointment will be shown.</dd> <dt>bool <var>is_class_capacity</var></dt> <dd>If <tt>true</tt> the capacity and number of clients signed up to the class will be shown.</dd> <dt>bool <var>is_class_quick</var></dt> <dd>If <tt>true</tt>, the quick class filter will be shown.</dd> <dt>bool <var>is_show_name</var></dt> <dd>If <tt>true</tt>, the business name will be shown.</dd> <dt>string <var>s_color_background</var></dt> <dd>Background color of frontend.</dd> <dt>string <var>s_color_header</var></dt> <dd>Header color of frontend menu.</dd> <dt>string <var>s_color_menu_border</var></dt> <dd>Border color of frontend menu.</dd> <dt>string <var>s_color_menu_element</var></dt> <dd>Menu element color</dd> <dt>string <var>s_color_menu_hover</var></dt> <dd>Hover colour of front end menu.</dd> <dt>string <var>s_color_menu_hover_background</var></dt> <dd>Background hover color of front end menu.</dd> <dt>string <var>s_color_menu_press</var></dt> <dd>Press colour of front end menu.</dd> <dt>string <var>s_color_submenu</var></dt> <dd>Submenu colour of front end menu.</dd> <dt>string <var>s_color_submenu_element</var></dt> <dd>Submenu element color of front end menu.</dd> <dt>string <var>s_color_submenu_hover</var></dt> <dd>Hover color of submenu of front end menu</dd> <dt>string <var>s_color_submenu_press</var></dt> <dd>Press color of submenu in front end menu.</dd> <dt>string <var>s_fb_pixel_id</var></dt> <dd>Facebook Pixel ID. Used for Facebook analytics tracking. Empty string if tracking is disabled.</dd> <dt>string <var>s_ga_tracking_id</var></dt> <dd>Google Analytics Tracking ID. Used for Google Analytics tracking. Empty string if tracking is disabled.</dd> <dt>string <var>s_gtm_container_id</var></dt> <dd>Google Tag Manager Container ID. Used for Google Analytics tracking. Empty string if tracking is disabled.</dd> <dt>string <var>s_url_background</var></dt> <dd>Path to the background image.</dd> </dl>'
      tags:
        - Design-BusinessDesign
  '/Wl/Business/Lead/BusinessLead.json':
    post:
      summary: 'Send emails to staff members of the partner business when a new lead comes in through his partnership.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business_partner:
                  type: string
                  description: 'The business''s partner key.'
                text_business_name:
                  type: string
                  description: 'The business''s name.'
                text_client_name:
                  type: string
                  description: 'The client''s full name.'
                text_email:
                  type: string
                  description: 'The client''s email.'
                text_phone:
                  type: string
                  description: 'The client''s phone number.'
                text_promo_code:
                  type: string
                  description: 'The business''s partner promo code.'
                url_website:
                  type: string
                  description: 'The website URL.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Lead-BusinessLead
  '/Wl/Business/Type/BusinessTypeList.json':
    get:
      summary: ''
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_type:
                    type: array[]
                    description: 'A list of business types. Each element has the next structure: <dl> <dt>array <var>a_image_list</var></dt> <dd>Images list for business types. Each element has the next structure:<dl> <dt>int <var>i_height</var></dt> <dd>Actual height of thumbnail image.</dd> <dt>int <var>i_height_src</var></dt> <dd>Height of original image.</dd> <dt>int <var>i_rotate</var></dt> <dd>Angle on which image was rotated compared to the original.</dd> <dt>int <var>i_width</var></dt> <dd>Actual width of thumbnail image.</dd> <dt>int <var>i_width_src</var></dt> <dd>Width of original image.</dd> <dt>bool <var>is_resize</var></dt> <dd>Whether thumbnail is a resized variant of original image. If set to `false`, value returned in <var>url_thumbnail</var> equals value in <var>url_view</var>.</dd> <dt>string <var>url_thumbnail</var></dt> <dd>Url to resized and rotated image in file storage. If size of original image is larger than specified by arguments, image thumbnail as created, and a link to this thumbnail is returned. Otherwise, link to original image is returned here.</dd> <dt>string <var>url_view</var></dt> <dd>Url to original image in file storage.</dd> </dl></dd> <dt>int <var>id_business_category</var></dt> <dd>The business category. One of the {@link \RsBusinessCategorySid} constants.</dd> <dt>int <var>id_tour</var></dt> <dd>Type of the demo tour on the sales site connected to the business type. More about tours: {@link \RsHomeTourSid}.</dd> <dt>string <var>k_business_type</var></dt> <dd>The key of business type. Primary key in the {@link \RsBusinessTypeSql} table.</dd> <dt>string <var>text_category</var></dt> <dd>The title of the business category.</dd> <dt>string <var>text_file</var></dt> <dd>System name of the business type.</dd> <dt>string <var>text_title</var></dt> <dd>The title of business type.</dd> </dl>'
      tags:
        - Type-BusinessTypeList
  '/Wl/Business/AuthorizePartner/AuthorizePartner.json':
    get:
      summary: 'Grants or denies access to business location for a partner.'
      parameters:
        - name: is_grant
          in: query
          description: 'Determines whether the user will be granted access or if access will be revoked. If `true`, access will be granted. If `false`, access will be revoked. Revoking access is a scheduled task set to be run within the next 15 minutes.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'The key of the franchisee location to enter.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user who will be granted access.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - AuthorizePartner-AuthorizePartner
  '/Wl/Coupon/CouponList/List.json':
    get:
      summary: 'Gets list of coupons.'
      parameters:
        - name: is_franchise
          in: query
          description: 'Whether to return franchisee-created coupons (if business is franchisor). <tt>true</tt> to include franchisee-created coupons.'
          schema:
            type: boolean
        - name: is_frontend
          in: query
          description: '`true` to get only gift cards available for current user; `false` to get all gift cards.'
          schema:
            type: boolean
        - name: is_inactive_include
          in: query
          description: 'A flag to include disabled items in the query result'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key to retrieve a list of all the gift cards in a business.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_coupon:
                    type: array
                    description: 'A list of gift cards. Every element has the following keys: <dl> <dt> int <var>id_type</var> </dt> <dd> The type of coupon. One of {@link \Wl\Coupon\TypeSid} constants. </dd> <dt> string <var>k_coupon</var> </dt> <dd> The gift card key. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the gift card. </dd> </dl>'
                  id_table:
                    type: number
                    format: int32
                    description: 'Class table ID.'
      tags:
        - CouponList-List
  '/Wl/Insurance/Catalog/ProgramList.json':
    get:
      summary: 'Get active Insurance programs.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the franchisee business.'
          schema:
            type: string
        - name: k_promotion
          in: query
          description: 'The key of the promotion.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_wellness_program:
                    type: array[]
                    description: 'A List of active programs. Every element has next keys: <dl> <dt>string <var>k_wellness_program</var></dt> <dd>The insurance key.</dd> <dt>string <var>m_price</var></dt> <dd>The Purchase Option price.</dd> <dt>string <var>text_insurance_organization</var></dt> <dd>The insurance organization name.</dd> <dt>string <var>text_partner</var></dt> <dd>The insurance partner name.</dd> <dt>string <var>text_program</var></dt> <dd>The insurance name.</dd> <dt>string <var>url_insurance_detail</var></dt> <dd>The insurance organization URL.</dd> </dl>'
      tags:
        - Catalog-ProgramList
  '/Wl/Integration/Curves/CurvesFranchiseLocation.json':
    get:
      summary: 'Returns country, region, state, city and location lists of the franchisor. This method returns all the information from the parent {@link \Wl\Business\Franchise\Location\BusinessFranchiseLocationApi::get()} and the Curves territory ID.'
      parameters:
        - name: id_business_franchise_location
          in: query
          description: 'Determines which locations should be returned. One of the {@link BusinessFranchiseLocationSid} constants. If `null`, {@link BusinessFranchiseLocationSid::ALL} is used.'
          schema:
            type: number
            format: int32
        - name: id_report
          in: query
          description: 'Determines the report for which data should be returned. One of the {@link \RsReportSid} constants. If `null`, the report isn''t set.'
          schema:
            type: number
            format: int32
        - name: is_include_churn
          in: query
          description: 'Determines whether to include churned/removed locations. If `true`, all locations are listed (regardless of their status).'
          schema:
            type: boolean
        - name: is_include_non_api
          in: query
          description: 'Determines whether to include locations marked to not be displayed on franchisor website. If `true`, all locations are listed (regardless of this setting).'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_city_list:
                    type: array[]
                    description: 'The city list. Each element has next structure: <dl> <dt> string <var>k_city</var> </dt> <dd> City key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> City title. </dd> </dl>'
                  a_country_list:
                    type: array[]
                    description: 'The country list. Each element has next structure: <dl> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Country title. </dd> </dl>'
                  a_location_list:
                    type: array[]
                    description: 'The location list. Each element has the next structure: <dl> <dt> int <var>id_currency</var> </dt> <dd> Currency ID. One of {@link CurrencySid} constants. </dd> <dt> string <var>k_country</var> </dt> <dt> string <var>k_city</var> </dt> <dd> City key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> Location key. Primary key in the {@link \RsLocationSql} table. </dd> <dt> string <var>k_region</var> </dt> <dd> Franchise region key. Primary key in the {@link \Wl\Business\Franchise\Region\RegionSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Location title. </dd> </dl>'
                  a_region_list:
                    type: array[]
                    description: 'The region list. Each element has the next structure: <dl> <dt> string <var>k_region</var> </dt> <dd> Franchise region key. Primary key in the {@link \Wl\Business\Franchise\Region\RegionSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Franchise region title. </dd> </dl>'
                  a_state_list:
                    type: array[]
                    description: 'The state list. Each element has the next structure: <dl> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> State title. </dd> </dl>'
      tags:
        - Curves-CurvesFranchiseLocation
  '/Wl/Integration/Autymate/Report.json':
    get:
      summary: 'Gets the daily transaction data.'
      parameters:
        - name: a_pay_method_remove
          in: query
          description: 'List of payment methods to filter out in the report. Each element is one of the {@link \RsPayMethodSid} constants.'
          schema:
            type: int[]
        - name: dl_date
          in: query
          description: 'The date in local time to retrieve transactions for.'
          schema:
            type: string
        - name: i_page
          in: query
          description: 'The page of the report, starting from 0. Each page will contain a maximum of {@link \Wl\Integration\Autymate\ReportApi::LIMIT} rows.'
          schema:
            type: number
            format: int32
        - name: is_refresh
          in: query
          description: 'Determines whether this report should be refreshed. `true` to refresh this report if it''s already generated. Refreshing of the report may not be queried while report is being generated. `false` to only return contents of the report. If report isn''t yet generated, it automatically starts the generation in the background.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business for which the report must be generated.'
          schema:
            type: string
        - name: s_guid
          in: query
          description: 'The randomly generated 32 character string used to authenticate requests.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field:
                    type: string[]
                    description: 'The list of fields in this report. This array is effectively a title row for table that is returned in {@link ReportApi::$a_row}.'
                  a_row:
                    type: string[][]
                    description: 'The report data. This is an indexed array in which one row is an indexed array also. Indexes of the columns correspond to columns in {@link \Wl\Integration\Autymate\ReportApi::$a_field}.'
                  a_warning:
                    type: string[]
                    description: 'The warning list of the report, if applicable.'
                  dtu_complete:
                    type: string|null
                    description: 'The date and time when this report has completed generation. `null` if generation of this report isn''t completed. See {@link \Thoth\ReportCore\Generator\ReportStorageListSql}.<tt>dtu_complete</tt> for additional details.'
                  dtu_queue:
                    type: string|null
                    description: 'The date and time when this report was put in the generation queue. Effectively, this is the time when a user clicked to view this report or the report for this day was first called. See {@link \Thoth\ReportCore\Generator\ReportStorageListSql}.<tt>dtu_queue</tt> for additional details.'
                  dtu_start:
                    type: string|null
                    description: 'The date and time when generation of this report was started. `null` if generation of this report hasn''t started. See {@link \Thoth\ReportCore\Generator\ReportStorageListSql}.<tt>dtu_start</tt> for additional details.'
                  id_report_status:
                    type: number
                    format: int32
                    description: 'The status of the report. One of the {@link \Wl\Report\Generator\ReportGeneratorStatusSid} constants.'
                  is_more:
                    type: boolean
                    description: 'If <tt>true</tt> then there are more report rows to get. Otherwise, <tt>false</tt> if all rows have been sent.'
                  is_report_complete:
                    type: boolean
                    description: 'Determines whether this report is complete. If this report is accessed on the current day, or is returning a result that was cached on the current day it could be incomplete as not all the transactions for the day are present. If `true` then this report will be complete. If `false` then this report could be incomplete.'
      tags:
        - Autymate-Report
  '/Wl/Integration/Autymate/AutymateActivate.json':
    get:
      summary: 'Changes the status of the Autymate enrollment. Autymate specifically requested this method be a get.'
      parameters:
        - name: id_mode
          in: query
          description: 'The mode of the request. One of {@link \Wl\Integration\Autymate\AutymateAccessModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: id_status
          in: query
          description: 'The new status of the enrollment. If `0`, the current status is returned. One of {@link \Wl\Integration\Autymate\AutymateStatusSid} constants.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of the business.'
          schema:
            type: string
        - name: s_guid
          in: query
          description: 'The randomly generated 32 character string used to authenticate Autymate requests for the business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_status:
                    type: number
                    format: int32
                    description: 'The new status of the enrollment. If `0`, the current status is returned. One of {@link \Wl\Integration\Autymate\AutymateStatusSid} constants.'
      tags:
        - Autymate-AutymateActivate
  '/Wl/Integration/DragonFly/Access.json':
    get:
      summary: 'Checks if the user can physically access the location. There are 3 scenarios where a user can be given access. Scenario 1 - If a valid member ID used, for instance from a bar code scanner, then the user may have access. Scenario 2 - If a valid uid is used and the user is a staff member, then the user may have access. Scenario 3 - If a valid uid is used and the client has a session or gym access at this location, then the user may have access.'
      parameters:
        - name: k_location
          in: query
          description: 'The location key. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: s_member
          in: query
          description: 'The member ID. Member ID is intended to work with barcode scanners. If this is specified the user key does not need to be set.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. This should be specified if the member ID is not set or not known. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_access:
                    type: boolean
                    description: 'Whether the specified user can access the location. `true` if the specified member can access the location. `false` if they can not.'
      tags:
        - DragonFly-Access
  '/Wl/Integration/Saml/SamlUserDeactivation.json':
    post:
      summary: 'Gets status of the user in business for given list of identifiers.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_id:
                  type: string[]
                  description: 'A list of SAML identifiers.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_result:
                    type: bool[]
                    description: 'The key of the SAML identifier. This value is `true` if an active user is found in the business, `false` if otherwise.'
      tags:
        - Saml-SamlUserDeactivation
  '/Wl/Login/Add/MailUseOk.json':
    post:
      summary: 'Registers existing user in current business. If user already member of current business then do nothing.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_lead:
                  type: boolean
                  description: 'This value is `true` if this user is a lead. `false` if otherwise.'
                k_business:
                  type: string
                  description: 'The business key used internally by WellnessLiving.'
                k_skin:
                  type: string
                  description: 'The Lead Capture Widget skin key. This is used only if a lead was added.'
                uid:
                  type: string
                  description: 'The user key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_error_list:
                    type: array
                    description: 'The list of fields with missing information. Each element is an array containing the following data: <dl> <dt> string <var>html_message</var> </dt> <dd> The error message. </dd> <dt> string <var>s_field</var> </dt> <dd> The name of the field missing information. Given in the format `k_field.name`. </dd> </dl>'
                  s_code:
                    type: string
                    description: 'The result code of the request.'
                  text_message:
                    type: string
                    description: 'The result message of the request.'
      tags:
        - Add-MailUseOk
  '/Wl/Login/Attendance/AttendanceInfo.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_local
          in: query
          description: 'Start date of the class in MySQL format in local time.'
          schema:
            type: string
        - name: k_appointment
          in: query
          description: 'ID of appointment to get information for. Primary key in {@link \RsAppointmentSql} table.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'ID of business to get information for. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'ID of class period to get information for. Primary key in {@link \RsClassPeriodSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment_visit_info:
                    type: array
                    description: 'Additional visit information about this appointment. Empty array if it''s not an appointment: <dl> <dt>bool <var>is_deny</var></dt> <dd>`true` means that appointment was requested and denied by the staff.</dd> <dt>bool <var>is_notify_request_accept</var></dt> <dd>`true` means that the client will receive a notification, if appointment will be confirmed by the staff.</dd> <dt>bool <var>is_notify_request_deny</var></dt> <dd>`true` means that the client will receive a notification, if appointment will be denied by the staff.</dd> <dt>bool <var>is_request</var></dt> <dd>`true` means that appointment was requested, but not confirmed by the staff.</dd> </dl>'
                  a_logo:
                    type: array
                    description: 'Service logo information: <dl> <dt> bool <var>is_empty</var> </dt> <dd> Whether service image is empty. </dd> <dt> string <var>s_url</var> </dt> <dd> Url link to image. </dd> </dl>'
                  a_purchase_option_default:
                    type: array
                    description: 'Default purchase option information. <dl> <dt>string? <var>id_sale</var></dt> <dd>The sale item type, one of the {@link \RsSaleSid} constants. This will be `null` if the class has no default Purchase Option, or it sets to "Drop-in rate".</dd> <dt>string? <var>k_id</var></dt> <dd>The default Purchase Option key. Primary key in {@link \RsPromotionSql} table. This will be `null` if the class has no default Purchase Option, or it sets to "Drop-in rate".</dd> <dt>bool <var>is_single_default</var></dt> <dd>If the default Purchase Option is set to "Drop-in rate" then the value will be `true`, `false` otherwise.</dd> </dl>'
                  a_resource:
                    type: string[]
                    description: 'Assets which are bound to this session. Primary keys on {@link \RsResourceSql} table.'
                  a_resource_layout:
                    type: array[]
                    description: 'Asset layouts of session: <dl> <dt> array <var>a_client</var> </dt> <dd> List of clients who occupy assets of class. It is a double nesting array. Keys - primary keys of assets. See {@link \RsResourceSql} table. Sub keys - asset index. Values - sub array with keys: <dl><dt>string <var>text_client</var></dt><dd>User''s name.</dd> <dt>string <var>uid</var></dt><dd>User''s primary key.</dd></dl> </dd> <dt> string[] <var>a_resource_available</var> </dt> <dd> Key of asset. Primary key in {@link \RsResourceSql} table. </dd> <dt> string <var>k_resource_layout</var> </dt> <dd> Key of layout. See table {@link \Wl\Resource\Layout\Sql}. </dd> <dt> string <var>text_resource_type</var> </dt> <dd> Title of asset category. </dd> </dl>'
                  a_staff:
                    type: array[]
                    description: 'List of staff members who provide service: <dl> <dt> array <var>a_logo</var> </dt> <dd> Data of staff member''s photo. Empty if staff has no photo. Otherwise contains next keys: <dl> <dt> int <var>i_height</var> </dt> <dd> Height in pixels. </dd> <dt> int <var>i_width</var> </dt> <dd> Width in pixels. </dd> <dt> string <var>url_logo</var> </dt> <dd> Image URL. </dd> </dl> </dd> <dt> string <var>k_staff</var> </dt> <dd> Staff key. Primary key in {@link \RsStaffSql}. </dd> <dt> string <var>html_firstname</var> </dt> <dd> Staff member''s first name. </dd> <dt> string <var>html_lastname</var> </dt> <dd> Staff member''s last name. </dd> </dl>'
                  dt_confirm:
                    type: string
                    description: 'Confirmation date+time of appointment in MySQL format. If client never confirmed, will be zero date + time.'
                  dt_date_global:
                    type: string
                    description: 'Start date of the session in MySQL format in GMT.'
                  dtl_end:
                    type: string
                    description: 'End date and time of the session in MySQL format in local timezone.'
                  dtu_end:
                    type: string
                    description: 'End date and time of the session in MySQL format in GMT.'
                  dtu_wait_promote:
                    type: string
                    description: 'Date and time in UTC when the visit is promoted from wait list to active list. Not empty for appointments.'
                  has_note:
                    type: boolean
                    description: 'Whether notes added to visit.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'Duration of the session in minutes.'
                  id_note:
                    type: int|false
                    description: 'Type of note. One of {@link \Wl\Visit\Note\Sid\NoteSid} constants. <tt>false</tt> if notes not allowed.'
                  id_service:
                    type: number
                    format: int32
                    description: 'Service type, one of {@link \RsServiceSid}.'
                  is_start_virtual_service:
                    type: boolean
                    description: 'Whether this service be carried out in Zoom. <tt>true</tt> - If the service can be carried out in Zoom. <tt>false</tt> - otherwise.'
                  k_class:
                    type: string
                    description: 'Class identifier, primary key in {@link \RsClassSql}. Not empty if service is class or event reservation.'
                  k_location:
                    type: string
                    description: 'Location identifier. Primary key in {@link \RsLocationSql}.'
                  k_resource:
                    type: string
                    description: 'Resource identifier. Primary key in {@link \RsResourceSql}. Not empty if service is asset reservation.'
                  k_service:
                    type: string
                    description: 'Service identifier. Primary key in {@link \RsServiceSql}. Not empty if service is appointment reservation.'
                  text_location:
                    type: string
                    description: 'Location name.'
                  text_time_end:
                    type: string
                    description: 'Time when service starts in format <tt>8:00AM</tt>.'
                  text_time_start:
                    type: string
                    description: 'Start time of the session in format ''9:30AM''.'
                  text_title:
                    type: string
                    description: 'Title of the appointment.'
                  url_booking:
                    type: string
                    description: 'URL that leads directly to the class/event booking page in the Client Web App. Empty string if the service is an appointment reservation.'
      tags:
        - Attendance-AttendanceInfo
  '/Wl/Login/Attendance/AttendanceList.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_local
          in: query
          description: 'The local date of the class or event session.'
          schema:
            type: string
        - name: is_purchase_info_return
          in: query
          description: 'If <tt>true</tt>, then return the purchase used to pay for session. Otherwise <tt>false</tt>, do not return any purchase information.'
          schema:
            type: boolean
        - name: k_appointment
          in: query
          description: 'The appointment key. Not used if requesting information for a class or event session.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The class period key. Not used if requesting information for an appointment.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list_active:
                    type: array[]
                    description: 'The list of clients in the active attendance list who haven''t confirmed or canceled. Each element is an array with the following fields: <dl> <dt>array <var>a_info</var></dt> <dd> Result of {@link MemberInfoView::dataPrepare()}. </dd> <dt>array <var>a_photo</var></dt> <dd> Information about the user''s photo. The information returned has the following structure: <dl> <dt>int <var>i_height</var></dt> <dd>The height of the photo.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the photo.</dd> <dt>string <var>is_empty</var></dt> <dd>This will be <tt>true</tt> if a photo hasn''t been set yet.</dd> <dt>string <var>s_url</var></dt> <dd>The URL of the photo.</dd> </dl> </dd> <dt>array <var>a_progress</var></dt> <dd>Information about a user''s current progress. By default, this information isn''t sent.</dd> <dt>array <var>a_quiz</var></dt> <dd>Quiz information that concerns current visit. See {@link \Wl\Quiz\Response\QuizResponse::visitQuizGet()}.</dd> <dt>array <var>a_resource</var></dt> <dd>A list of information for any associated resources for this visit.</dd> <dt>array <var>a_wait_confirm</var></dt> <dd>The list of visit keys for clients on the wait list.</dd> <dt>array <var>a_wearable</var></dt> <dd>A list of information pertaining to the client''s wearables.</dd> <dt>bool <var>can_profile</var></dt> <dd>If <tt>true</tt>, the current user can access this client profile.</dd> <dt>string <var>dt_book</var></dt> <dd>The date the session was booked, in UTC.</dd> <dt>string <var>dt_date</var></dt> <dd>The date of the session, in UTC.</dd> <dt>string <var>dt_expire</var></dt> <dd>The date the Purchase Option that was used will expire, in UTC.</dd> <dt>string <var>dt_register</var></dt> <dd>The date the client checked in for the visit, in UTC.</dd> <dt>string <var>html_age</var></dt> <dd>The client age.</dd> <dt>string <var>html_book_by</var></dt> <dd>The name of the person who booked this visit.</dd> <dt>string <var>html_gender_class</var></dt> <dd>The name of the icon to show under gender in the class attendance list.</dd> <dt>string <var>html_member</var></dt> <dd>The client''s member ID, if set.</dd> <dt>string <var>html_tooltip_book_by</var></dt> <dd>When and where this visit was booked, along with who booked it.</dd> <dt>int <var>i</var></dt> <dd>The default place in the list to show this client. This is a deprecated copy of the <tt>i_order</tt> field.</dd> <dt>int <var>i_left</var></dt> <dd>The number of visits left on this Purchase Option. This will be <tt>NULL</tt> if there''s no limit.</dd> <dt>int <var>i_order</var></dt> <dd>The default place in the list to show this client.</dd> <dt>int <var>i_total</var></dt> <dd>The total visits available from this Purchase Option.</dd> <dt>int <var>id_gender</var></dt> <dd>The gender ID of the client. One of the {@link \AGenderSid} constants.</dd> <dt>int <var>id_pass_prospect</var></dt> <dd>If this visit was paid for by an external system, this ID will be set. Otherwise, it will be <tt>0</tt>.</dd> <dt>int <var>id_program</var></dt> <dd>The program ID of the Purchase Option. One of the {@link \RsProgramSid} constants.</dd> <dt>int <var>id_visit</var></dt> <dd>The status of the visit. One of the {@link \Wl\Visit\VisitSid} constants.</dd> <dt>bool <var>is_attend</var></dt> <dd>This will be <tt>true</tt> if the client has attended the visit.</dd> <dt>bool <var>is_duration_pass</var></dt> <dd>This will be <tt>true</tt> if the Purchase Option used is a duration pass.</dd> <dt>bool <var>is_deposit</var></dt> <dd>This will be <tt>true</tt> if the client has paid a deposit for the visit.</dd> <dt>bool <var>is_early</var></dt> <dd>This will be <tt>true</tt> if the client has canceled the visit early, incurring no penalty. This will be <tt>false</tt> if canceled late or if not canceled at all. </dd> <dt>bool <var>is_free</var></dt> <dd>This will be <tt>true</tt> if the visit is free.</dd> <dt>bool <var>is_hidden</var></dt> <dd>This will be <tt>true</tt> if details on this visit should be hidden from staff members.</dd> <dt>bool <var>is_penalty</var></dt> <dd>This will be <tt>true</tt> if this visit was cancelled late and a penalty is applied.</dd> <dt>bool <var>is_promotion_first</var></dt> <dd>This will be <tt>true</tt> if this was the first visit for the Purchase Option used.</dd> <dt>bool <var>is_promotion_last</var></dt> <dd>This will be <tt>true</tt> if this was the latest visit for the Purchase Option used.</dd> <dt>bool <var>is_unlimited</var></dt> <dd>This will be <tt>true</tt> if the Purchase Option used has no usage limits.</dd> <dt>bool <var>is_visit</var></dt> <dd>This will be <tt>true</tt> if this visit is still considered valid. If visit was removed by the system or a staff member, this will be <tt>false</tt>.</dd> <dt>bool <var>is_wait</var></dt> <dd>This will be <tt>true</tt> if the visit is on the waiting list.</dd> <dt>bool <var>is_wait_confirm</var></dt> <dd>This will be <tt>true</tt> if the visit is awaiting confirmation.</dd> <dt>bool <var>is_wait_priority</var></dt> <dd>This will be <tt>true</tt> if the visit has priority on the wait list.</dd> <dt>string <var>k_location</var></dt> <dd>The key of the location.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The key of the client''s Purchase Option.</dd> <dt>string <var>k_visit</var></dt> <dd>The key of the visit.</dd> <dt>array <var>[o_purchase_item]</var></dt> <dd>The purchase used to pay for the session.</dd> <dt>string <var>s_expire</var></dt> <dd>The expiry information for the Purchase Option. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_firstname</var></dt> <dd>The client''s first name. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_lastname</var></dt> <dd>The client''s last name. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_note</var></dt> <dd>Any notes tied to the client. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_promotion</var></dt> <dd>The description of the type of Purchase Option. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>text_expire</var></dt> <dd>The expiry information for the Purchase Option.</dd> <dt>string <var>text_firstname</var></dt> <dd>The client first name.</dd> <dt>string <var>text_lastname</var></dt> <dd>The client last name.</dd> <dt>string <var>text_note</var></dt> <dd>Any notes tied to the client.</dd> <dt>string <var>text_promotion</var></dt> <dd>The description of the type of Purchase Option.</dd> <dt>string <var>text_restrict_title</var></dt> <dd>The Purchase Option restriction description. It can be empty string when the Purchase Option has no restrictions.</dd> <dt>string <var>text_visit_status_class</var></dt> <dd>The class visit status.</dd> <dt>string <var>text_visit_status_icon</var></dt> <dd>The icon to use for the class visit status.</dd> <dt>string <var>text_wearable</var></dt> <dd>The wearable device ID.</dd> <dt>string <var>uid</var></dt> <dd>The client user key.</dd> <dt>string <var>uid_book</var></dt> <dd> The key of the user who made the booking. If differing from <tt>uid</tt>, the booking could have been made by a staff or family member. </dd> <dt>string <var>url-cancel</var></dt> <dd>The URL that can be used to cancel the visit.</dd> <dt>string <var>url-cancel-admin</var></dt> <dd>The URL that can be used by an admin to cancel the visit.</dd> <dt>string <var>url-login-view</var></dt> <dd>The URL that for the user''s page.</dd> <dt>string <var>url-mail</var></dt> <dd>The URL to a page for sending an email to the client.</dd> <dt>string <var>url-profile</var></dt> <dd>The URL that for the client''s profile.</dd> </dl>'
                  a_list_confirm:
                    type: array[]
                    description: 'The list of clients who have confirmed their attendance. Has the same structure as {@link AttendanceListApi::$a_list_active} property.'
                  a_list_wait:
                    type: array[]
                    description: 'The list of clients who are on the wait list. Has the same structure as {@link AttendanceListApi::$a_list_active} property.'
                  i_capacity:
                    type: number
                    format: int32
                    description: 'The maximum capacity of the class or event session.'
                  i_client:
                    type: number
                    format: int32
                    description: 'Count client on the attendance.'
                  i_wait_list_limit:
                    type: number
                    format: int32
                    description: 'The maximum number of clients on wait list of the class or event session. `0` for appointments, use {@link AppointmentWaitListApi} instead.'
                  is_wait_list_limit:
                    type: boolean
                    description: '`true` to use class/event specific wait list limit, `false` to use the limit from default policies. `false` for appointments. Use {@link AppointmentWaitListApi} instead.'
                  k_location:
                    type: string
                    description: 'The Location key.'
      tags:
        - Attendance-AttendanceList
  '/Wl/Login/Attendance/AttendanceInfoByToken.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_local
          in: query
          description: 'Start date of the class in MySQL format in local time.'
          schema:
            type: string
        - name: k_appointment
          in: query
          description: 'ID of appointment to get information for. Primary key in {@link \RsAppointmentSql} table.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'ID of business to get information for. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'ID of class period to get information for. Primary key in {@link \RsClassPeriodSql} table.'
          schema:
            type: string
        - name: text_token
          in: query
          description: 'The security token.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment_visit_info:
                    type: array
                    description: 'Additional visit information about this appointment. Empty array if it''s not an appointment: <dl> <dt>bool <var>is_deny</var></dt> <dd>`true` means that appointment was requested and denied by the staff.</dd> <dt>bool <var>is_notify_request_accept</var></dt> <dd>`true` means that the client will receive a notification, if appointment will be confirmed by the staff.</dd> <dt>bool <var>is_notify_request_deny</var></dt> <dd>`true` means that the client will receive a notification, if appointment will be denied by the staff.</dd> <dt>bool <var>is_request</var></dt> <dd>`true` means that appointment was requested, but not confirmed by the staff.</dd> </dl>'
                  a_logo:
                    type: array
                    description: 'Service logo information: <dl> <dt> bool <var>is_empty</var> </dt> <dd> Whether service image is empty. </dd> <dt> string <var>s_url</var> </dt> <dd> Url link to image. </dd> </dl>'
                  a_purchase_option_default:
                    type: array
                    description: 'Default purchase option information. <dl> <dt>string? <var>id_sale</var></dt> <dd>The sale item type, one of the {@link \RsSaleSid} constants. This will be `null` if the class has no default Purchase Option, or it sets to "Drop-in rate".</dd> <dt>string? <var>k_id</var></dt> <dd>The default Purchase Option key. Primary key in {@link \RsPromotionSql} table. This will be `null` if the class has no default Purchase Option, or it sets to "Drop-in rate".</dd> <dt>bool <var>is_single_default</var></dt> <dd>If the default Purchase Option is set to "Drop-in rate" then the value will be `true`, `false` otherwise.</dd> </dl>'
                  a_resource:
                    type: string[]
                    description: 'Assets which are bound to this session. Primary keys on {@link \RsResourceSql} table.'
                  a_resource_layout:
                    type: array[]
                    description: 'Asset layouts of session: <dl> <dt> array <var>a_client</var> </dt> <dd> List of clients who occupy assets of class. It is a double nesting array. Keys - primary keys of assets. See {@link \RsResourceSql} table. Sub keys - asset index. Values - sub array with keys: <dl><dt>string <var>text_client</var></dt><dd>User''s name.</dd> <dt>string <var>uid</var></dt><dd>User''s primary key.</dd></dl> </dd> <dt> string[] <var>a_resource_available</var> </dt> <dd> Key of asset. Primary key in {@link \RsResourceSql} table. </dd> <dt> string <var>k_resource_layout</var> </dt> <dd> Key of layout. See table {@link \Wl\Resource\Layout\Sql}. </dd> <dt> string <var>text_resource_type</var> </dt> <dd> Title of asset category. </dd> </dl>'
                  a_staff:
                    type: array[]
                    description: 'List of staff members who provide service: <dl> <dt> array <var>a_logo</var> </dt> <dd> Data of staff member''s photo. Empty if staff has no photo. Otherwise contains next keys: <dl> <dt> int <var>i_height</var> </dt> <dd> Height in pixels. </dd> <dt> int <var>i_width</var> </dt> <dd> Width in pixels. </dd> <dt> string <var>url_logo</var> </dt> <dd> Image URL. </dd> </dl> </dd> <dt> string <var>k_staff</var> </dt> <dd> Staff key. Primary key in {@link \RsStaffSql}. </dd> <dt> string <var>html_firstname</var> </dt> <dd> Staff member''s first name. </dd> <dt> string <var>html_lastname</var> </dt> <dd> Staff member''s last name. </dd> </dl>'
                  dt_confirm:
                    type: string
                    description: 'Confirmation date+time of appointment in MySQL format. If client never confirmed, will be zero date + time.'
                  dt_date_global:
                    type: string
                    description: 'Start date of the session in MySQL format in GMT.'
                  dtl_end:
                    type: string
                    description: 'End date and time of the session in MySQL format in local timezone.'
                  dtu_end:
                    type: string
                    description: 'End date and time of the session in MySQL format in GMT.'
                  dtu_wait_promote:
                    type: string
                    description: 'Date and time in UTC when the visit is promoted from wait list to active list. Not empty for appointments.'
                  has_note:
                    type: boolean
                    description: 'Whether notes added to visit.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'Duration of the session in minutes.'
                  id_note:
                    type: int|false
                    description: 'Type of note. One of {@link \Wl\Visit\Note\Sid\NoteSid} constants. <tt>false</tt> if notes not allowed.'
                  id_service:
                    type: number
                    format: int32
                    description: 'Service type, one of {@link \RsServiceSid}.'
                  is_start_virtual_service:
                    type: boolean
                    description: 'Whether this service be carried out in Zoom. <tt>true</tt> - If the service can be carried out in Zoom. <tt>false</tt> - otherwise.'
                  k_class:
                    type: string
                    description: 'Class identifier, primary key in {@link \RsClassSql}. Not empty if service is class or event reservation.'
                  k_location:
                    type: string
                    description: 'Location identifier. Primary key in {@link \RsLocationSql}.'
                  k_resource:
                    type: string
                    description: 'Resource identifier. Primary key in {@link \RsResourceSql}. Not empty if service is asset reservation.'
                  k_service:
                    type: string
                    description: 'Service identifier. Primary key in {@link \RsServiceSql}. Not empty if service is appointment reservation.'
                  text_location:
                    type: string
                    description: 'Location name.'
                  text_time_end:
                    type: string
                    description: 'Time when service starts in format <tt>8:00AM</tt>.'
                  text_time_start:
                    type: string
                    description: 'Start time of the session in format ''9:30AM''.'
                  text_title:
                    type: string
                    description: 'Title of the appointment.'
                  url_booking:
                    type: string
                    description: 'URL that leads directly to the class/event booking page in the Client Web App. Empty string if the service is an appointment reservation.'
      tags:
        - Attendance-AttendanceInfoByToken
  '/Wl/Login/Attendance/AttendanceListByToken.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_local
          in: query
          description: 'The local date of the class or event session.'
          schema:
            type: string
        - name: is_purchase_info_return
          in: query
          description: 'If <tt>true</tt>, then return the purchase used to pay for session. Otherwise <tt>false</tt>, do not return any purchase information.'
          schema:
            type: boolean
        - name: k_appointment
          in: query
          description: 'The appointment key. Not used if requesting information for a class or event session.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The class period key. Not used if requesting information for an appointment.'
          schema:
            type: string
        - name: text_token
          in: query
          description: 'The security token.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list_active:
                    type: array[]
                    description: 'The list of clients in the active attendance list who haven''t confirmed or canceled. Each element is an array with the following fields: <dl> <dt>array <var>a_info</var></dt> <dd> Result of {@link MemberInfoView::dataPrepare()}. </dd> <dt>array <var>a_photo</var></dt> <dd> Information about the user''s photo. The information returned has the following structure: <dl> <dt>int <var>i_height</var></dt> <dd>The height of the photo.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the photo.</dd> <dt>string <var>is_empty</var></dt> <dd>This will be <tt>true</tt> if a photo hasn''t been set yet.</dd> <dt>string <var>s_url</var></dt> <dd>The URL of the photo.</dd> </dl> </dd> <dt>array <var>a_progress</var></dt> <dd>Information about a user''s current progress. By default, this information isn''t sent.</dd> <dt>array <var>a_quiz</var></dt> <dd>Quiz information that concerns current visit. See {@link \Wl\Quiz\Response\QuizResponse::visitQuizGet()}.</dd> <dt>array <var>a_resource</var></dt> <dd>A list of information for any associated resources for this visit.</dd> <dt>array <var>a_wait_confirm</var></dt> <dd>The list of visit keys for clients on the wait list.</dd> <dt>array <var>a_wearable</var></dt> <dd>A list of information pertaining to the client''s wearables.</dd> <dt>bool <var>can_profile</var></dt> <dd>If <tt>true</tt>, the current user can access this client profile.</dd> <dt>string <var>dt_book</var></dt> <dd>The date the session was booked, in UTC.</dd> <dt>string <var>dt_date</var></dt> <dd>The date of the session, in UTC.</dd> <dt>string <var>dt_expire</var></dt> <dd>The date the Purchase Option that was used will expire, in UTC.</dd> <dt>string <var>dt_register</var></dt> <dd>The date the client checked in for the visit, in UTC.</dd> <dt>string <var>html_age</var></dt> <dd>The client age.</dd> <dt>string <var>html_book_by</var></dt> <dd>The name of the person who booked this visit.</dd> <dt>string <var>html_gender_class</var></dt> <dd>The name of the icon to show under gender in the class attendance list.</dd> <dt>string <var>html_member</var></dt> <dd>The client''s member ID, if set.</dd> <dt>string <var>html_tooltip_book_by</var></dt> <dd>When and where this visit was booked, along with who booked it.</dd> <dt>int <var>i</var></dt> <dd>The default place in the list to show this client. This is a deprecated copy of the <tt>i_order</tt> field.</dd> <dt>int <var>i_left</var></dt> <dd>The number of visits left on this Purchase Option. This will be <tt>NULL</tt> if there''s no limit.</dd> <dt>int <var>i_order</var></dt> <dd>The default place in the list to show this client.</dd> <dt>int <var>i_total</var></dt> <dd>The total visits available from this Purchase Option.</dd> <dt>int <var>id_gender</var></dt> <dd>The gender ID of the client. One of the {@link \AGenderSid} constants.</dd> <dt>int <var>id_pass_prospect</var></dt> <dd>If this visit was paid for by an external system, this ID will be set. Otherwise, it will be <tt>0</tt>.</dd> <dt>int <var>id_program</var></dt> <dd>The program ID of the Purchase Option. One of the {@link \RsProgramSid} constants.</dd> <dt>int <var>id_visit</var></dt> <dd>The status of the visit. One of the {@link \Wl\Visit\VisitSid} constants.</dd> <dt>bool <var>is_attend</var></dt> <dd>This will be <tt>true</tt> if the client has attended the visit.</dd> <dt>bool <var>is_duration_pass</var></dt> <dd>This will be <tt>true</tt> if the Purchase Option used is a duration pass.</dd> <dt>bool <var>is_deposit</var></dt> <dd>This will be <tt>true</tt> if the client has paid a deposit for the visit.</dd> <dt>bool <var>is_early</var></dt> <dd>This will be <tt>true</tt> if the client has canceled the visit early, incurring no penalty. This will be <tt>false</tt> if canceled late or if not canceled at all. </dd> <dt>bool <var>is_free</var></dt> <dd>This will be <tt>true</tt> if the visit is free.</dd> <dt>bool <var>is_hidden</var></dt> <dd>This will be <tt>true</tt> if details on this visit should be hidden from staff members.</dd> <dt>bool <var>is_penalty</var></dt> <dd>This will be <tt>true</tt> if this visit was cancelled late and a penalty is applied.</dd> <dt>bool <var>is_promotion_first</var></dt> <dd>This will be <tt>true</tt> if this was the first visit for the Purchase Option used.</dd> <dt>bool <var>is_promotion_last</var></dt> <dd>This will be <tt>true</tt> if this was the latest visit for the Purchase Option used.</dd> <dt>bool <var>is_unlimited</var></dt> <dd>This will be <tt>true</tt> if the Purchase Option used has no usage limits.</dd> <dt>bool <var>is_visit</var></dt> <dd>This will be <tt>true</tt> if this visit is still considered valid. If visit was removed by the system or a staff member, this will be <tt>false</tt>.</dd> <dt>bool <var>is_wait</var></dt> <dd>This will be <tt>true</tt> if the visit is on the waiting list.</dd> <dt>bool <var>is_wait_confirm</var></dt> <dd>This will be <tt>true</tt> if the visit is awaiting confirmation.</dd> <dt>bool <var>is_wait_priority</var></dt> <dd>This will be <tt>true</tt> if the visit has priority on the wait list.</dd> <dt>string <var>k_location</var></dt> <dd>The key of the location.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The key of the client''s Purchase Option.</dd> <dt>string <var>k_visit</var></dt> <dd>The key of the visit.</dd> <dt>array <var>[o_purchase_item]</var></dt> <dd>The purchase used to pay for the session.</dd> <dt>string <var>s_expire</var></dt> <dd>The expiry information for the Purchase Option. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_firstname</var></dt> <dd>The client''s first name. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_lastname</var></dt> <dd>The client''s last name. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_note</var></dt> <dd>Any notes tied to the client. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>s_promotion</var></dt> <dd>The description of the type of Purchase Option. This field is deprecated, use the text_ version instead.</dd> <dt>string <var>text_expire</var></dt> <dd>The expiry information for the Purchase Option.</dd> <dt>string <var>text_firstname</var></dt> <dd>The client first name.</dd> <dt>string <var>text_lastname</var></dt> <dd>The client last name.</dd> <dt>string <var>text_note</var></dt> <dd>Any notes tied to the client.</dd> <dt>string <var>text_promotion</var></dt> <dd>The description of the type of Purchase Option.</dd> <dt>string <var>text_restrict_title</var></dt> <dd>The Purchase Option restriction description. It can be empty string when the Purchase Option has no restrictions.</dd> <dt>string <var>text_visit_status_class</var></dt> <dd>The class visit status.</dd> <dt>string <var>text_visit_status_icon</var></dt> <dd>The icon to use for the class visit status.</dd> <dt>string <var>text_wearable</var></dt> <dd>The wearable device ID.</dd> <dt>string <var>uid</var></dt> <dd>The client user key.</dd> <dt>string <var>uid_book</var></dt> <dd> The key of the user who made the booking. If differing from <tt>uid</tt>, the booking could have been made by a staff or family member. </dd> <dt>string <var>url-cancel</var></dt> <dd>The URL that can be used to cancel the visit.</dd> <dt>string <var>url-cancel-admin</var></dt> <dd>The URL that can be used by an admin to cancel the visit.</dd> <dt>string <var>url-login-view</var></dt> <dd>The URL that for the user''s page.</dd> <dt>string <var>url-mail</var></dt> <dd>The URL to a page for sending an email to the client.</dd> <dt>string <var>url-profile</var></dt> <dd>The URL that for the client''s profile.</dd> </dl>'
                  a_list_confirm:
                    type: array[]
                    description: 'The list of clients who have confirmed their attendance. Has the same structure as {@link AttendanceListApi::$a_list_active} property.'
                  a_list_wait:
                    type: array[]
                    description: 'The list of clients who are on the wait list. Has the same structure as {@link AttendanceListApi::$a_list_active} property.'
                  i_capacity:
                    type: number
                    format: int32
                    description: 'The maximum capacity of the class or event session.'
                  i_client:
                    type: number
                    format: int32
                    description: 'Count client on the attendance.'
                  i_wait_list_limit:
                    type: number
                    format: int32
                    description: 'The maximum number of clients on wait list of the class or event session. `0` for appointments, use {@link AppointmentWaitListApi} instead.'
                  is_wait_list_limit:
                    type: boolean
                    description: '`true` to use class/event specific wait list limit, `false` to use the limit from default policies. `false` for appointments. Use {@link AppointmentWaitListApi} instead.'
                  k_location:
                    type: string
                    description: 'The Location key.'
      tags:
        - Attendance-AttendanceListByToken
  '/Wl/Login/Member/MemberValidate63.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_empty_fields_booking:
                    type: array
                    description: 'List of fields if the user has empty profile fields, which are required for booking.'
                  a_empty_fields_registration:
                    type: array
                    description: 'List of fields if the user has empty profile fields, which are required for registration.'
                  a_empty_fields_required:
                    type: array
                    description: 'List of fields if the user has empty profile fields, which are required.'
                  has_credit_card:
                    type: boolean
                    description: '`true` If the user has credit cards on profile, otherwise `false`.'
                  has_outstanding_contract:
                    type: boolean
                    description: '`true` if the user has an outstanding contract, otherwise `false`.'
                  has_outstanding_waiver:
                    type: boolean
                    description: '`true` If the user has an outstanding waiver for the business, otherwise `false`.'
                  has_pending_quizzes:
                    type: boolean
                    description: '`true` If the user has pending registration quizzes to complete, otherwise `false`.'
                  is_booking_require_card:
                    type: boolean
                    description: '`true` If the user has to provide credit card details before booking, otherwise `false`.'
                  is_register_require_card:
                    type: boolean
                    description: '`true` If the user has to provide credit card details to finish their registration, otherwise `false`.'
                  k_location:
                    type: string|null
                    description: 'Home user`s location. `null` if user has not home location.'
      tags:
        - Member-MemberValidate63
  '/Wl/Login/Member/MemberValidate.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_empty_fields_booking:
                    type: array
                    description: 'List of fields if the user has empty profile fields, which are required for booking.'
                  a_empty_fields_registration:
                    type: array
                    description: 'List of fields if the user has empty profile fields, which are required for registration.'
                  has_credit_card:
                    type: boolean
                    description: '`true` If the user has credit cards on profile, otherwise `false`.'
                  has_outstanding_contract:
                    type: boolean
                    description: '`true` if the user has an outstanding contract, otherwise `false`.'
                  has_outstanding_waiver:
                    type: boolean
                    description: '`true` If the user has an outstanding waiver for the business, otherwise `false`.'
                  has_pending_quizzes:
                    type: boolean
                    description: '`true` If the user has pending registration quizzes to complete, otherwise `false`.'
                  is_booking_require_card:
                    type: boolean
                    description: '`true` If the user has to provide credit card details before booking, otherwise `false`.'
                  is_register_require_card:
                    type: boolean
                    description: '`true` If the user has to provide credit card details to finish their registration, otherwise `false`.'
                  k_location:
                    type: string|null
                    description: 'Home user`s location. `null` if user has not home location.'
      tags:
        - Member-MemberValidate
  '/Wl/Login/Member/Member.json':
    get:
      summary: ''
      parameters:
        - name: uid
          in: query
          description: 'The user''s key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business:
                    type: array[]
                    description: 'A list of businesses where the client is present. Every element is an array with the following keys: <dl> <dt> bool <var>can_enter</var> </dt> <dd> <tt>true</tt> if user is allowed to sign in into this business; <tt>false</tt> otherwise. This value is based on {@link LoginDisableSql} table. </dd> <dt> bool <var>is_franchisee</var> </dt> <dd> If `true`, then the business is a franchisee. Otherwise, this will be `false`. </dd> <dt> bool <var>is_franchisor</var> </dt> <dd> If `true`, then the business is a franchisor. Otherwise, this will be `false`. </dd> <dt> string <var>k_business</var> </dt> <dd> The business key. Primary key in {@link \RsBusinessSql} table. </dd> <dt> string <var>k_business_franchisor</var> </dt> <dd> The business key of the Enterprise Headquarters account (if applicable). Primary key in {@link \RsBusinessSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the business. </dd> </dl>'
      tags:
        - Member-Member
  '/Wl/Login/Promotion/PromotionPayPause.json':
    delete:
      summary: 'Deletes specified promotion payment pause.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string|null
                  description: 'Key of business to which currently handled pause period or login promotion belongs. <tt>null</tt> if not initialized.'
                k_login_promotion:
                  type: string|null
                  description: 'The Purchase Option key. If this key is used, a new hold will be created. The endpoint will return a `start-cross` status code if a hold is already in place. Ignored if {@link PromotionPayPauseApi::$k_promotion_pay_pause} is provided. `null` if not yet initialized.'
                k_promotion_pay_pause:
                  type: string|null
                  description: 'The promotion payment hold key. If this key is used, it will edit an existing hold. This key will be empty if there''s no active hold in place or if a scheduled hold isn''t in effect. `null` if not yet initialized or if the request is based on {@link PromotionPayPauseApi::$k_login_promotion}.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Promotion-PromotionPayPause
    get:
      summary: 'Returns requested promotion payment pause period if {@link $k_promotion_pay_pause} is provided, or loads currently active pause period if only {@link $k_login_promotion} is provided.'
      parameters:
        - name: dt_end
          in: query
          description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
          schema:
            type: string|null
        - name: dt_start
          in: query
          description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
          schema:
            type: string|null
        - name: is_list
          in: query
          description: 'Whether need to get all pause periods for the login promotion. If <tt>true</tt> then {@link PromotionPayPauseApi::$a_pay_pause_list} will be returned. If <tt>false</tt> then information about specified {@link PromotionPayPauseApi::$k_promotion_pay_pause} or currently active pause period will be returned ({@link PromotionPayPauseApi::$dt_start}, {@link PromotionPayPauseApi::$dt_end} and {@link PromotionPayPauseApi::$text_note}).'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Key of business to which currently handled pause period or login promotion belongs. <tt>null</tt> if not initialized.'
          schema:
            type: string|null
        - name: k_login_promotion
          in: query
          description: 'The Purchase Option key. If this key is used, a new hold will be created. The endpoint will return a `start-cross` status code if a hold is already in place. Ignored if {@link PromotionPayPauseApi::$k_promotion_pay_pause} is provided. `null` if not yet initialized.'
          schema:
            type: string|null
        - name: k_promotion_pay_pause
          in: query
          description: 'The promotion payment hold key. If this key is used, it will edit an existing hold. This key will be empty if there''s no active hold in place or if a scheduled hold isn''t in effect. `null` if not yet initialized or if the request is based on {@link PromotionPayPauseApi::$k_login_promotion}.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_pay_pause_list:
                    type: array[]|null
                    description: 'List of all promotion payment pause periods. Each element has next structure:<dl> <dt>string|null <var>dl_create</var></dt> <dd>Date when this hold period was created. <tt>null</tt> for old records.</dd> <dt>string <var>dl_end</var></dt> <dd> Ending date of the pause (inclusively - this date is paused). This field contains zero date for promotions placed on hold indefinitely. </dd> <dt>string <var>dl_start</var></dt> <dd>Starting date of the pause (inclusively - this date is paused).</dd> <dt>int|null <var>i_hold_day</var></dt> <dd>Duration of the hold in days. <tt>null</tt> if the hold is ongoing.</dd> <dt>bool <var>is_past</var></dt> <dd>Whether the hold is in past.</dd> <dt>string <var>k_promotion_pay_pause</var></dt> <dd>Key of the hold period. Primary key in the {@link \RsPromotionPayPauseSql} table.</dd> <dt>string|null <var>text_note</var></dt> <dd>Additional notes.</dd> <dt>string|null <var>text_user_create</var></dt> <dd>Full name of a user that has created hold period. <tt>null</tt> for old records.</dd> <dt>string|null <var>uid_create</var></dt> <dd>Key of a user that has created hold period. <tt>null</tt> for old records.</dd> </dl> <tt>null</tt> if {@link PromotionPayPauseApi::$is_list} is false.'
                  dt_end:
                    type: string|null
                    description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
                  dt_start:
                    type: string|null
                    description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
                  text_note:
                    type: string|null
                    description: 'Additional notes for the promotion payment pause period. Leave this field as `null` if the note shouldn''t be updated. `null` if it shouldn''t be updated.'
      tags:
        - Promotion-PromotionPayPause
    post:
      summary: 'Adds or updates a payment pause period for promotion.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_end:
                  type: string|null
                  description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
                dt_start:
                  type: string|null
                  description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
                k_business:
                  type: string|null
                  description: 'Key of business to which currently handled pause period or login promotion belongs. <tt>null</tt> if not initialized.'
                k_login_promotion:
                  type: string|null
                  description: 'The Purchase Option key. If this key is used, a new hold will be created. The endpoint will return a `start-cross` status code if a hold is already in place. Ignored if {@link PromotionPayPauseApi::$k_promotion_pay_pause} is provided. `null` if not yet initialized.'
                k_promotion_pay_pause:
                  type: string|null
                  description: 'The promotion payment hold key. If this key is used, it will edit an existing hold. This key will be empty if there''s no active hold in place or if a scheduled hold isn''t in effect. `null` if not yet initialized or if the request is based on {@link PromotionPayPauseApi::$k_login_promotion}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dt_end:
                    type: string|null
                    description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
                  dt_start:
                    type: string|null
                    description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
                  text_note:
                    type: string|null
                    description: 'Additional notes for the promotion payment pause period. Leave this field as `null` if the note shouldn''t be updated. `null` if it shouldn''t be updated.'
      tags:
        - Promotion-PromotionPayPause
    put:
      summary: 'Updates a promotion payment pause period.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_end:
                  type: string|null
                  description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
                dt_start:
                  type: string|null
                  description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
                k_business:
                  type: string|null
                  description: 'Key of business to which currently handled pause period or login promotion belongs. <tt>null</tt> if not initialized.'
                k_promotion_pay_pause:
                  type: string|null
                  description: 'The promotion payment hold key. If this key is used, it will edit an existing hold. This key will be empty if there''s no active hold in place or if a scheduled hold isn''t in effect. `null` if not yet initialized or if the request is based on {@link PromotionPayPauseApi::$k_login_promotion}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  dt_end:
                    type: string|null
                    description: 'The end date of the current hold, in the local time zone. This can be set to a special value to make the period indefinite until further action. See {@link \Wl\Promotion\Pay\PromotionPayPause::DATE_END_INDEFINITE}. `null` if it shouldn''t be updated.'
                  dt_start:
                    type: string|null
                    description: 'The start date of the current hold, in the local time zone. `null` if it shouldn''t be updated.'
                  text_note:
                    type: string|null
                    description: 'Additional notes for the promotion payment pause period. Leave this field as `null` if the note shouldn''t be updated. `null` if it shouldn''t be updated.'
      tags:
        - Promotion-PromotionPayPause
  '/Wl/Login/Search/Concerto.json':
    get:
      summary: 'Finds a user by they email or phone.'
      parameters:
        - name: k_business
          in: query
          description: 'Business to search user in. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: text_mail
          in: query
          description: 'Email to search.'
          schema:
            type: string
        - name: text_phone
          in: query
          description: 'Phone to search.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    description: 'User''s primary key in {@link \PassportLoginSql} table.'
      tags:
        - Search-Concerto
  '/Wl/Login/Type/LoginType.json':
    get:
      summary: 'Gets a login types list of a business.'
      parameters:
        - name: is_franchisor
          in: query
          description: 'If `true`, this `k_business` is a franchisor, and login types of all franchisees should be returned.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key used internally by WellnessLiving.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_type_list:
                    type: array[]
                    description: 'A list of login types, keys, and information. Each element is an array with the following information: <dl> <dt>bool <var>id_client_type</var></dt> <dd>Client Type ID. One of {@link ClientTypeSid} constants.</dd> <dt>bool <var>is_member</var></dt> <dd> Deprecated Use <var>id_client_type</var> instead. It will be `1` if the record contains a type of member. It will be `0` if record contains some other type of client. It will be `null` if the record contains some type of prospect. </dd> <dt>string <var>k_login_type</var></dt> <dd>The login type key.</dd> <dt>string <var>s_title</var></dt> <dd>The name of the login type.</dd> <dt>string <var>text_title</var></dt> <dd>Same as <var>s_title</var> offset.</dd> </dl>'
      tags:
        - Type-LoginType
  '/Wl/Login/Permission/Permission.json':
    post:
      summary: 'Saves purchased promotion properties "auto-renew" and "Convert to ...".'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_renew:
                  type: boolean
                  description: 'If `true`, the purchased promotion has been made auto-renewable. Otherwise, this will be `false`.'
                k_login_promotion:
                  type: string
                  description: 'The key of the purchased promotion.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Permission-Permission
  '/Wl/Login/Agree/Agree.json':
    get:
      summary: 'Returns text of business liability release if business has liability release and if user did not agree to this liability release.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  html_contract:
                    type: string
                    description: 'Formatted text of business liability release. Not empty if business has liability release and if user did not agree to this liability release.'
      tags:
        - Agree-Agree
    post:
      summary: 'Saves user''s agreement to online waiver'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_agree:
                  type: bool|null
                  description: '<tt>false</tt> if user has not agreed to use Electronic Signatures, <tt>true</tt> if user has agreed to use Electronic Signatures, <tt>null</tt> otherwise.'
                k_business:
                  type: string
                  description: 'The key of business.'
                s_signature:
                  type: string
                  description: 'The base64-encoded user''s signature image from the signature pad as a PNG file.'
                uid:
                  type: string
                  description: 'The user''s key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Agree-Agree
  '/Wl/Login/Coupon/Coupon.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: s_code
          in: query
          description: 'The gift card.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_login_coupon:
                    type: string
                    description: 'The gift card reference number for this specific user. WellnessLiving uses this reference number for managing gift cards in the system.'
                  m_amount:
                    type: string
                    description: 'The gift card amount.'
      tags:
        - Coupon-Coupon
  '/Wl/Login/Mail/MailUse.json':
    get:
      summary: 'Checks if specified user exists in specified business.'
      parameters:
        - name: k_business
          in: query
          description: 'The business for which the email address search is being performed.'
          schema:
            type: string
        - name: text_mail
          in: query
          description: 'The email address to check for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_exists:
                    type: boolean
                    description: 'If <tt>true</tt>, the user with the specified email address exists in specified business. Otherwise, this will be <tt>false</tt>.'
      tags:
        - Mail-MailUse
  '/Wl/Login/Product/Product.json':
    get:
      summary: 'Returns information about products purchased by client.'
      parameters:
        - name: dtu_end
          in: query
          description: 'Maximal date and time of purchase in UTC. Empty string means no filter by maximal date.'
          schema:
            type: string
        - name: dtu_start
          in: query
          description: 'Minimal date and time of purchase in UTC. Empty string means no filter by minimal date.'
          schema:
            type: string
        - name: i_page
          in: query
          description: 'Number of the page to get.'
          schema:
            type: number
            format: int32
        - name: i_page_size
          in: query
          description: 'Page size.'
          schema:
            type: number
            format: int32
        - name: id_pay_method
          in: query
          description: 'ID of the payment method. One of the {@link \RsPayMethodSid} constants. Zero means no filter by payment method.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'Business key. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location key. Primary key in {@link \RsLocationSql} table. Empty string means no filter by location.'
          schema:
            type: string
        - name: k_shop_product_option
          in: query
          description: 'Product option key. Primary key in {@link \RsShopProductOptionSql} table. Empty string means no filter by product option.'
          schema:
            type: string
        - name: m_price_max
          in: query
          description: 'Maximum price of the product. 0 means no filter by maximum price.'
          schema:
            type: number
            format: float
        - name: m_price_min
          in: query
          description: 'Minimum price of the product.'
          schema:
            type: number
            format: float
        - name: uid
          in: query
          description: 'User key. Primary key in {@link \PassportLoginSql} table. Empty string means return products purchased by walk-in.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_product:
                    type: array
                    description: 'List of purchased products:<dl> <dt>string <var>dtu_purchase</var></dt> <dd>Date and time of purchase in UTC.</dd> <dt>int <var>i_quantity</var></dt> <dd>Quantity of the product purchased.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>Key of product. Primary key in {@link \RsShopProductOptionSql} table.</dd> <dt>string <var>m_price</var></dt> <dd>Price per unit of the product.</dd> <dt>string <var>m_total_amount</var></dt> <dd>Total amount paid for the product.</dd> <dt>string <var>text_location</var></dt> <dd>Location where the purchase was made.</dd> <dt>string <var>text_product</var></dt> <dd>Name of the purchased product.</dd> </dl>'
      tags:
        - Product-Product
  '/Wl/Member/Purchase/MemberByPromotion.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business for which to get a list of clients.'
          schema:
            type: string
        - name: s_promotion_keys
          in: query
          description: 'The comma-separated list of the Purchase Option keys. Only active clients with at least one active Purchase Option from this list will be returned. For example: ''324,123,11,556'''
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_clients:
                    type: array[]
                    description: 'The list of active clients with the given Purchase Options. <dl> <dt>array[] <var>a_purchase_options</var></dt> <dd> The list of active Purchase Options. Each element has: <dl> <dt>string|null <var>dl_end</var></dt> <dd>The date in the location time zone when the Purchase Option expires. This will be `null` if the Purchase Option doesn''t expire.</dd> <dt>string <var>dtu_purchase</var></dt> <dd>The global date and time when the Purchase Option was sold.</dd> <dt>string|null <var>dl_start</var></dt> <dd>The date in location''s time zone when the Purchase Option starts. This will be `null` if not defined yet. For example, if the starting date is the date of the first visit and there haven''t been any visits yet.</dd> <dt>string|null <var>dl_terminate</var></dt> <dd>The date in location time zone when the Purchase Option will be terminated. This will be `null` if the Purchase Option isn''t scheduled to be terminated.</dd> <dt>string <var>k_promotion</var></dt> <dd>The key of the Purchase Option.</dd> </dl> </dd> <dt>string <var>uid</var></dt> <dd>The key of the client.</dd> </dl>'
      tags:
        - Purchase-MemberByPromotion
  '/Wl/Notification/Send/NotificationSend.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_data:
                  type: array
                  description: 'Custom array with information which can be used to generate notification. Use {@link NotificationInfoApi} for more information about available fields.'
                dtu_send:
                  type: string
                  description: 'Date and time in UTC, when notification should be sent. Empty string means to send immediately. If date and time are set, it should be reasonable. If it''s too far in the future, API returns an error.'
                id_notification:
                  type: number
                  format: int32
                  description: 'ID of the notification. See {@link \RsMailSid}. Contact with WellnessLiving support to get the list of available notifications.'
                k_business:
                  type: string
                  description: 'Key of the business where notification should be sent.'
                k_location:
                  type: string|null
                  description: 'Key of the location. If it''s not empty, only clients from this location will get notification. `null` to not limit recipients with a certain location.'
                s_uid:
                  type: string
                  description: 'List of UIDs joined with comma, if notification should be sent to certain recipients. Empty string means to send to all clients of the business or location with proper subscription level.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Send-NotificationSend
  '/Wl/Notification/Send/NotificationInfo.json':
    get:
      summary: ''
      parameters:
        - name: id_notification
          in: query
          description: 'ID of the notification. See {@link \RsMailSid}.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'Key of the business where information about notification should be retrieved.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_info:
                    type: array
                    description: 'Information about mail.'
      tags:
        - Send-NotificationInfo
  '/Wl/Notification/Otp/PhoneOtp.json':
    get:
      summary: ''
      parameters:
        - name: text_phone
          in: query
          description: 'Phone number to be validated.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Otp-PhoneOtp
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                s_otp_code:
                  type: string
                  description: 'Otp code integer that user entered on the form. Will be compared with otp code, which was sent previously.'
                text_phone:
                  type: string
                  description: 'Phone number to be validated.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Otp-PhoneOtp
  '/Wl/Reception/Roster/AttendanceListNotAttend.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                s_secret:
                  type: string
                  description: 'The secret for authenticating the attendance kiosk.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_visit:
                    type: string
                    description: 'The visit key.'
      tags:
        - Roster-AttendanceListNotAttend
  '/Wl/Reception/Roster/AttendanceListAttend.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dtu_date:
                  type: string
                  description: 'The UTC datetime for the class in MySQL format.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_class_period:
                  type: string
                  description: 'The class period key.'
                s_secret:
                  type: string
                  description: 'The secret for authenticating the attendance kiosk.'
                uid:
                  type: string
                  description: 'The client''s user key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_visit:
                    type: string
                    description: 'The visit key.'
                  text_message:
                    type: string
                    description: 'The status message displayed on a successful check-in.'
      tags:
        - Roster-AttendanceListAttend
  '/Wl/Reception/Roster/AttendanceListBook.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dtu_date:
                  type: string
                  description: 'The UTC datetime for the class in MySQL format.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_class_period:
                  type: string
                  description: 'The class period key.'
                s_secret:
                  type: string
                  description: 'The secret for authenticating the attendance kiosk.'
                uid:
                  type: string
                  description: 'The client''s user key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_wait:
                    type: boolean
                    description: '`true` if the client is on the waitlist for the class, `false` if they are on the class list.'
                  text_message:
                    type: string
                    description: 'The status message displayed on a successful booking. Describes whether client was put in class list or waitlist.'
      tags:
        - Roster-AttendanceListBook
  '/Wl/Reception/Roster/AttendanceSecret.json':
    get:
      summary: 'Gets the secret string for Attendance Kiosk requests.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business. Primary key in {@link \RsBusinessSql} table'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Key of the location. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  s_secret:
                    type: string
                    description: 'Secret string.'
      tags:
        - Roster-AttendanceSecret
  '/Wl/Reception/Design/ReceptionDesign.json':
    get:
      summary: 'Returns information about settings for Check In Web Application. This method does not require any access checks, because this is public information.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business, where application is run.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Key of the location, where application is run.'
          schema:
            type: string
        - name: text_business_name
          in: query
          description: 'Name of the business to display on the client self check-in page.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_reception_logo:
                    type: string[]
                    description: 'Array of image information for Self Check-In logo. Empty if {@link \Wl\Reception\Design\ReceptionDesignApi::$k_location} is not provided. Will contain the following keys: <dl> <dt>string <var>url_view</var></dt> <dd>url for full image.</dd> <dt>string <var>url_thumbnail</var></dt> <dd>url for thumbnail version of image.</dd> </dl> If image for self check in app is empty, will attempt to obtain business logo instead. If business logo is empty, will attempt to obtain location logo.'
                  hide_profile_images:
                    type: boolean
                    description: '`true` - client profile images will be hidden after the client signs in on the Check-in Kiosk; `false` - otherwise.'
                  i_book_open:
                    type: number
                    format: int32
                    description: 'Number of minutes for the client check-in window after session has started.'
                  i_confirm_delay:
                    type: number
                    format: int32
                    description: 'Delay in seconds on Check-in Confirmation Screen before redirect to Login screen.'
                  i_schedule_delay:
                    type: number
                    format: int32
                    description: 'Delay in seconds on Schedule Screen before redirect to Login screen.'
                  id_failed_sound:
                    type: number
                    format: int32
                    description: 'ID of the sound for failed check in.'
                  id_success_sound:
                    type: number
                    format: int32
                    description: 'ID of the sound for successful check in.'
                  is_attend_free:
                    type: boolean
                    description: '`true` - allow client to check-in unpaid; `false` - otherwise.'
                  is_auto_check_in:
                    type: boolean
                    description: 'If only one service available with the look ahead window the client will: `true` - automatically check in to it; `false` - have to select the service.'
                  is_book_open:
                    type: boolean
                    description: '`true` - allow clients to check-in to sessions in progress; `false` - otherwise.'
                  is_book_optional:
                    type: boolean
                    description: '`true` - allow client check-in without booking prior; `false` - otherwise.'
                  is_client_id:
                    type: boolean
                    description: '`true` - enable check-in by client id; `false` - otherwise.'
                  is_mail:
                    type: boolean
                    description: '`true` - enable check-in by email; `false` - otherwise.'
                  is_password:
                    type: boolean
                    description: '`true` - require password while check-in; `false` - otherwise.'
                  is_phone:
                    type: boolean
                    description: '`true` - enable check-in by phone; `false` - otherwise.'
                  is_reconcile_auto:
                    type: boolean
                    description: '`true` - automatically reconcile unpaid visits upon check in; `false` - otherwise.'
                  show_business_name:
                    type: boolean
                    description: '`true` - show business name on client self check-in page; `false` - otherwise.'
                  show_confirm_screen:
                    type: boolean
                    description: '`true` - show confirm screen after client self check-in; `false` - otherwise.'
      tags:
        - Design-ReceptionDesign
  '/Wl/Reception/Application/ReceptionSchedule.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The business key, where the Self Check-In Web App is started.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location key, where the Self Check-In Web App is started.'
          schema:
            type: string
        - name: s_secret
          in: query
          description: 'The key of the Self Check-In Web App. Read more {@link MainController::$s_secret}.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show the schedule for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_class:
                    type: array
                    description: 'A list of sessions to display with the following fields: <dl> <dt>array <var>a_resources_shared</var></dt> <dd>A list of shared resources containing:<dl> <dt>string <var>k_resource</var></dt><dd>The resource key.</dd> <dt>string <var>s_title</var></dt><dd>The resource title.</dd> </dl></dd> <dt>array <var>a_staff_all</var></dt> <dd>A list of staff members instructing the service, containing:<dl> <dt>string <var>s_name_full</var></dt><dd>The staff member''s full name.</dd> </dl></dd> <dt>string <var>dtu_date</var></dt> <dd>The session date.</dd> <dt>string <var>html_class_js</var></dt> <dd>The name of the HTML class that JavaScript uses to display the icon, depending on the service type.</dd> <dt>int <var>i_duration</var></dt> <dd>The session duration in minutes.</dd> <dt>int <var>id_service</var></dt> <dd>Service ID. One of the {@link \Wl\Service\ServiceSid} constants.</dd> <dt>bool <var>is_auto</var></dt> <dd>If `true`, the session can be checked in automatically. Otherwise, this will be `false`.</dd> <dt>bool <var>is_book</var></dt> <dd>If `true`, the client should be notified that the visit is booked. Otherwise, this will be `false`.</dd> <dt>bool <var>is_wait</var></dt> <dd>If `true`, the client should be notified that they''re on the wait list. Otherwise, this will be `false`.</dd> <dt>string|null <var>k_appointment</var></dt> <dd>The appointment key. If `null`, this isn''t an appointment.</dd> <dt>string|null <var>k_class_period</var></dt> <dd>The class period key. If `null`, this isn''t a class or event.</dd> <dt>string|null <var>k_visit</var></dt> <dd>The visit key if the session has been checked in. Otherwise, this will be `null`.</dd> <dt>string <var>s_class</var></dt> <dd>The service name.</dd> <dt>string <var>s_duration</var></dt> <dd>The session duration, formatted by the business configuration.</dd> <dt>string <var>s_time</var></dt> <dd>The time the session takes place.</dd> </dl>'
                  a_schedule_class_all:
                    type: array
                    description: 'All types of services that appear in the schedule. Keys are constants from {@link ServiceSid}. Values are the HTML classes associated with that service.'
                  html_schedule:
                    type: string
                    description: 'The schedule to be shown in the Self Check-In Web App for the selected user.'
      tags:
        - Application-ReceptionSchedule
    post:
      summary: 'Makes check in.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dtu_date:
                  type: string
                  description: 'The date and time of the visit in UTC and MySQL format.'
                k_appointment:
                  type: string|null
                  description: 'The key of the appointment to check in. If `null`, this is class visit or gym visit.'
                k_business:
                  type: string
                  description: 'The business key, where the Self Check-In Web App is started.'
                k_class_period:
                  type: string|null
                  description: 'The key of the class schedule to check in. If `null`, this is an appointment visit or gym visit.'
                k_location:
                  type: string
                  description: 'The location key, where the Self Check-In Web App is started.'
                s_secret:
                  type: string
                  description: 'The key of the Self Check-In Web App. Read more {@link MainController::$s_secret}.'
                uid:
                  type: string
                  description: 'The key of the user to show the schedule for.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_confirmation_data:
                    type: array
                    description: 'Data for the confirmation screen with the following fields: <dl> <dt>array <var>a_payment</var></dt> <dd>Data for the promotion payment informational card. Each element contains:<dl> <dt>array <var>a_restrict</var></dt> <dd>Calendar restrictions. A duration pass will only have elements if a restriction has been met. This contains: <dl> <dt>int <var>i_limit</var></dt><dd>The count of possible visits.</dd> <dt>int <var>i_remain</var></dt><dd>The count of remaining visits.</dd> <dt>bool <var>s_date</var></dt><dd>The calendar period name.</dd> </dl></dd> <dt>bool <var>has_visit_past</var></dt> <dd>If `true`, the promotion was renewed in the past. Otherwise, this will be `false`.</dd> <dt>bool <var>hide_visit_additional_info</var></dt> <dd>If `true`, additional info should be excluded. Otherwise, this will be `false`.</dd> <dt>int <var>i_book</var></dt><dd>The count of upcoming uses of the promotion.</dd> <dt>int <var>i_book_duration</var></dt> <dd> Number of minutes used for upcoming visits. Has sense only for promotions of program type {@link \RsProgramTypeSid::DURATION}. </dd> <dt>int <var>i_limit</var></dt><dd>The promotion''s visit count limit.</dd> <dt>int <var>i_remain</var></dt><dd>The remaining count of visits.</dd> <dt>int <var>i_remain_duration</var></dt> <dd> Number of minutes left in this promotion. Has sense only for promotions of program type {@link \RsProgramTypeSid::DURATION}. </dd> <dt>int <var>i_use</var></dt><dd>Count of held uses in the pass.</dd> <dt>int <var>i_use_duration</var></dt> <dd> Number of minutes used for past visits by this promotion. Has sense only for promotions of program type {@link \RsProgramTypeSid::DURATION}. </dd> <dt>int <var>i_visit_past</var></dt> <dd> The count of attended sessions before the last renewal. If `0`, there were no sessions before last renewal or the promotion doesn''t auto-renew. </dd> <dt>int <var>id_program_type</var></dt><dd>The promotion''s program type ID.</dd> <dt>bool <var>is_last_use</var></dt> <dd>If `true`, the promotion has a usage limit and no remaining visits. Otherwise, this will be `false`.</dd> <dt>bool <var>is_package</var></dt><dd>If `true`, the promotion is a package. Otherwise, this will be `false`.</dd> <dt>bool <var>is_restrict_multiply</var></dt> <dd>If `true`, there''s more than one calendar restriction on the pass. Otherwise, this will be `false`.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The login promotion key. Primary key from {@link \RsLoginPromotionSql}.</dd> <dt>string <var>s_remain_measure</var></dt><dd>The formatted remaining duration on the promotion.</dd> <dt>bool <var>show_remain</var></dt> <dd>If `true`, there''s a rollover on the pass with calendar restrictions. Otherwise, this will be `false`.</dd> <dt>string <var>sid_program_type</var></dt><dd>The promotion''s program type SID.</dd> </dl></dd> <dt>array <var>a_resources_not_shared</var></dt> <dd>The list of assets reserved individually at the time of booking containing:<dl> <dt>int <var>i_index</var></dt><dd>The busy resource index.</dd> <dt>string <var>s_title</var></dt><dd>The resource name.</dd> </dl></dd> <dt>string <var>dl_renew</var></dt> <dd>The promotion renewal date in local time.</dd> <dt>int <var>i_visits</var></dt> <dd>The total workouts attended.</dd> <dt>string <var>s_expire</var></dt> <dd>The short format of the promotion expiration date.</dd> <dt>string <var>s_payment</var></dt> <dd>The payment method used to book (free, unpaid, single buy, or promotion name).</dd> <dt>string <var>s_renew</var></dt> <dd>The short format of the promotion renewal date.</dd> <dt>string <var>show_visits</var></dt> <dd>Determines whether to show the client''s total workouts attended on the confirmation screen.</dd> </dl>'
                  html_confirmation:
                    type: string
                    description: 'The confirmation template to be shown in the Self Check-In Web App for the selected user.'
                  k_visit:
                    type: string
                    description: 'The visit key, which was added or checked in.'
      tags:
        - Application-ReceptionSchedule
  '/Wl/Reception/Application/MemberInfo.json':
    get:
      summary: ''
      parameters:
        - name: a_uid
          in: query
          description: 'Primary keys of users whose information must be returned. `null` if data of a single user is requested.'
          schema:
            type: string[]|null
        - name: dt_date
          in: query
          description: 'Date of the session, if we show it on the appointment info window or on the attendance list.'
          schema:
            type: string
        - name: is_backend
          in: query
          description: '`true` - if API is being used from backend, `false` - otherwise.'
          schema:
            type: boolean
        - name: is_full
          in: query
          description: 'If you need to return additional information set to `true` or `false` if not.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business ID required to access client information. Specify this as `0` to retrieve the system-wide version of the information.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location where the Self Check-In Web App is running.'
          schema:
            type: string
        - name: k_visit
          in: query
          description: 'ID of the visit, if we show icons on the attendance list and information that depends on visit is required.'
          schema:
            type: string
        - name: s_secret
          in: query
          description: 'Key of the Check In application. Read more {@link MainController::$s_secret}.'
          schema:
            type: string
        - name: s_show
          in: query
          description: 'A list of icons with additional information about the business member. If empty, all available icons will be displayed. Comma separated sids from {@link MemberInfoSid}.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'ID of a user to retrieve member information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_info:
                    type: array|null
                    description: 'Additional member data or `null` if any data can be shown. Will be filled if {@link InfoApi::$is_full} flag is set. See result of {@link MemberInfoView::dataPrepare()} method.'
                  a_items:
                    type: array[]
                    description: 'The options presented in the web app. The items are generated this way due to JavaScript limitations around translated messages. <dl> <dt>string <var>id_color</var></dt> <dd> ID of color the notice is displayed in. One of {@link \Wl\Reception\Application\MemberInfoColorSid} constants. </dd> <dt>string <var>id_icon</var></dt> <dd> ID of icon that accompanies the message. One of {@link \Wl\Reception\Application\MemberInfoIconSid} constants. </dd> <dt>string <var>text_class</var></dt> <dd>Name of the class for styles.</dd> <dt>string <var>text_message</var></dt> <dd>Plain message for info box.</dd> <dt>string <var>html_message</var></dt> <dd>Message for info box.</dd> </dl>'
                  a_result_list:
                    type: array|null
                    description: 'List of users data. Keys - users primary keys. Values - users data {@link InfoApi::_get()} for details. Keys refer to clients'' primary keys, and values refer to clients'' data. If `null`, data for a single client is being requested.'
                  is_traveller:
                    type: bool|null
                    description: 'If `true`, the client is a traveler. Otherwise, this will be `false`. This will be `null` in cases when the client is a walk-in. Or when {@link MemberInfoApi::$is_full} is `false`.'
                  s_member:
                    type: string|null
                    description: 'The member ID. If `null`, the specified client isn''t a member of the specified business.'
                  text_first_name:
                    type: string
                    description: 'First user''s name.'
                  text_fullname:
                    type: string
                    description: 'Full user''s name.'
                  url_barcode:
                    type: string
                    description: 'URL to barcode image.'
                  url_email:
                    type: string
                    description: 'URL to email.'
      tags:
        - Application-MemberInfo
  '/Wl/Review/ReviewList/ReviewList.json':
    get:
      summary: 'Retrieves a list of reviews.'
      parameters:
        - name: i_page
          in: query
          description: 'If not specified, this request will return all review keys. If specified, this request will return detailed reviews (10 per page). This will be `null` if you only need to load the keys of the review.'
          schema:
            type: int|null
        - name: id_order
          in: query
          description: 'The order in which the review should be arranged. One of the {@link \Wl\Review\ReviewList\ReviewOrderSid} constants. If not passed use default order {@link \Wl\Review\ReviewList\ReviewOrderSid::LATEST}.'
          schema:
            type: int|null
        - name: k_business
          in: query
          description: 'Business key. If not specified, location key needs to be specified.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location to show reviews for. If not specified, business key should be specified.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key. WellnessLiving allows staff to check low-rated reviews before posting them. Staff members can see all reviews. Clients can only see checked reviews.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_review:
                    type: array[]
                    description: 'List of reviews. If passed {@link \Wl\Review\ReviewList\ReviewListApi::$i_page} then the result will be full, otherwise in result will be keys: <tt>k_review</tt>, <tt>uid</tt>. <dl> <dt> bool <var>can_reply</var> </dt> <dd> <tt>true</tt> if can reply to review, <tt>false</tt> otherwise. </dd> <dt> string <var>dl_reply</var> </dt> <dd> Date when staff reply to review. Can be empty string if no one replied. </dd> <dt> string <var>dt_add</var> </dt> <dd> Date when review added. </dd> <dt> float <var>f_rate</var> </dt> <dd> Rate of review. </dd> <dt> bool <var>is_featured</var> </dt> <dd> <tt>true</tt> if review is featured, <tt>false</tt> otherwise. </dd> <dt> bool <var>is_verify</var> </dt> <dd> <tt>true</tt> if review is verify, <tt>false</tt> otherwise. </dd> <dt> string <var>k_location</var> </dt> <dd> The location key for where the review was left/assigned. Primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>k_review</var> </dt> <dd> Review key. Primary key in {@link \RsReviewSql} table. </dd> <dt> string <var>s_firstname</var> </dt> <dd> First name of user who wrote review. </dd> <dt> string <var>s_lastname</var> </dt> <dd> Last name of user who wrote review. </dd> <dt> string <var>s_reply</var> </dt> <dd> Reply for review. </dd> <dt> string <var>s_text</var> </dt> <dd> Review text. </dd> <dt> string <var>text_city</var> </dt> <dd> City from the profile of the user, who left review. </dd> <dt> string <var>text_reply_first</var> </dt> <dd> First name of staff who replied of review. Can be empty string if no one replied. </dd> <dt> string <var>text_reply_last</var> </dt> <dd> Last name of staff who replied of review. Can be empty string if no one replied. </dd> <dt> string <var>text_role</var> </dt> <dd> Staff role who replied of review. Can be empty string if no one replied. </dd> <dt> string <var>uid</var> </dt> <dd> User key who wrote review. </dd> <dt> string <var>url_image</var> </dt> <dd> Link to the image of the user who wrote review. </dd> <dt> string <var>url_reply_image</var> </dt> <dd> Link to the image of the user who replied of review. Can be empty string if no one replied. </dd> </dl>'
      tags:
        - ReviewList-ReviewList
  '/Wl/Review/ReviewList/ReviewElement.json':
    delete:
      summary: 'Deletes a review.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_review:
                  type: string
                  description: 'The review key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - ReviewList-ReviewElement
    get:
      summary: 'Retrieves information about review item.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to which the review belongs.'
          schema:
            type: string
        - name: k_review
          in: query
          description: 'The review key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. May be empty in the case of a guest.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_review:
                    type: array
                    description: 'Review data: <dl> <dt> string <var>dt_add</var> </dt> <dd> Date when review was added by user. </dd> <dt> float <var>f_rate</var> </dt> <dd> Review rate. </dd> <dt> int <var>id_review_status</var> </dt> <dd> Status of the Review </dd> <dt> bool <var>is_featured</var> </dt> <dd> If `true`, the review is featured. Otherwise, this will be `false`. </dd> <dt> bool <var>is_verify</var> </dt> <dd> <tt>true</tt> if review is verified, <tt>false</tt> otherwise. </dd> <dt> string <var>text_firstname</var> </dt> <dd> Client''s first name who added review. </dd> <dt> string <var>text_lastname</var> </dt> <dd> Client''s last name who added review. </dd> <dt> string <var>text_reply</var> </dt> <dd> Staff reply. Can be empty. </dd> <dt> string <var>text_review</var> </dt> <dd> Review text. </dd> <dt> string <var>text_business_name</var> </dt> <dd> Business name </dd> <dt> string <var>text_response</var> </dt> <dd> Word "response". </dd> <dt> string <var>uid</var> </dt> <dd> User key. </dd> <dt> string <var>url_logo</var> </dt> <dd> User logo. </dd> </dl>'
      tags:
        - ReviewList-ReviewElement
  '/Wl/Search/Tag/SearchTagList.json':
    get:
      summary: 'Returns list of search tags. This is public information and method does not require any level of privileges.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_search_tag:
                    type: array[]
                    description: 'A list of all the search tags. Each element is an array with the following keys: <dl> <dt>int <var>id_business_category</var></dt> <dd> The business category that can use this search tag. One of the {@link \RsBusinessCategorySid} constants. This can be found in the business information found in {@link DataApi::$id_category}. </dd> <dt>string <var>k_search_tag</var></dt> <dd>The key of the tag. The primary key in the table of tags.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the tag.</dd> </dl>'
      tags:
        - Tag-SearchTagList
  '/Wl/Skin/Application/Skin.json':
    delete:
      summary: 'Reset customisation form of client application.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_billing_confirm:
                  type: boolean
                  description: 'Whether customization billing is confirmed. <tt>true</tt> to finish delete process even if customization fee will be billed. <tt>false</tt> if customization fee should be required for confirmation.'
                k_business:
                  type: string
                  description: 'The business key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  s_link:
                    type: string
                    description: 'Name of the link to default application skin.'
      tags:
        - Application-Skin
    get:
      summary: 'Application customisation skin data.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_skin:
                    type: array
                    description: 'Skin information.'
                  has_pay:
                    type: boolean
                    description: 'Determines current business account contains amount for the application customisation.'
                  s_link:
                    type: string
                    description: 'Name of the link to default application skin.'
      tags:
        - Application-Skin
  '/Wl/Staff/StaffView/StaffView.json':
    get:
      summary: 'Retrieves information about staff. This method can accept or one staff key {@link StaffViewApi::$k_staff} or staff list {@link StaffViewApi::$a_staff_list} but not both (exception would be thrown).'
      parameters:
        - name: a_staff_list
          in: query
          description: 'A list of staff keys.'
          schema:
            type: string[]
        - name: i_image_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: k_staff
          in: query
          description: 'The staff member key. A staff member can work for more than one business. This key can be found using the {@link StaffListApi} endpoint.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_class_day:
                    type: array[]
                    description: 'An array containing information about the classes this staff member is running. Each element contains another array with three elements: <dl> <dt> array <var>a_class_period</var> </dt> <dd> A list of sessions in the day: <dl> <dt>string <var>dt_time</var></dt> <dd>The session start time in MySQL format.</dd> <dt>int <var>i_duration</var></dt> <dd>The session duration in seconds.</dd> <dt>string <var>s_title</var></dt> <dd>The class name.</dd> <dt>string <var>url_book</var></dt> <dd>Direct book URL of this class.</dd> </dl> </dd> <dt>int <var>i_day</var></dt> <dd>The day of week. One of {@link \ADateWeekSid} constants.</dd> </dl>'
                  a_result_list:
                    type: array[]
                    description: 'An array listing the class sessions the staff member provides at each location. <dl> <dt>array <var>a_class_day</var></dt> <dd> Contains a schedule of classes per day. Each element has a structure like in {@link StaffViewApi::$a_class_day} property. </dd> <dt>array <var>a_staff</var></dt> <dd> Staff information. Each element has a structure like in {@link StaffViewApi::$a_staff} property. </dd> </dl>'
                  a_staff:
                    type: array
                    description: 'An array containing information about the staff member. <dl> <dt>array <var>a_location_work</var></dt> <dd>A list of locations keys where staff works. Primary keys in {@link \RsLocationSql} table.</dd> <dt>array <var>a_photo</var></dt> <dd>Staff`s photo. See {@link \RsStaffImage::data()}.</dd> <dt>string <var>html_biography</var></dt> <dd> A description of the staff member. This description can include HTML tags. Same as `s_biography` offset. </dd> <dt>string <var>html_first</var></dt> <dd>The first name of the staff.</dd> <dt>string <var>html_last</var></dt> <dd>The last name of the staff.</dd> <dt>string <var>html_location_title</var></dt> <dd>Name of the current staff location.</dd> <dt>int <var>id_gender</var></dt> <dd>The staff member''s gender. One of the {@link \AGenderSid} constants.</dd> <dt>bool <var>is_classes_events</var></dt> <dd>`true` in case when staff provides classes/events in home location, `false` otherwise.</dd> <dt>bool <var>is_publish_business_page</var></dt> <dd>Whether staff member should be published on business pages.</dd> <dt>bool <var>is_schedule_enabled</var></dt> <dd>`true` in case when for schedule exists for staff, `false` otherwise.</dd> <dt>string <var>k_location</var></dt> <dd>Staff`s current location. Primary key in {@link \RsLocationSql} table.</dd> <dt>string <var>k_staff</var></dt> <dd>Staff key. Primary key in {@link \RsStaffSql} table.</dd> <dt>string <var>s_biography</var></dt> <dd> A description of the staff member. This description can include HTML tags. <b>Deprecated</b> use `html_biography` instead of this. </dd> <dt>string <var>s_family</var></dt> <dd>The staff member surname. If there are rights, the full surname, if not, then depending on the business settings.</dd> <dt>string <var>s_name</var></dt> <dd>The staff member first name. If there are rights, the full first name, if not, then depending on the business settings.</dd> <dt>string <var>s_position</var></dt> <dd>The staff member position in the organization.</dd> <dt>string <var>text_business_role</var></dt> <dd>Name of the staff role.</dd> <dt>string <var>text_full_name</var></dt> <dd>Full name of the staff according to business settings.</dd> <dt>string <var>uid</var></dt> <dd> The user ID. Each staff member in WellnessLiving can also access the system as a client of their business. This is the ID number used to represent the staff member as a client. </dd> <dt>string <var>url_schedule</var></dt> <dd> URL to the schedule with this staff. </dd> </dl>'
      tags:
        - StaffView-StaffView
  '/Wl/Staff/StaffList/StaffList.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_staff:
                    type: array[]
                    description: 'Information about staff members. Each array index is the staff member keys. Each array element is an array containing the following fields: <dl> <dt> string[] <var>a_pay_rate</var> </dt> <dd> A list of internal pay rate keys applicable to the staff member. </dd> <dt> array <var>a_staff_service</var> </dt> <dd> A list of all services, provided by the staff member. Each element is an array with structure: <dl> <dt> string <var>k_service</var> </dt> <dd> Service key, primary in {@link \RsServiceSql} table. </dd> <dt> string <var>k_staff_pay</var> </dt> <dd> Staff pay key for this service, primary in {@link \RsStaffPaySql} table. </dd> </dl> </dd> <dt> string <var>html_name</var> </dt> <dd> Staff name. </dd> <dt> int <var>i_order</var> </dt> <dd> Order for sorting. </dd> <dt> bool <var>is_appointment</var> </dt> <dd> Whether this staff provides appointments service. </dd> <dt> bool <var>is_class</var> </dt> <dd> Whether this staff provides class service. </dd> <dt> bool <var>is_event</var> </dt> <dd> Whether this staff provides events service. </dd> <dt> string <var>k_staff</var> </dt> <dd> The staff key. Primary key in {@link \RsStaffSql} table. </dd> <dt> string <var>s_name</var> </dt> <dd> The staff member first name. If there are rights, the full first name, if not, then depending on the business settings. </dd> <dt> string <var>s_position</var> </dt> <dd> The staff member position in the organization. </dd> <dt> string <var>s_surname</var> </dt> <dd> The first letter of the staff member surname. If there are rights, the full surname, if not, then depending on the business settings. </dd> <dt> string|null <var>s_surname_full</var> </dt> <dd> The entire surname of the staff member. This will be `null` if private staff member information isn''t accessible. </dd> <dt> string <var>text_name_full</var> </dt> <dd> The full name of the staff member. </dd> <dt> string <var>uid</var> </dt> <dd> The user key. Each staff member in WellnessLiving can also access the system as a client of their business. This is the key used to represent the staff member as a client. Primary key in {@link \PassportLoginSql} table. </dd> <dt> string <var>url_image</var> </dt> <dd> Url link to user photo, or empty string, if photo is not loaded. </dd> </dl>'
      tags:
        - StaffList-StaffList
  '/Wl/Staff/Privilege/PrivilegeList.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'Key of business to get privileges for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key to get privileges for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_privilege_passport:
                    type: array
                    description: 'List of privileges, if user is administrator. There is no certain list of admin privileges, as they are name-based. If you need to check access to certain place contact WellnessLiving integration team.'
                  a_privilege_staff:
                    type: int[]
                    description: 'List of privileges, if the given user is a staff member in the give business.'
                  is_admin:
                    type: boolean
                    description: 'Whether this user is a super-administrator because he is a studio staff member. `true`, if this user is a super administrator because he is a studio staff member. Super administrators have all privileges. `false` if this is an ordinary user.'
      tags:
        - Privilege-PrivilegeList
  '/Wl/User/Info/UserInfo.json':
    get:
      summary: 'Retrieves information about user.'
      parameters:
        - name: a_user_list
          in: query
          description: 'A list of user keys.'
          schema:
            type: string[]
        - name: k_business
          in: query
          description: 'The key of the business. This may be empty if system-wide information is needed.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_custom_field:
                    type: array[]
                    description: 'List of the custom user fields. Each value is:<dl> <dt>string <var>k_field</var></dt> <dd>Field key. Primary key in {@link \RsFieldSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>Name of the field. Will be <tt>null</tt> for general fields. Their titles are static.</dd> <dt>string <var>text_value</var></dt> <dd>Value of the field.</dd> </dl>'
                  a_member_group:
                    type: string[]
                    description: 'List of member groups that the user belongs to.'
                  a_photo:
                    type: array
                    description: 'Information about the user''s photo. The information returned has the following structure:<dl> <dt>int <var>i_height</var></dt> <dd>The height of the photo.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the photo.</dd> <dt>string <var>url_photo</var></dt> <dd>The URL of the photo.</dd> </dl>'
                  a_result_list:
                    type: array[]
                    description: 'List of user''s data. <dl> <dt>array <var>a_custom_field</var></dt> <dd>List of the custom user fields. Each value is:<dl> <dt>string <var>k_field</var></dt> <dd>Field key. Primary key in {@link \RsFieldSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>Name of the field. Will be <tt>null</tt> for general fields. Their titles are static.</dd> <dt>string <var>text_value</var></dt> <dd>Value of the field.</dd> </dl></dd> <dt>array <var>a_member_group</var></dt> <dd>List of member groups that the user belongs to. Primary keys from {@link \Wl\Member\Group\Sql} table.</dd> <dt>array <var>a_photo</var></dt> <dd>Information about the user''s photo.</dd> <dt>string <var>dt_add</var></dt> <dd>The date the user was added, given in UTC time.</dd> <dt>string <var>dt_birth</var></dt> <dd> The user''s birthday. This will be `null` if the birthday isn''t set yet. </dd> <dt>int <var>id_gender</var></dt> <dd>The ID of the user''s gender. One of the {@link \AGenderSid} constants.</dd> <dt>bool <var>is_customer_new</var></dt> <dd> This will be `true` if the user has never made purchases or reservations in this business. Otherwise, this will be `false`. </dd> <dt>bool <var>is_traveller</var></dt> <dd> This will be `true` if the user is a traveler. A traveler is someone whose home location isn''t the current location in the Enterprise business. </dd> <dt>string <var>k_business</var></dt> <dd> The key of the business. This may be empty if system-wide information is needed. </dd> <dt>string <var>k_login_type</var></dt> <dd>The key of the login type. The login type describes the user''s client type in this business.</dd> <dt>string <var>s_first_name</var></dt> <dd>The user''s first name.</dd> <dt>string <var>s_last_name</var></dt> <dd>The user''s last name.</dd> <dt>string <var>s_mail</var></dt> <dd>The user''s email address.</dd> <dt>string <var>s_member</var></dt> <dd> The user''s member ID in the business. Also referred to as the client ID in the client''s profile. This value is set by the business and separate from the <var>uid</var> value. </dd> <dt>string <var>s_phone</var></dt> <dd> The user''s phone number. </dd> <dt>string <var>s_phone_home</var></dt> <dd>The user''s home phone number.</dd> <dt>string <var>s_phone_work</var></dt> <dd>The user''s work phone number.</dd> <dt>string <var>uid</var></dt> <dd>The key of the user.</dd> <dt>string <var>url_photo</var></dt> <dd>The URL for the user''s photo.</dd> </dl>'
                  dt_add:
                    type: string
                    description: 'The date the user was added, given in UTC time.'
                  dt_birth:
                    type: string
                    description: 'The user''s birthday. This will be `null` if the birthday isn''t set yet.'
                  has_discount:
                    type: bool|null
                    description: 'Whether client''s login type has a discount. `true` - login type has a discount, `false` - otherwise. This will be `null` if a client has no assigned login type.'
                  id_gender:
                    type: number
                    format: int32
                    description: 'The ID of the user''s gender. One of the {@link \AGenderSid} constants. This will be `null` if the gender isn''t set yet.'
                  is_customer_new:
                    type: boolean
                    description: 'This will be `true` if the user has never made purchases or reservations in this business. Otherwise, this will be `false`.'
                  is_traveller:
                    type: boolean
                    description: 'This will be `true` if the user is a traveler. A traveler is someone whose home location isn''t the current location in the Enterprise business.'
                  k_city:
                    type: string|null
                    description: 'City. Primary key in {@link \AGeoSql} table. `null` if "address" field is disabled in the business.'
                  k_login_type:
                    type: string
                    description: 'The key of the login type. The login type describes the user''s client type in this business.'
                  s_first_name:
                    type: string
                    description: 'The user''s first name.'
                  s_last_name:
                    type: string
                    description: 'The user''s last name.'
                  s_mail:
                    type: string
                    description: 'The user''s email address.'
                  s_member:
                    type: string
                    description: 'The user''s member ID in the business. Also referred to as the client ID in the client''s profile. This value is set by the business and separate from the <var>uid</var> value.'
                  s_phone:
                    type: string
                    description: 'The user''s phone number.'
                  s_phone_home:
                    type: string
                    description: 'The user''s home phone number.'
                  s_phone_work:
                    type: string
                    description: 'The user''s work phone number.'
                  text_address:
                    type: string|null
                    description: 'Address inside a city. `null` if "address" field is disabled in the business.'
                  text_city:
                    type: string|null
                    description: 'City name. `null` if "address" field is disabled in the business.'
                  text_login_type:
                    type: string
                    description: 'Login type title. Empty if a client has no client type assigned.'
                  text_postal:
                    type: string|null
                    description: 'Postal code. `null` if "address" field is disabled in the business.'
                  uid:
                    type: string
                    description: 'The key of the user.'
                  url_photo:
                    type: string
                    description: 'The URL for the user''s photo.'
      tags:
        - Info-UserInfo
  '/Wl/User/Info/UserIntegration.json':
    get:
      summary: 'Retrieves information about the user belongs to certain integrations.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'Key of the user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_integration:
                    type: array|null
                    description: 'Information about the integrations the user is connected to. The information returned has the following structure: <dl> <dt>bool <var>is_classpass</var></dt> <dd>`true` if user use the Classpass integration, `false` - otherwise.</dd> <dt>bool <var>is_gympass</var></dt> <dd>`true` if user use the Gympass integration, `false` - otherwise.</dd> <dt>bool <var>is_reserve_with_google</var></dt> <dd>`true` if user use the Reserve With Google integration, `false` - otherwise.</dd> </dl> `null` if the user does not belong to any integration.'
      tags:
        - Info-UserIntegration
  '/Wl/User/Referrer/Referrer.json':
    get:
      summary: 'Retrieves information about user.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the current business.'
          schema:
            type: string
        - name: s_search
          in: query
          description: 'The string to be used for searching for a referrer.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_photo:
                    type: array
                    description: 'Information about the referrer''s photo. The information returned has the following structure: <dl> <dt> int <var>i_height</var> </dt> <dd> The height of the photo. </dd> <dt> int <var>i_width</var> </dt> <dd> The width of the photo. </dd> <dt> string <var>url_photo</var> </dt> <dd> The URL of the photo. </dd> </dl>'
                  s_email:
                    type: string
                    description: 'The email address of the referrer.'
                  s_member:
                    type: string
                    description: 'The business client ID of the referrer.'
                  s_name_first:
                    type: string
                    description: 'The first name of the referrer.'
                  s_name_last:
                    type: string
                    description: 'The last name of the referrer.'
                  s_phone:
                    type: string
                    description: 'The phone number of the referrer.'
                  text_name_public:
                    type: string|null
                    description: 'Composes name of the referrer for public usage. `null` if the referrer is not found.'
                  uid_referrer:
                    type: string
                    description: 'The referrer''s user key.'
      tags:
        - Referrer-Referrer
  '/Wl/Video/Category/CategoryElement.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_category:
                  type: string
                  description: 'The category key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Category-CategoryElement
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_video_category
          in: query
          description: 'The category key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_type:
                    type: string[]
                    description: 'A list of client and member types who can access videos from the category.'
                  a_member_group:
                    type: string[]
                    description: 'A list of member groups who can access videos from the category.'
                  i_order:
                    type: number
                    format: int32
                    description: 'The category''s placement in the business''s list of categories.'
                  is_cloud_recording:
                    type: boolean
                    description: 'This will be `true` if the video category is for cloud session recordings. Otherwise, this will be `false`.'
                  is_login_type:
                    type: boolean
                    description: 'This will be `true` if some client or member types can grant access to the video category. Otherwise, this will be `false`.'
                  is_member_group:
                    type: boolean
                    description: 'This will be `true` if some member groups can grant access to the video category. Otherwise, this will be `false` if no member groups can grant access to the video category.'
                  text_title:
                    type: string
                    description: 'The category name.'
      tags:
        - Category-CategoryElement
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_category:
                  type: string
                  description: 'The category key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_type:
                    type: string[]
                    description: 'A list of client and member types who can access videos from the category.'
                  a_member_group:
                    type: string[]
                    description: 'A list of member groups who can access videos from the category.'
                  is_cloud_recording:
                    type: boolean
                    description: 'This will be `true` if the video category is for cloud session recordings. Otherwise, this will be `false`.'
                  is_login_type:
                    type: boolean
                    description: 'This will be `true` if some client or member types can grant access to the video category. Otherwise, this will be `false`.'
                  is_member_group:
                    type: boolean
                    description: 'This will be `true` if some member groups can grant access to the video category. Otherwise, this will be `false` if no member groups can grant access to the video category.'
                  text_title:
                    type: string
                    description: 'The category name.'
      tags:
        - Category-CategoryElement
  '/Wl/Video/Category/CategoryList.json':
    get:
      summary: ''
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: is_skip_empty_group
          in: query
          description: 'If `true`, groups that are missing videos won''t be displayed. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: text_filter
          in: query
          description: 'The filter phrase used to filter categories by name.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_video_category:
                    type: array[]
                    description: 'The business video library categories as found in {@link CategoryListApi::$k_business}. Each element has the following structure: <dl> <dt>bool <var>can_delete</var></dt> <dd>Determines whether the video category can be deleted.</dd> <dt>int <var>i_video</var></dt> <dd>The number of videos.</dd> <dt>string <var>k_video_category</var></dt> <dd>The key of the video category.</dd> <dt>string <var>k_video_category_full</var></dt> <dd>The string key of the video category.</dd> <dt>string <var>text_title</var></dt> <dd>The title of the category.</dd> </dl>'
      tags:
        - Category-CategoryList
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_order:
                  type: string[]
                  description: 'A list of shared video category keys displayed in the order to be saved.'
                is_backend:
                  type: boolean
                  description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Category-CategoryList
  '/Wl/Video/Watch/Watch.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_current_time:
                  type: number
                  format: int32
                  description: 'The current time in seconds the user is at in the video.'
                id_source:
                  type: number
                  format: int32
                  description: 'The source ID.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_video:
                  type: string
                  description: 'The video string key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_video_watch:
                    type: string
                    description: 'The video watch key.'
      tags:
        - Watch-Watch
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_current_time:
                  type: number
                  format: int32
                  description: 'The current time in seconds the user is at in the video.'
                i_watched:
                  type: number
                  format: int32
                  description: 'The duration in seconds the user has watched the video for.'
                k_business:
                  type: string
                  description: 'The business key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_video_watch:
                    type: string
                    description: 'The video watch key.'
      tags:
        - Watch-Watch
  '/Wl/Video/Level/Level.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_delete_confirm:
                  type: boolean
                  description: 'If `true`, confirmation is required to delete videos. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_level:
                  type: string
                  description: 'The video level key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Level-Level
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_level:
                  type: string
                  description: 'The video level key.'
                text_title:
                  type: string
                  description: 'The video level title.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Level-Level
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_level:
                  type: string
                  description: 'The video level key.'
                text_title:
                  type: string
                  description: 'The video level title.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Level-Level
  '/Wl/Video/Level/LevelList.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_level_list:
                    type: array[]
                    description: 'A list of video levels with the following structure: <dl> <dt>string <var>k_video_level</var></dt> <dd>The video level key.</dd> <dt>string <var>text_title</var></dt> <dd>The video level title.</dd> </dl>'
      tags:
        - Level-LevelList
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_order:
                  type: string[]
                  description: 'A list of video level keys in the order to be saved.'
                k_business:
                  type: string
                  description: 'The business key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Level-LevelList
  '/Wl/Video/Tag/Tag.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_delete_confirm:
                  type: boolean
                  description: 'If `true`, confirmation is required to delete videos. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_tag:
                  type: string
                  description: 'The video tag key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Tag-Tag
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_tag:
                  type: string
                  description: 'The video tag key.'
                text_title:
                  type: string
                  description: 'The video tag title.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Tag-Tag
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_video_tag:
                  type: string
                  description: 'The video tag key.'
                text_title:
                  type: string
                  description: 'The video tag title.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Tag-Tag
  '/Wl/Video/Tag/TagList.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_tag_list:
                    type: array[]
                    description: 'A list of video tags with the following structure: <dl> <dt>string <var>k_video_tag</var></dt> <dd>The video tag key.</dd> <dt>string <var>text_title</var></dt> <dd>The video tag title.</dd> </dl>'
      tags:
        - Tag-TagList
  '/Wl/Location/View/View.json':
    get:
      summary: ''
      parameters:
        - name: i_logo_height
          in: query
          description: 'Maximum location image height.'
          schema:
            type: number
            format: int32
        - name: i_logo_width
          in: query
          description: 'Maximum location image width.'
          schema:
            type: number
            format: int32
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_age:
                    type: int[]
                    description: 'A list of ages that are permitted for visiting this location.'
                  a_amenities:
                    type: int[]
                    description: 'A list of facilities that are available in this location.'
                  a_level:
                    type: string[]
                    description: 'A list of levels that are suitable for visiting this location.'
                  a_logo:
                    type: array
                    description: 'Information about the location logo used in WellnessLiving: <dl> <dt> int <var>i_height</var> </dt> <dd> The image height. </dd> <dt> int <var>i_width</var> </dt> <dd> The image width. </dd> <dt> string <var>s_url</var> </dt> <dd> The URL to the image. </dd> </dl>'
                  a_slide:
                    type: array
                    description: 'A list of the location images. Every element has the following keys: <dl> <dt> int <var>i_height</var> </dt> <dd> Height. </dd> <dt> int <var>i_width</var> </dt> <dd> Width. </dd> <dt> string <var>url_preview</var> </dt> <dd> URL to image preview. </dd> <dt> string <var>url_slide</var> </dt> <dd> URL to full image. </dd> </dl>'
                  a_work:
                    type: array
                    description: 'The hours of operation for the location. Fields are numbers representing specific days (1 is Monday, 7 is Sunday). Values are objects with the next fields: <dl> <dt> string <var>s_end</var> </dt> <dd> The time of day end in MySQL format. </dd> <dt> string <var>s_start</var> </dt> <dd> The time of day start in MySQL format. </dd> </dl>'
                  f_latitude:
                    type: number
                    format: float
                    description: 'The latitude coordinate of the location.'
                  f_longitude:
                    type: number
                    format: float
                    description: 'The longitude coordinate of the location.'
                  html_description_full:
                    type: string
                    description: 'The full description of the location.'
                  html_description_preview:
                    type: string
                    description: 'A shorter description of the location. A preview of {@link ViewApi::$html_description_full}.'
                  id_industry:
                    type: int|null
                    description: 'The industry of the business. `null` in case when industry didn''t set for chosen business type, or for business types where set value which is absent.'
                  is_phone:
                    type: boolean
                    description: '`true` if to display phone number on location page. `False` otherwise.'
                  is_top_choice:
                    type: boolean
                    description: '`true` if WellnessLiving identifies this is a top choice location, `false` otherwise.'
                  k_business:
                    type: string
                    description: 'The key of the business this location belongs to.'
                  k_business_type:
                    type: string
                    description: 'The key of the business type this location belongs to.'
                  k_timezone:
                    type: string
                    description: 'The timezone. Primary key in {@link \AGeoTimezoneSql} table.'
                  s_address:
                    type: string
                    description: 'The physical address of the location.'
                  s_map:
                    type: string
                    description: 'A string that can be used in navigator programs.'
                  s_phone:
                    type: string
                    description: 'The phone number for the location.'
                  s_timezone:
                    type: string
                    description: 'The system name of the time zone.'
                  s_title:
                    type: string
                    description: 'The title of the location.'
                  text_address_individual:
                    type: string
                    description: 'The address of the location.'
                  text_alias:
                    type: string
                    description: 'The special system name, which can be used in custom location links. This is usually based on name of the location, with extra characters removed. However, it can also can be fully customized.'
                  text_business_type:
                    type: string
                    description: 'The name of the business type.'
                  text_city:
                    type: string
                    description: 'The city name of the location.'
                  text_country:
                    type: string
                    description: 'The country name of the location.'
                  text_industry:
                    type: string
                    description: 'The name of the industry of the business.'
                  text_mail:
                    type: string
                    description: 'The email address.'
                  text_postal:
                    type: string
                    description: 'Postal code of the location.'
                  text_region:
                    type: string
                    description: 'The region name of the location.'
                  text_region_code:
                    type: string
                    description: 'Region 2 or 3 letters abbreviation of the location. Can be empty, if abbreviation for region is not set.'
                  url_facebook:
                    type: string
                    description: 'The Facebook URL of the location.'
                  url_instagram:
                    type: string
                    description: 'The Instagram URL of the location.'
                  url_linkedin:
                    type: string
                    description: 'The Linked In URL of the location.'
                  url_map:
                    type: string
                    description: 'The URL of the location in Google Maps.'
                  url_microsite:
                    type: string
                    description: 'The URL to the location entry in the WellnessLiving Explorer listing.'
                  url_site:
                    type: string
                    description: 'The website URL of the location.'
                  url_twitter:
                    type: string
                    description: 'The URL of the location''s Twitter account.'
                  url_web:
                    type: string
                    description: 'The URL to the business''s Client Web App.'
                  url_youtube:
                    type: string
                    description: 'The YouTube URL of the location.'
      tags:
        - View-View
  '/Wl/Location/Flag/Flag.json':
    get:
      summary: 'Checks if user {@link FlagApi::$uid} is flagged in location {@link FlagApi::$k_location} or each of users {@link FlagApi::$a_uid} is flagged in location {@link FlagApi::$k_location}.'
      parameters:
        - name: a_uid
          in: query
          description: 'User keys. Each element is a primary key in the {@link \PassportLoginSql} table. <tt>null</tt> if not set.'
          schema:
            type: string[]|null
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key. <tt>null</tt> if not set.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_flag:
                    type: array
                    description: 'Array with structure:<dl> <dt>string <var>uid</var></dt> <dd>Key is passport login ID. Primary key in the {@link \PassportLoginSql} table.</dd> <dt>bool <var>is_flag</var></dt> <dd>Value: <tt>true</tt> if user is flagged; <tt>false</tt> otherwise.</dd> </dl> <tt>null</tt> until loaded or when <var>a_uid</var> was not set.'
                  a_restrictions_multiple:
                    type: array|null
                    description: 'Array, where keys are UIDs to be checked and values are same as {@link FlagApi::$a_restrictions_single}. <tt>null</tt> if user is not flagged in the location. This field is set, if API gets {@link FlagApi::$a_uid} and not {@link FlagApi::$uid} properties.'
                  a_restrictions_single:
                    type: array|null
                    description: '<dl> <dt>bool <var>is_book</var></dt> <dd>`true` if client cannot make new reservations.</dd> <dt>bool <var>is_purchase</var></dt> <dd>`true` if client cannot make new purchases.</dd> </dl> <tt>null</tt> if user is not flagged in the location. This field is set, if API gets {@link FlagApi::$uid} and not {@link FlagApi::$a_uid} properties.'
                  is_flag:
                    type: boolean
                    description: '<tt>true</tt> if the user is flagged and can make purchases, but cannot make new reservations, <tt>false</tt> if otherwise. <tt>null</tt> until loaded or when {@link FlagApi::$a_uid} was not set.'
      tags:
        - Flag-Flag
  '/Wl/Location/WorkTime/LocationWorkTime.json':
    post:
      summary: 'Saves working hours of the location.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_work_time:
                  type: array[]
                  description: 'The list of the location''s business hours. Each element has the next structure:<dl> <dt>int <var>i_day</var></dt> <dd>The day of the week, from Monday (1) to Sunday (7). One of the{@link \ADateWeekSid} constants.</dd> <dt>string <var>t_end</var></dt> <dd>The end time of work, formatted as HH:MM.</dd> <dt>string <var>t_start</var></dt> <dd>The start time of work, formatted as HH:MM</dd> </dl> Note that the days of the week that aren''t represented in this list will be saved as non-working days.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_location:
                  type: string
                  description: 'The location key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - WorkTime-LocationWorkTime
  '/Wl/Promotion/Index/PromotionIndex.json':
    get:
      summary: 'Gets a list of packages/passes/memberships.'
      parameters:
        - name: i_image_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default size.'
          schema:
            type: number
            format: int32
        - name: id_program_type
          in: query
          description: 'The program type ID, which will be one of the {@link \RsProgramTypeSid} constants. `0` to not filter Purchase Options with type of the Purchase Option.'
          schema:
            type: number
            format: int32
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion:
                    type: array[]
                    description: 'A list of introductory promotion offers available at the location. Every element is an array with the following keys: <dl> <dt> array <var>a_access</var> </dt> <dd> Information about services that can be attended with this pass or membership. <dl> <dt>array[] <var>a_class</var></dt> <dd> A list of available classes. Each element has the key `k_class`, where the primary key of the class can be found. Primary key in {@link \RsClassSql} table. </dd> <dt>array[] <var>a_event</var></dt> <dd> A list of available events. Each element has the key `k_class`, where the primary key of the event can be found. Primary key in {@link \RsClassSql} table. </dd> <dt>array[] <var>a_resource</var></dt> <dd> A list of available assets. Each element has the key `k_resource`, where the primary key of the asset can be found. Primary key in {@link \RsResourceSql} table. </dd> <dt>array[] <var>a_service</var></dt> <dd> A list of available appointment types. Each element has the key `k_service`, where the primary key of the appointment type can be found. Primary key in {@link \RsResourceSql} table. </dd> <dt>bool <var>is_class_all</var></dt> <dd>If `true`, any class in the business can be visited with this Purchase Option. If `false`, only selected classes can be visited. Selected classes can be found in the list of available classes and events.</dd> <dt>bool <var>is_event_all</var></dt> <dd>If `true`, if any event in the business can be visited with this Purchase Option. If `false`, if only selected events can be visited. Selected events can be found in the list of available classes and events.</dd> </dl> </dd> <dt> array[] <var>a_component</var> </dt> <dd> A list of components included in the Purchase Option if this Purchase Option is a package. If it''s not a package, the list will be always empty. If it''s a package, the list can still be empty if all its components were deactivated. This means that this array can''t be used to determine whether this is a package or not (check `id_program` or `id_program_type` value instead). There can be three types of components: events, Purchase Options, and products. Some fields can be different depending on type of the component, but each element of the array includes: <dl> <dt>int <var>id_purchase_item</var></dt> <dd>The type of the component. This can only be {@link \RsPurchaseItemSid::ENROLLMENT}, {@link \RsPurchaseItemSid::PROMOTION} or {@link \RsPurchaseItemSid::PRODUCT}.</dd> <dt>string <var>k_id</var></dt> <dd> The primary key of the component in the related table. This depends on the type of the component. The key of the event for {@link \RsPurchaseItemSid::ENROLLMENT}, the key of the Purchase Option for the {@link \RsPurchaseItemSid::PROMOTION}, the key of the product option for the {@link \RsPurchaseItemSid::PRODUCT}. Full information about events can be taken from the {@link EventListApi}. Purchase Options from the {@link PromotionIndexApi}. Full information about products are not available at this moment though API. </dd> <dt>int <var>i_quantity</var></dt> <dd>The quantity. If empty, it means the quantity is 1.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the component.</dd> </dl> </dd> <dt> array <var>a_image</var> </dt> <dd> This will be an empty array if the Purchase Option doesn''t have image. Otherwise, this will display the following information about the Purchase Option image: <dl> <dt>string <var>i_height</var></dt> <dd>The height of the image.</dd> <dt>string <var>i_width</var></dt> <dd>The width of the image.</dd> <dt>string <var>url-thumbnail</var></dt> <dd>The link to the image.</dd> </dl> </dd> <dt> array <var>a_visit_limit</var> </dt> <dd> Attendance restrictions, if available. If unavailable, this will be an empty array. Every element has a key, which is a type of the time period {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}, {@link \ADurationSid::YEAR}. The values are: <dl> <dt>int <var>i_limit</var></dt> <dd>The quantity of sessions every <var>i_period</var>.</dd> <dt>int <var>i_period</var></dt> <dd>The duration of the time period. This depends on a key of <var>a_visit_limit</var> array.</dd> <dt>int <var>i_roll_over_cap</var></dt> <dd>The limit number of rollover sessions.</dd> <dt>int <var>i_roll_over_expire</var></dt> <dd>The duration of the time period after which rolled over session will expire.</dd> <dt>int <var>id_roll_over_expire</var></dt> <dd> The type of <var>i_roll_over_expire</var> {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}, {@link \ADurationSid::YEAR}. </dd> <dt>int <var>id_limit_cycle</var></dt> <dd>The type of the limit cycle {@link \Wl\Promotion\Edit\Limit\Cycle\Sid}.</dd> <dt>bool <var>is_reconcile_visit</var></dt> <dd>Determines whether to reconcile unpaid sessions on restrictions reset.</dd> <dt>bool <var>is_roll_over_expire</var></dt> <dd>Determines if the rolled over session is expired.</dd> <dt>bool <var>is_roll_over_renew</var></dt> <dd>Determines whether to rollover sessions upon auto-renew.</dd> <dt>bool <var>is_rollup</var></dt> <dd>Determines Whether to rollover sessions.</dd> <dt>bool <var>is_visit_conversion</var></dt> <dd>Determines whether to convert remaining visits.</dd> </dl> </dd> <dt> string <var>dl_expire</var> </dt> <dd> The local expiration date. This is the last day of the Purchase Option''s active status. This is used only for the ''Expires on a certain date'' duration type. Otherwise, this should be ignored. </dd> <dt> int <var>i_duration</var> </dt> <dd> The number of periods for the "Period" duration type. For example, if the duration of the Purchase Option is 12 months, this field will be 12. </dd> <dt> int <var>i_limit</var> </dt> <dd> The number of visits that the owner of the Purchase Option can use. This will be `0` if the Purchase Option has unlimited visits. </dd> <dt> int <var>i_limit_duration</var> </dt> <dd> The maximum number of minutes or hours depending on <var>id_limit_duration</var> that the current promotion can be used in. </dd> <dt> int <var>id_limit_duration</var> </dt> <dd> The type of <var>i_limit_duration</var> {@link \ADurationSid::MINUTE} or {@link \ADurationSid::HOUR}. </dd> <dt> int <var>id_duration</var> </dt> <dd> The type of periods for the duration type "Period". For example, if the duration of the Purchase Option is 12 months, this field will be the ID of the month. See all the possible options here: {@link \ADurationSid}. </dd> <dt> int <var>id_duration_type</var> </dt> <dd> The type of the duration. This can be "Without End", "Expires on a certain date", "Period". See more information here: {@link \RsDurationTypeSid}. </dd> <dt> int <var>id_program</var> </dt> <dd> The type of the Purchase Option. The <var>id_program</var> relates to only one <var>id_program_type</var> and one <var>id_program_category</var>. See more information here: {@link \RsProgramSid}. </dd> <dt> int <var>id_program_category</var> </dt> <dd> The category of the program for promotions. The <var>id_program_category</var> relates to more than one <var>id_program</var>. See more information here: {@link \RsProgramCategorySid}. </dd> <dt> int <var>id_program_type</var> </dt> <dd> The ID of the promotion program type. The <var>id_program_type</var> relates to more than one <var>id_program</var>. See more information here: {@link \RsProgramTypeSid}. </dd> <dt> bool <var>is_direct_buy_only</var> </dt> <dd> If `true`, the pricing option can be sold only by direct link. This means it shouldn''t be shown in the store or explorer. Otherwise, this will be `false`. </dd> <dt> bool <var>is_introductory</var> </dt> <dd> If `true`, this promotion is for introductory clients. Otherwise, this will be `false`. </dd> <dt> bool <var>is_online</var> </dt> <dd> If `true` this promotion is available for online purchase. Otherwise, this will be `false`. </dd> <dt> string <var>k_promotion</var> </dt> <dd> The promotion key. Primary key in {@link \RsPromotionSql} table. </dd> <dt> string <var>m_price</var> </dt> <dd> The price. </dd> <dt> string <var>text_description</var> </dt> <dd> The description. </dd> <dt> int <var>text_program</var> </dt> <dd> The localized promotion program name corresponding to the value of <var>id_program</var>. </dd> <dt> string <var>text_title</var> </dt> <dd> The title. </dd> <dt> string <var>url_buy</var> </dt> <dd> The direct URL to the promotion purchase page. </dd> </dl>'
      tags:
        - Index-PromotionIndex
  '/Wl/Google/Login/GoogleLogin.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business in which authorization is performed.'
                s_application:
                  type: string|null
                  description: 'The application ID. This will be `null` for application use, which makes the request. Use the application credential from {@link GoogleCredential} for user authorization.'
                s_code:
                  type: string
                  description: 'The Google server authorization code.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-GoogleLogin
  '/Wl/Passport/Login/Info.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string|null
                    description: 'The current user key. This will be `null` if the user isn''t signed in.'
                  url_password_change:
                    type: string
                    description: 'A URL that a user can visit to reset their password.'
                  url_register:
                    type: string
                    description: 'The URL to the registration page.'
      tags:
        - Login-Info
  '/Wl/Family/Relation/Relation.json':
    delete:
      summary: 'Deletes family relation between 2 users.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                uid:
                  type: string
                  description: 'The key of the user whose relationships are being assessed.'
                uid_delete:
                  type: string
                  description: 'The key of the related user who {@link \Wl\Family\Relation\RelationApi::$uid} must be removed.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_relation:
                    type: array[]
                    description: 'Information about the user''s relationships. Every element has the following fields: <dl> <dt>int <var>id_family_relation</var></dt> <dd>The relationship type. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>int <var>id_family_relation_reverse</var></dt> <dd>The type of reciprocated relationship. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>string <var>text_name</var></dt> <dd>The name of the relation.</dd> <dt>string <var>text_name_first</var></dt> <dd>The first name of the relation.</dd> <dt>string <var>uid</var></dt> <dd>The key of the related user. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
      tags:
        - Relation-Relation
    get:
      summary: 'Gets relative list.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user whose relationships are being assessed.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_relation:
                    type: array[]
                    description: 'Information about the user''s relationships. Every element has the following fields: <dl> <dt>int <var>id_family_relation</var></dt> <dd>The relationship type. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>int <var>id_family_relation_reverse</var></dt> <dd>The type of reciprocated relationship. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>string <var>text_name</var></dt> <dd>The name of the relation.</dd> <dt>string <var>text_name_first</var></dt> <dd>The first name of the relation.</dd> <dt>string <var>uid</var></dt> <dd>The key of the related user. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
      tags:
        - Relation-Relation
    post:
      summary: 'Adds to user {@link \Wl\Family\Relation\RelationApi::$uid} relative {@link \Wl\Family\Relation\RelationApi::$a_new}.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_new:
                  type: array
                  description: 'The new relationship to be added to user, specified with {@link \Wl\Family\Relation\RelationApi::$uid}: <dl> <dt>int <var>id_family_relation</var></dt> <dd>The relationship type. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>string <var>uid</var></dt> <dd>The related user''s key. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
                k_business:
                  type: string
                  description: 'The business key.'
                uid:
                  type: string
                  description: 'The key of the user whose relationships are being assessed.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_relation:
                    type: array[]
                    description: 'Information about the user''s relationships. Every element has the following fields: <dl> <dt>int <var>id_family_relation</var></dt> <dd>The relationship type. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>int <var>id_family_relation_reverse</var></dt> <dd>The type of reciprocated relationship. One of the {@link \RsFamilyRelationSid} constants.</dd> <dt>string <var>text_name</var></dt> <dd>The name of the relation.</dd> <dt>string <var>text_name_first</var></dt> <dd>The first name of the relation.</dd> <dt>string <var>uid</var></dt> <dd>The key of the related user. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
      tags:
        - Relation-Relation
  '/Wl/Gym/Visit/VisitAdd.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_time:
                  type: array
                  description: 'The time of the visit, in the location''s timezone. An array with the following fields: <dl> <dt>int <var>i_hour</var></dt> <dd>The hour component.</dd> <dt>int <var>i_minute</var></dt> <dd>The minute component.</dd> <dt>bool <var>is_am</var></dt> <dd>If `true` the visit is in the AM. If `false` it is in the PM.</dd> </dl>'
                dt_date:
                  type: string
                  description: 'The date of visit, without a time component in MySQL format. Date is based on the timezone of the location.'
                is_pay:
                  type: boolean
                  description: 'Determines whether payment is required for the visit. `true` if payment is needed for the visit. `false` if visit should be not pay.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_location:
                  type: string
                  description: 'The location key.'
                uid:
                  type: string
                  description: 'The key of the user making the gym visit.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  url_catalog:
                    type: string
                    description: 'Url to the business catalog with items that can be used to pay for the visit.'
      tags:
        - Visit-VisitAdd
  '/Wl/Facebook/Login/FacebookLogin.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business in which authorization is performed.'
                s_application:
                  type: string|null
                  description: 'The application ID. This will be `null` if the application is being used to make the request. Use the application credential from the {@link FacebookCredential} class for user authorization.'
                s_token:
                  type: string
                  description: 'The Facebook token.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-FacebookLogin
  '/Wl/Microsoft/Login/MicrosoftLogin.json':
    delete:
      summary: 'Removes the association between a website client and a Microsoft account.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: 'The client for whom the Microsoft account will be unlinked.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-MicrosoftLogin
    get:
      summary: 'Collects data for the Microsoft login button.'
      parameters:
        - name: uid
          in: query
          description: 'The client for whom the Microsoft account will be unlinked.'
          schema:
            type: string
        - name: url_redirect
          in: query
          description: 'The Redirect URI for external applications. The link to the page on which Microsoft will return the result after authorization. * All possible links must be registered in the Microsoft application used for authorization. * WARNING: Do not use this link for a direct redirect. This will present a vulnerability. * A {@link LoginApi::$url_login} link will be generated along with this redirect URI. * When checking the received {@link LoginApi::$s_code} from Microsoft. The link must be sent along with it to the {@link LoginApi::post()} method.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_exists:
                    type: boolean
                    description: 'If `true`, the user has a bound Microsoft account. Otherwise, this will be `false`.'
                  url_login:
                    type: string
                    description: 'The Microsoft OAuth 2.0 authorization link.'
      tags:
        - Login-MicrosoftLogin
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_external:
                  type: boolean
                  description: 'If authorization is performed in a third-party application, set this flag in case of authorization errors.'
                k_business:
                  type: string
                  description: 'Business in which authorization is performed.'
                s_code:
                  type: string
                  description: 'The authorization code that the app requested.'
                s_state:
                  type: string
                  description: 'If a state parameter is included in the request, the same value should appear in the response. The app should verify that the state values in the request and response are identical.'
                url_redirect:
                  type: string
                  description: 'The Redirect URI for external applications. The link to the page on which Microsoft will return the result after authorization. * All possible links must be registered in the Microsoft application used for authorization. * WARNING: Do not use this link for a direct redirect. This will present a vulnerability. * A {@link LoginApi::$url_login} link will be generated along with this redirect URI. * When checking the received {@link LoginApi::$s_code} from Microsoft. The link must be sent along with it to the {@link LoginApi::post()} method.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Login-MicrosoftLogin
  '/Core/Request/Api/Application/Origin.json':
    delete:
      summary: 'Restricts access to API for all sites, which are given in the list.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_list:
                  type: array|null
                  description: 'A list of origins. The key is the URL on the site where API calls can be made. The value is a domain used to make API requests. This will be `null` in cases where the API requests are made directly to the WellnessLiving web server or if it isn''t initialized yet.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Application-Origin
    get:
      summary: 'Gets list of all sites, where usage of the API is allowed for the current application.'
      parameters:
        - name: a_list
          in: query
          description: 'A list of origins. The key is the URL on the site where API calls can be made. The value is a domain used to make API requests. This will be `null` in cases where the API requests are made directly to the WellnessLiving web server or if it isn''t initialized yet.'
          schema:
            type: array|null
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Application-Origin
    put:
      summary: 'Allows access to API for all sites, which are given in the list.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_list:
                  type: array|null
                  description: 'A list of origins. The key is the URL on the site where API calls can be made. The value is a domain used to make API requests. This will be `null` in cases where the API requests are made directly to the WellnessLiving web server or if it isn''t initialized yet.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Application-Origin
  '/Core/Passport/User/Email/EmailExist.json':
    get:
      summary: 'Checks if email address exists.'
      parameters:
        - name: text_email
          in: query
          description: 'The email address.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_exist:
                    type: boolean
                    description: 'Determines whether the email address exists.'
      tags:
        - Email-EmailExist
  '/Core/Passport/Login/Enter/Enter.json':
    post:
      summary: 'Generates notepad for user sign in form.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                json_data:
                  type: array
                  description: 'Additional data for user authorization.'
                s_captcha:
                  type: string
                  description: 'The answer to the captcha, if needed.'
                s_login:
                  type: string
                  description: 'The user''s login.'
                s_notepad:
                  type: string
                  description: 'A copy of the notepad that was used to hash the user password. See {@link \Core\Passport\Login\Enter\EnterApi::$s_password} for details.'
                s_password:
                  type: string
                  description: 'The hash of the user password. Use `Core_Passport_Login_Enter_NotepadModel.hash()` to evaluate the password hash.'
                s_remember:
                  type: string
                  description: 'Determines whether the user login and password should be remembered, and how they should be remembered. The accepted values are: <ul> <li>`''''` Empty line (default value) if you do not want to remember anything.</li> <li>`''login''` Remember only user login.</li> <li>`''password''` Remember user login and password.</li> </ul>'
                url_return:
                  type: string
                  description: 'Url of previous page if the user was redirected to login.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  url_redirect:
                    type: string
                    description: 'An optional URL for redirection after the user has signed in to the web application.'
      tags:
        - Enter-Enter
  '/Core/Passport/Login/Enter/Notepad.json':
    get:
      summary: 'Generates notepad for user sign in form.'
      parameters:
        - name: s_login
          in: query
          description: 'User login. If specified, additional information about user may be returned such as datacenter of the user. This value is only considered when {@link AmazonRegionSid::currentId()} is not empty, and {@link AmazonRegionSid::isRegionFixed()} returns `false`. In this case, regional cookie may be set, and the request may be forwarded internally to a different datacenter. `null` if additional information is not needed.'
          schema:
            type: string|null
        - name: s_type
          in: query
          description: 'The session type to store the notepad in. This will be an empty string for a temporary session. Otherwise, you can use `system` for a system session.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_region:
                    type: int|null
                    description: 'ID of the datacenter which is a preferred datacenter for the user specified in {@link NotepadApi::$s_login}. One of {@link AmazonRegionSid} constants. If ID of the datacenter returned in this property differs from the current datacenter, this means that this API request was forwarded to the datacenter returned here, and the notepad was created there. So that {@link EnterApi} must always go to the datacenter specified in this property. `null` if datacenter preference was not evaluated, or it is not known. In this case, the notepad is created in datacenter where the API request was initially sent.'
                  s_hash:
                    type: string
                    description: 'The hash type.'
                  s_notepad:
                    type: string
                    description: 'The notepad value, which is used to hash the user''s password. The password length is {@link NotepadApi::NONCE_LENGTH} characters.'
      tags:
        - Enter-Notepad
  '/Core/Passport/Login/Register/Register.json':
    post:
      summary: 'Saves startup data for user registration.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_data:
                  type: array
                  description: 'The additional data about new users. <dl> <dt>string <var>[k_business]</var></dt> <dd> The key of the business for the WellnessLiving project to register the user in. The behavior may vary for different applications. If the application is connected to a given business, this property can always be empty (all clients will be registered in the connected business). If the business is set for such an application and is different from the business from the application settings, an error will occur. If the application isn''t connected to the business, any business key can be set. This doesn''t require any special privileges, as registration is a publicly available action. </dd> </dl>'
                s_application:
                  type: string
                  description: 'The application ID. This is a business specific ID required to register clients.'
                s_mail:
                  type: string
                  description: 'The new client email address.'
                s_name_first:
                  type: string
                  description: 'The new client given name.'
                s_name_last:
                  type: string
                  description: 'The new client surname.'
                s_password:
                  type: string
                  description: 'The new client password.'
                url_confirm:
                  type: string
                  description: 'The URL to the confirmation page. This link is used in a confirmation email. If empty, URL to default page is used.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Register-Register
  '/Core/Passport/Login/Register/RegisterConfirm.json':
    post:
      summary: 'Confirms email of a new user and completes registration.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text_code:
                  type: string
                  description: 'The unique registration code.'
                text_login:
                  type: string
                  description: 'The user''s login.'
                text_mail:
                  type: string
                  description: 'The user''s email.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    description: 'The key of the new registered user.'
      tags:
        - Register-RegisterConfirm
  '/Core/Passport/Login/SignOut/SignOut.json':
    post:
      summary: 'Signs user out.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - SignOut-SignOut
  '/Wl/Pay/Bank/Card/List.json':
    get:
      summary: 'Retrieves information about user''s bank cards.'
      parameters:
        - name: k_business
          in: query
          description: 'ID of current business.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location to show information for. Primary key in {@link \RsLocationSql} table. <tt>0</tt> to use user''s home location.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'ID of a user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_bank_card:
                    type: array
                    description: 'A list of bank cards. The array keys are the card `k_pay_bank` IDs. Each element has the following keys: <dl> <dt>int <var>i_month</var></dt> <dd>The month when the payment card expires, represented by a number (1=January and 12=December).</dd> <dt>int <var>i_year</var></dt> <dd>The last two digits of the year when the payment card expires.</dd> <dt>int <var>id_card_system</var></dt> <dd>The card system ID. This is one of the {@link \ACardSystemSid} constants.</dd> <dt>bool <var>is_default</var></dt> <dd> If `true`, then this card is the user default card. If `false`, then this isn''t the user default card. </dd> <dt>string <var>k_pay_address</var></dt> <dd>The payment address ID. This refers to a physical address associated with a payment card.</dd> <dt>string <var>k_pay_bank</var></dt> <dd>The payment method ID. Each payment card for each user will have its own ID.</dd> <dt>string <var>text_name_card</var></dt> <dd> The payment card descriptor. This is typically the company name and the last 4 digits of the card (for example, visa-5903). </dd> <dt>string <var>text_name_holder</var></dt> <dd>The name of the card owner as it appears on the card.</dd> <dt>string <var>text_number</var></dt> <dd> A portion of the payment card number, used to identify the card. This is typically the last 4 digits of the card number. </dd> </dl>'
                  a_list:
                    type: array
                    description: 'List of bank cards. Duplicate of the {@link \Wl\Pay\Bank\Card\ListApi::$a_bank_card}.'
                  can_add:
                    type: boolean
                    description: 'Whether new card can be added. `true` if new cards can be added. `false` if new cards can not be added.'
      tags:
        - Card-List
  '/Wl/Pay/Transaction/Report/TransactionAllPayment.json':
    get:
      summary: 'Gets the daily transaction data.'
      parameters:
        - name: dl_date_end
          in: query
          description: 'The end date in local time to retrieve transactions for.'
          schema:
            type: string
        - name: dl_date_start
          in: query
          description: 'The end date in local time to retrieve transactions for.'
          schema:
            type: string
        - name: i_page
          in: query
          description: 'The page of the report, starting from 0. Each page will contain a maximum of {@link TransactionAllPaymentApi::LIMIT} rows.'
          schema:
            type: number
            format: int32
        - name: is_refresh
          in: query
          description: 'Determines whether the report should be refreshed. If `true`, this report should be refreshed. A report refresh can''t be requested while the report is being generated. Otherwise, `false` to only return contents of the report. If the report hasn''t yet been generated, it will automatically start generating in the background.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business for which report should be generated.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field:
                    type: string[]
                    description: 'A list of fields in the report. This array is effectively a title row for the table returned in {@link TransactionAllPaymentApi::$a_row}.'
                  a_row:
                    type: array
                    description: 'The report data. This is an indexed array in which one row is also an indexed array. Indexes of the columns correspond to the columns in {@link TransactionAllPaymentApi::$a_field}.'
                  a_warning:
                    type: string[]
                    description: 'The warning list of the report.'
                  dtu_complete:
                    type: string|null
                    description: 'The date and time if the report has completed generation. Otherwise, this will be `null`.'
                  dtu_queue:
                    type: string|null
                    description: 'The date and time if this report has been put in the generation queue. Otherwise, this will be `null`.'
                  dtu_start:
                    type: string|null
                    description: 'The date and time if generation of this report has started. Otherwise, this will be `null`.'
                  id_report_status:
                    type: number
                    format: int32
                    description: 'The report status. One of {@link \Wl\Report\Generator\ReportGeneratorStatusSid} constants.'
                  is_more:
                    type: boolean
                    description: 'Determines whether to show more rows in the report. If `true`, there are more report rows to get. Otherwise, `false` to indicate that all rows in the report have already been retrieved.'
                  is_report_complete:
                    type: boolean
                    description: 'Determines whether the report is complete. If the report is accessed on the current day, or is returning a result that was cached on the current day, it could be incomplete as not all the transactions for the day are present. If `true`, the report has been completed. Otherwise, `false`.'
      tags:
        - Report-TransactionAllPayment
  '/Wl/Pay/Account/Charge/Charge.json':
    post:
      summary: 'Allows the user account to be filled with a specified payment, or to perform the reset change manually.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                id_mode:
                  type: number
                  format: int32
                  description: 'The source mode key. One of the {@link \Wl\Mode\ModeSid} constants.'
                id_pay_account_charge:
                  type: number
                  format: int32
                  description: 'The account charge mode. One of the {@link \RsPayAccountChargeSid} constants.'
                is_staff:
                  type: boolean
                  description: 'If `true`, the account is filled by a staff member in the backend. Otherwise, this will be `false`.'
                k_business:
                  type: string
                  description: 'The ID of the business the user account belongs to. This shouldn''t be passed if a user account has already been created. In such cases, {@link ChargeApi::$k_pay_account} should be passed instead. If both the business ID and account ID passed, the system checks if the given business is the owner of the specified account.'
                k_pay_account:
                  type: string
                  description: 'The ID of the user account to refill. This may be 0 if a user account hasn''t been created yet. In such cases, {@link ChargeApi::$k_business} and {@link ChargeApi::$uid} should be passed instead. If not passed, the currency of account equals the default business currency.'
                m_amount:
                  type: string
                  description: 'The payment amount.'
                s_comment:
                  type: string
                  description: 'The transaction comment.'
                uid:
                  type: string
                  description: 'The ID of the user whose account is being refilled. This shouldn''t be passed if a user account has already been created. In such cases, {@link ChargeApi::$k_pay_account} should be passed instead. If both the user ID and account ID passed, the system checks if the given user is the owner of the specified account.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_purchase:
                    type: number
                    format: int32
                    description: 'The ID of the purchase that was created during payment. This value is only returned in cases where a purchase was created. A new purchase is created when {@link ChargeApi::$id_pay_account_charge} equals {@link \RsPayAccountChargeSid::AUTO}.'
      tags:
        - Charge-Charge
  '/Wl/Catalog/StaffApp/CatalogList/CatalogList.json':
    get:
      summary: ''
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business to get categories for.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location key. This can affect the list of displayed products.'
          schema:
            type: string
        - name: k_visit
          in: query
          description: 'The visit key to pay for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_shop_product:
                    type: array[]
                    description: 'Products in the online store category. Every element has the following fields: <dl> <dt> array <var>a_location</var> </dt> <dd> The list of locations where the current sale item is available. </dd> <dt> string[] <var>a_login_type</var> </dt> <dd> The list of login types available to purchase the sale item. Empty list means that the sale item is available to all login types. </dd> <dt> string[] <var>a_member_group</var> </dt> <dd> The list of member groups available to purchase the sale item. Primary keys in {@link \Wl\Member\Group\Sql} table. Empty list means that the sale item is available to all member groups. </dd> <dt> string[] <var>a_shop_category</var> </dt> <dd> A list of online store category keys. Primary keys in {@link \RsShopCategorySql} table. </dd> <dt> int <var>[id_program]</var> </dt> <dd> The program ID, set for promotions. One of the {@link \RsProgramSid} constants. <p>If `id_program` is {@link \RsProgramSid::INSURANCE_MEMBERSHIP}, then use:</p> <ul> <li>{@link \Wl\Insurance\Catalog\ProgramListApi} to obtain a list of active programs.</li> <li>{@link \Wl\Insurance\Enrollment\Field\EnrollmentFieldListApi} to get and validate fields for a given program.</li> <li>{@link \Wl\Catalog\Payment\PaymentApi} for a program purchase.</li> </ul> </dd> <dt> int <var>id_restriction</var> </dt> <dd> The restriction ID. One of the {@link \Wl\Shop\Product\PurchaseRestrictionSid} constants. </dd> <dt> int <var>id_sale</var> </dt> <dd> The sale category ID. One of the {@link \RsSaleSid} constants. </dd> <dt> bool <var>is_online_sell</var> </dt> <dd> Determines whether the sale item can be purchased by the client. </dd> <dt> bool <var>is_visit</var> </dt> <dd> This will be <tt>true</tt> if this Purchase Option is suitable to pay for the visit {@link \Wl\Catalog\StaffApp\CatalogList\CatalogListApi::$k_visit}. Otherwise, this will be <tt>false</tt>. If {@link \Wl\Catalog\StaffApp\CatalogList\CatalogListApi::$k_visit} is empty, this will always be `false`. </dd> <dt> string <var>k_id</var> </dt> <dd> The sale item ID. </dd> <dt> string <var>text_title</var> </dt> <dd> The category title. </dd> </dl>'
                  can_add:
                    type: boolean
                    description: 'If `true`, the current user is able to add the purchased item to the account.'
      tags:
        - CatalogList-CatalogList
  '/Wl/Catalog/StaffApp/CatalogCart/CatalogCart.json':
    get:
      summary: 'Calculates amount of cart.'
      parameters:
        - name: a_item
          in: query
          description: 'The list of cart items with the next structure: <dl> <dt>array [<var>a_config</var>]</dt> <dd> The list of purchase item additional options: <dl> <dt>string [<var>f_price</var>]</dt> <dd>The custom price.</dd> <dt>string [<var>dt_prorate</var>]</dt> <dd>The prorate date. This should be passed when <var>is_prorate</var>=<tt>true</tt>.</dd> <dt>string [<var>dt_start</var>]</dt> <dd>The promotion start date.</dd> <dt>bool [<var>is_prorate</var>]</dt> <dd>Determines whether to prorate the first payment.</dd> <dt>bool [<var>is_prorate_fix</var>]</dt> <dd>Determines if the client should pay for the first period now.</dd> <dt>bool [<var>is_prorate_only</var>]</dt> <dd>Determines whether the selected option ''pay prorate amount only'' should only include the prorate amount.</dd> <dt>string [<var>m_custom</var>]</dt> <dd>The custom price of the gift card.</dd> <dt>string [<var>dt_send_local</var>]</dt> <dd>The date when the gift card email must be sent.</dd> <dt>bool <var>is_mail</var></dt> <dd>If <tt>true</tt>, the gift card will be sent via email. Otherwise, <tt>false</tt> if the gift card will be printed.</dd> <dt>string [<var>s_mail</var>]</dt> <dd>The recipient''s email.</dd> <dt>string [<var>s_message</var>]</dt> <dd>The message.</dd> <dt>string <var>s_recipient</var></dt> <dd>The recipient''s name.</dd> <dt>string <var>s_sender</var></dt> <dd>The sender''s name.</dd> <dt>string <var>m_prorate_custom</var></dt> <dd>The amount of money for the prorate period. This should only be passed in the case of manual entry.</dd> <dt>string <var>k_coupon</var></dt> <dd>The coupon key.</dd> <dt>string <var>k_coupon_amount</var></dt> <dd>The coupon amount key.</dd> </dl> </dd> <dt>array [<var>a_tax_custom</var>]</dt> <dd> Information about taxes. If not passed, no custom taxes have been applied to the sale item. If a record is present, the tax is custom using the next structure: <dl> <dt>string <var>f_tax</var></dt> <dd>The tax amount.</dd> <dt>string <var>k_tax</var></dt> <dd>The tax keys. Primary key in {@link \RsTaxSql} table.</dd> </dl> </dd> <dt>int [<var>f_discount_percent</var>]</dt> <dd>The discount percentage, applied to the current item.</dd> <dt>int <var>i_quantity</var></dt> <dd>The quantity of sale items.</dd> <dt>int <var>id_sale</var></dt> <dd>The sale item type. One of the {@link \RsSaleSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The sale item key.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd> The store product option key. This will be <tt>null</tt> if the sale item has no options. Primary key in {@link \RsShopProductOptionSql} table. </dd> <dt>string [<var>m_discount_fix</var>]</dt> <dd>The fixed price discount, applied to the current item.</dd> <dt>string [<var>m_price_custom</var>]</dt> <dd>The custom price of the sale item. If not passed, no custom price has been applied to the sale item.</dd> </dl>'
          schema:
            type: array[]
        - name: f_discount_percent
          in: query
          description: 'The discount as a percentage.'
          schema:
            type: number
            format: float
        - name: is_check_cart_item
          in: query
          description: 'If `true`, every item is checked at the cart. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key. This field isn''t used directly, but described for correct JavaScript auto-generation.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The business location key.'
          schema:
            type: string
        - name: m_discount_flat
          in: query
          description: 'The manual discount amount in dollars, excluding tax. Staff members can set this amount when making a sale.'
          schema:
            type: string
        - name: m_tip
          in: query
          description: 'The amount of tips.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code. This will be `null` if not set yet.'
          schema:
            type: string|null
        - name: uid_current
          in: query
          description: 'The key of the current user.'
          schema:
            type: string
        - name: uid_customer
          in: query
          description: 'The key of the user who performed the purchase.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_discount_code:
                    type: array
                    description: 'A list of available discount codes with the next structure: <dl> <dt>bool <var>is_select</var></dt> <dd>`true` if this code is selected currently, `false` otherwise.</dd> <dt>string <var>k_discount_code</var></dt> <dd>Discount code key. Primary key from the {@link \Wl\Discount\Code\Sql} table.</dd> <dt>string <var>text_discount_code</var></dt> <dd>Value of the code that can be used to get discount.</dd> <dt>string <var>text_title</var></dt> <dd>Name of the code.</dd> </dl>'
                  is_commission:
                    type: boolean
                    description: 'Determines whether the business applied a commission at checkout.'
                  is_discount_code_mode_select:
                    type: boolean
                    description: 'Determines, how staff sees discount codes in Store. `true` as select field, `false` as input field.'
                  is_receipt_note:
                    type: boolean
                    description: 'Determines whether to display custom receipt notes at checkout.'
                  m_discount:
                    type: string
                    description: 'The discount amount in dollars, excluding tax.'
                  m_discount_total:
                    type: string
                    description: 'The discount amount applied to the cart''s total amount, including taxes.'
                  m_subtotal:
                    type: string
                    description: 'The subtotal amount.'
                  m_tax:
                    type: string
                    description: 'The amount of tax.'
                  m_tip_purchase:
                    type: string
                    description: 'The amount of appointment tips.'
                  m_total:
                    type: string
                    description: 'The cart''s total amount.'
                  text_error_code:
                    type: string
                    description: 'The discount code''s error message.'
                  text_receipt_note:
                    type: string
                    description: 'The custom receipt note''s text.'
      tags:
        - CatalogCart-CatalogCart
  '/Wl/Catalog/StaffApp/CatalogView/CatalogView.json':
    get:
      summary: 'Calculates price information about sale item.'
      parameters:
        - name: a_config
          in: query
          description: 'Configuration information about the item, which can specify prorated amounts. If set, these values will change the values returned by the endpoint call. <dl> <dt>float <var>f_promote</var></dt> <dd>The amount to prorate the item by.</dd> <dt>bool <var>is_prorate</var></dt> <dd>If <tt>true</tt>, this item is prorated.</dd> <dt>string <var>m_prorate_custom</var></dt> <dd>The custom prorate amount.</dd> </dl>'
          schema:
            type: array
        - name: a_tax
          in: query
          description: 'Contains information about edited taxes. This will be `null` if not set yet or default taxes are used. The key is the tax identifier, where the value is: <dl> <dt>string <var>k_tax</var></dt> <dd>The tax ID.</dd> <dt>string <var>m_tax_custom</var></dt> <dd>The amount of custom tax.</dd> </dl>'
          schema:
            type: array
        - name: i_quantity
          in: query
          description: 'The quantity of items.'
          schema:
            type: number
            format: int32
        - name: id_sale
          in: query
          description: 'The ID of the sale category. One of the {@link \RsSaleSid} constants.'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The business key. This will be `null` for the system business.'
          schema:
            type: string
        - name: k_id
          in: query
          description: 'The key of the sale item. This can be retrieved with the {@link CatalogListApi} endpoint (see the <var>a_shop_product</var> parameter).'
          schema:
            type: string
        - name: k_shop_product_option
          in: query
          description: 'The product option key.'
          schema:
            type: string
        - name: m_price
          in: query
          description: 'The custom price of the sale item.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The ID of the user who performed the actions.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_tax_data:
                    type: array
                    description: 'Contains information about calculated taxes. The structure of this array is described in {@link \RsTax::$a_tax}.'
                  m_prorate:
                    type: string
                    description: 'The prorated amount.'
                  m_subtotal:
                    type: string
                    description: 'The amount of the sale item, excluding taxes.'
                  m_tax:
                    type: string
                    description: 'The calculated amount of tax.'
                  m_total:
                    type: string
                    description: 'The calculated amount of the sale item, including taxes.'
      tags:
        - CatalogView-CatalogView
  '/Wl/Classes/Period/Modify/Modify.json':
    get:
      summary: 'Gets data for step in wizard.'
      parameters:
        - name: dt_end
          in: query
          description: 'The end date, returned in MySQL format and the local time.'
          schema:
            type: string
        - name: dt_start
          in: query
          description: 'The start date, returned in MySQL format and the local time.'
          schema:
            type: string
        - name: id_class_modify_action
          in: query
          description: 'The class modify step type. One of the {@link \RsClassModifyActionSid} constants.'
          schema:
            type: number
            format: int32
        - name: id_class_modify_mode
          in: query
          description: 'The modify mode type. One of the {@link \RsClassModifyModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: id_step
          in: query
          description: 'The class modify action type. One of the {@link \RsClassModifyModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_back
          in: query
          description: 'The step direction. `true` - step forward. `false` - step back. After each step, this variable sets to the default position. By default, the step direction is forward.'
          schema:
            type: bool|null
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The class period key. This will be empty if not set yet.'
          schema:
            type: string
        - name: s_id
          in: query
          description: 'The unique hash string. This hash string is a hash of the {@link \RsClassModify} object. It needs to work with the same {@link \RsClassModify} object on each step.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_get:
                    type: array
                    description: 'Step information, depending on the steps.'
      tags:
        - Modify-Modify
    post:
      summary: 'Makes step in wizard.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_set:
                  type: array
                  description: 'The list of data to save.'
                dt_end:
                  type: string
                  description: 'The end date, returned in MySQL format and the local time.'
                dt_start:
                  type: string
                  description: 'The start date, returned in MySQL format and the local time.'
                id_class_modify_action:
                  type: number
                  format: int32
                  description: 'The class modify step type. One of the {@link \RsClassModifyActionSid} constants.'
                id_class_modify_mode:
                  type: number
                  format: int32
                  description: 'The modify mode type. One of the {@link \RsClassModifyModeSid} constants.'
                id_step:
                  type: number
                  format: int32
                  description: 'The class modify action type. One of the {@link \RsClassModifyModeSid} constants.'
                is_back:
                  type: bool|null
                  description: 'The step direction. `true` - step forward. `false` - step back. After each step, this variable sets to the default position. By default, the step direction is forward.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_class_period:
                  type: string
                  description: 'The class period key. This will be empty if not set yet.'
                s_id:
                  type: string
                  description: 'The unique hash string. This hash string is a hash of the {@link \RsClassModify} object. It needs to work with the same {@link \RsClassModify} object on each step.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  k_class:
                    type: string|null
                    description: 'The class ID.'
      tags:
        - Modify-Modify
  '/Wl/Event/Book/EventView/Element.json':
    get:
      summary: 'Retrieves information about event item.'
      parameters:
        - name: dl_book_available_end
          in: query
          description: 'The last available date for booking. If this is set and {@link ElementApi::$dl_book_available_start} is a set list of sessions available for booking, {@link ElementApi::$a_book_available} should match given date range.'
          schema:
            type: string|null
        - name: dl_book_available_start
          in: query
          description: 'The first available date for booking. If this is set and {@link ElementApi::$dl_book_available_end} is a set list of sessions available for booking {@link ElementApi::$a_book_available} should match given date range.'
          schema:
            type: string|null
        - name: i_image_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_staff_image_height
          in: query
          description: 'Staff image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: i_staff_image_width
          in: query
          description: 'Staff image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: number
            format: int32
        - name: is_schedule_group
          in: query
          description: '`true` if schedule should be grouped by location time and staff, `false` if all schedule elements should be independent.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Key of a business. Primary key in {@link \RsBusinessSql} table to that belongs requested event(s).'
          schema:
            type: string|null
        - name: k_event
          in: query
          description: 'The event key. You can specify {@link ElementApi::$s_event} instead to get information for a bulk of events.'
          schema:
            type: string
        - name: s_event
          in: query
          description: 'A list of event keys serialized with JSON. Specify instead of {@link ElementApi::$k_event} to get information for a bulk of events.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_age_restrictions:
                    type: array
                    description: 'Displays information about age restrictions for this event. An empty array if there are no age restrictions. <dl> <dt>int|null <var>i_age_from</var></dt> <dd>The minimum age for participation in the event. `null` if there''s no minimum age set or information isn''t available.</dd> <dt>int|null <var>i_age_to</var></dt> <dd>The age limit for participation in the event. `null` if there''s no age limit set or information isn''t available.</dd> <dt>bool <var>is_age_public</var></dt> <dd>`true` if age restrictions are public and available, `false` if they''re hidden. When restrictions are hidden and the current user isn''t a staff member, the age range will be empty.</dd> </dl>'
                  a_book_available:
                    type: array[]
                    description: 'Retrieves information about an event item. Received only if {@link ElementApi::$k_event} has been specified. In this case other fields aren''t receivers. <dl> <dt>string <var>dt_date</var></dt> <dd>Date/time when session starts. In UTC.</dd> <dt>string <var>k_class_period</var></dt> <dd>Class session primary keys. Primary keys in table {@link \RsClassPeriodSql}.</dd> </dl>'
                  a_business_policy:
                    type: array
                    description: 'Displays all business policies connected to clients and bookings. Contains the same structure as the {@link BusinessConfigApi::$a_business_policy} property. If policies are overwritten for a certain event, the impacted event''s policies will be in this result. Otherwise, the result will display the business policies.'
                  a_class_logo:
                    type: array
                    description: 'The logo of event. <dl> <dt>int [<var>i_height</var>]</dt> <dd>Is returned only if staff has photo. Image height.</dd> <dt>int [<var>i_width</var>]</dt> <dd>Is returned only if staff has photo. Image width.</dd> <dt>int [<var>id_gender</var>] </dt> <dd>Is returned only if staff does not have photo. ID of staff gender. One of {@link \AGenderSid} constants.</dd> <dt>string [<var>url_logo</var>]</dt> <dd>Is returned only if staff has photo. URL to image.</dd> </dl>'
                  a_class_tab:
                    type: string[]
                    description: 'The list of keys from class tab.+ Primary keys in {@link \Wl\Classes\Tab\Sql\ClassTab\Sql} table.'
                  a_event:
                    type: array
                    description: 'Displays information for a bulk of events. Received only if {@link ElementApi::$s_event} has been specified. In this case, other fields aren''t receivers. The event keys of this array. Values of this array and sub arrays with keys that correspond to all fields in this table that may be received.'
                  a_schedule:
                    type: array[]
                    description: 'A list of event sessions. Every element has the following next keys: <dl> <dt> array <var>a_day</var> </dt> <dd> A list of days of the week when the session has occurred. Keys - a number corresponding to a day of the week (0 - Sunday, 6 - Saturday). The value is always <tt>true</tt>. </dd> <dt>array <var>a_repeat</var></dt> <dd> Repeat periodicity instructions. <dl> <dt>int <var>i_repeat</var></dt> <dd>Count of the periods which specified in <var>id_repeat</var>.</dd> <dt>int <var>id_repeat</var></dt> <dd>Measuring unit of <var>i_repeat</var> (week, month, year).</dd> </dl> </dd> <dt> array[] <var>a_staff</var> </dt> <dd> A list of staff members who conduct the session. Every element has the following next keys: <dl> <dt>string <var>k_staff</var></dt> <dd>The staff member key. Primary key in {@link \RsStaffSql} table.</dd> <dt>string <var>s_name</var></dt> <dd>The staff member name.</dd> <dt>string <var>s_surname</var></dt> <dd>The first letter of staff member''s surname.</dd> </dl> </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> List of virtual locations. Primary keys in {@link \RsLocationSql} table. </dd> <dt> string <var>dt_end</var> </dt> <dd> The end date of the session. The local date without time. </dd> <dt> string <var>dt_start</var> </dt> <dd> The start date of the session. The local date without time. </dd> <dt> bool <var>hide_location</var> </dt> <dd> `true` if the location should be hidden in the event details. Hide if the event is virtual or if the business only has one location. `false` otherwise. </dd> <dt> int <var>i_capacity</var> </dt> <dd> The class capacity. </dd> <dt> int <var>i_duration</var> </dt> <dd> The duration of the class in seconds. </dd> <dt> bool <var>is_virtual</var> </dt> <dd> This will be `true` if the session is not held in person but offered remotely. It will be `false` otherwise. </dd> <dt> string <var>f_price</var> </dt> <dd> The price of the session, if it can be purchased separately. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The key of the class period. </dd> <dt> string <var>k_location</var> </dt> <dd> The key of the location where the session is held. </dd> <dt> string <var>s_location</var> </dt> <dd> The location title. </dd> <dt> string <var>s_time</var> </dt> <dd> The time when session occurred. A textual representation of the start and end time of a session. Example: <tt>10:00 am - 11:00 am</tt> </dd> <dt> string <var>s_timezone</var> </dt> <dd> The name of the timezone in which the session is held. </dd> <dt> string <var>text_room</var> </dt> <dd> The room of the event. </dd> </dl>'
                  a_staff_logo:
                    type: array
                    description: 'Photos of staff members. Keys are the keys of staff members. The values are the following: <dl> <dt>int <var>i_height</var></dt> <dd>Image height.</dd> <dt>int <var>i_width</var></dt> <dd>Image width.</dd> <dt>string <var>uid</var></dt> <dd>Key of the user. Primary key from {@link \PassportLoginSql} table.</dd> <dt>string <var>url_logo</var></dt> <dd>URL to image.</dd> </dl>'
                  a_visits_required:
                    type: array[]
                    description: 'A list of classes and events that clients should attend before this one. <dl> <dt>int <var>i_count</var></dt> <dd>The number of visits required.</dd> <dt>int <var>i_has</var></dt> <dd>The number of visits the client has already attended.</dd> <dt>bool <var>is_event</var></dt> <dd>`true` if this is an event, `false` if this is a class.</dd> <dt>string <var>k_class</var></dt> <dd>The key of the class or event.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the class or event.</dd> </dl>'
                  dt_book_date:
                    type: string|null
                    description: 'That date that should be used to go to the booking wizard.'
                  dt_early:
                    type: string|null
                    description: 'The early registration date of the event.'
                  dt_end:
                    type: string
                    description: 'The end date of the event.'
                  dt_start:
                    type: string
                    description: 'The start date of the event.'
                  hide_application:
                    type: boolean
                    description: 'Whether event will be hidden in the White Label mobile application. <tt>true</tt> means that event will not be displayed, <tt>false</tt> otherwise.'
                  html_description:
                    type: string|null
                    description: 'The description of the event.'
                  html_special:
                    type: string
                    description: 'Special instruction for the event.'
                  i_session:
                    type: number
                    format: int32
                    description: 'The session count.'
                  i_session_remain:
                    type: number
                    format: int32
                    description: 'The remaining session count.'
                  id_virtual_provider:
                    type: int|null
                    description: 'The virtual provider ID. One of the {@link VirtualProviderSid} constants. `null` if an in-person event.'
                  is_age_restrict:
                    type: boolean
                    description: 'Whether the event is age restricted. `true` if the event is age restricted, `false` if the event is not.'
                  is_availability_checked:
                    type: boolean
                    description: '`true` if the event availability was checked; `false` if the event has too many sessions and calculating the availability of each one takes a lot of time.'
                  is_book:
                    type: boolean
                    description: '<tt>true</tt> if the event is already booked; <tt>false</tt> if the event isn''t booked.'
                  is_bookable:
                    type: boolean
                    description: '`true` If the event is bookable; `false` if the event isn''t bookable.'
                  is_full:
                    type: boolean
                    description: '`true` if there are no free spots in the event; booking is available only into the wait list. `false` otherwise.'
                  is_promotion_only:
                    type: boolean
                    description: '`true` if the event can be paid with a Purchase Option only. `false` if full event purchases or single session purchases are permitted.'
                  is_prorate:
                    type: boolean
                    description: '`true` if clients, when they book event, which has been started, can pay only for the sessions in the future. `false` if clients, when they book event, has to pay for the entire event and number of left in the future sessions does not matter. Copy of {@link \RsClassSql}.<tt>is_prorate</tt>.'
                  is_single_session_buy:
                    type: boolean
                    description: 'Determines whether this event allows paying for a single session.'
                  is_virtual:
                    type: boolean
                    description: '<tt>true</tt> -if event is virtual; <tt>false</tt> - otherwise.'
                  k_book_class_period:
                    type: string
                    description: 'The ID of the session which should be used to go to the booking wizard.'
                  m_price:
                    type: string
                    description: 'The price of a single session of the event.'
                  m_price_total:
                    type: string
                    description: 'The price of the all sessions of the event.'
                  m_price_total_early:
                    type: string|null
                    description: 'Price of the full event, should be used as full price while {@link ElementApi::$dt_early} is actual.'
                  s_deny_reason:
                    type: string
                    description: 'The reason why the event can''t be booked. Empty if {@link ElementApi::$k_book_class_period} isn''t empty.'
                  s_title:
                    type: string|null
                    description: 'The title of the event.'
                  text_end:
                    type: string
                    description: 'End date of the event in user-friendly format.'
                  text_start:
                    type: string
                    description: 'Start date of the event in user-friendly format.'
                  url_book:
                    type: string|null
                    description: 'Link to the start of the booking wizard to book the closed session from this event or the entire event. Can be `null` if there is no available for booking sessions.'
                  xml_description:
                    type: string|null
                    description: 'The description of the event.'
      tags:
        - EventView-Element
  '/Wl/Event/Book/EventList/List.json':
    get:
      summary: 'Retrieves a list of events.'
      parameters:
        - name: id_status
          in: query
          description: 'Defines how the event availability flag filter should be applied. One of {@link \AFlagSid} constants. * {@link \AFlagSid::ON} to show only available events. * {@link \AFlagSid::OFF} to show only unavailable events. * {@link \AFlagSid::ALL} to show all events (available and unavailable).'
          schema:
            type: number
            format: int32
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: k_class_tab
          in: query
          description: 'The key of the category tab. If empty, select only elements with not specified book tab.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user''s key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_event:
                    type: string[]
                    description: 'A list of event identifiers. The order of items in this array matches the order in which elements should be displayed.'
                  a_event_available:
                    type: array
                    description: 'Event availability value. Unavailable events are those that cannot be booked, but they can be shown to the client (for example, under the "not available" filter). The array contains: * Key - Class (event) key. Primary key from {@link \RsClassSql} table. * Value - Event availability value: `true` - available, `false` - not available.'
                  is_virtual_service:
                    type: boolean
                    description: '<tt>true</tt> if exist at least one virtual event by specific {@link ListApi::$k_business} and {@link ListApi::$k_class_tab}, <tt>false</tt> otherwise.'
      tags:
        - EventList-List
  '/Wl/Schedule/ScheduleList/StaffApp/ScheduleList.json':
    get:
      summary: 'Gets schedule of business {@link ScheduleListApi::$k_business} for day {@link ScheduleListApi::$dt_date}.'
      parameters:
        - name: dl_end
          in: query
          description: 'The end date of the range from which the list of schedule sessions should be retrieved. This will be `null` if the range has no end date. If this value is used, {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dt_date} should not be set.'
          schema:
            type: string
        - name: dl_start
          in: query
          description: 'The start date of the range from which the list of scheduled sessions should be retrieved. This will be `null` if the range has no start date. If this value is used, {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dt_date} should not be set.'
          schema:
            type: string
        - name: dt_date
          in: query
          description: 'The date of the sessions in Coordinated Universal Time (UTC) and MySQL format. If this value is used, then {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dl_end} and {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dl_start} should not be set.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_schedule:
                    type: array[]
                    description: 'The sessions present on the business schedule. These are sorted chronologically in ascending order. Every element has the following keys: <dl> <dt> string[] <var>a_note</var> </dt> <dd> List of notes. </dd> <dt> array[]|null <var>a_quiz</var> </dt> <dd> List of quizzes. Has next structure: <dl> <dt>bool <var>id_status</var></dt> <dd> Response status ID. One of {@link ResponseStatusSid} constants. </dd> <dt>bool <var>is_hide</var></dt> <dd>Whether it''s hidden. `true` quiz is hidden, `false` otherwise.</dd> <dt>bool <var>is_require</var></dt> <dd>Whether it''s required. `true` quiz is required, `false` otherwise.</dd> <dt>string <var>k_quiz</var></dt> <dd>Quiz key, primary key in {@link \Core\Quiz\QuizSql} table.</dd> <dt>string <var>k_quiz_login</var></dt> <dd>Quiz login key, primary key in {@link \Wl\Quiz\Login\QuizLoginSql} table.</dd> <dt>string <var>k_quiz_response</var></dt> <dd>Quiz response key, primary key in {@link \Wl\Quiz\Response\ResponseSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>Quiz title.</dd> </dl> `null` if no quizzes for schedule item. </dd> <dt> array <var>a_appointment_visit_info</var> </dt> <dd> Additional visit information about this appointment. Empty array if it''s a class. <dl> <dt> int <var>id_visit</var> </dt> <dd> Visit id. One of {@link \Wl\Visit\VisitSid} constants. </dd> <dt> bool <var>is_confirmed</var> </dt> <dd> `true` means that appointment was requested and confirmed by the staff. </dd> <dt> bool <var>is_deny</var> </dt> <dd> `true` means that appointment was requested and denied by the staff. </dd> <dt> bool <var>is_notify_request_accept</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be confirmed by the staff. </dd> <dt> bool <var>is_notify_request_deny</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be denied by the staff. </dd> <dt> bool <var>is_request</var> </dt> <dd> `true` means that appointment was requested, but not confirmed by the staff. </dd> </dl> </dd> <dt> string[] <var>a_resource</var> </dt> <dd> A list of assets involved in the session. Primary keys in {@link \RsResourceSql} table. </dd> <dt> string[] <var>a_resource_removed</var> </dt> <dd> List of removed assets involved in the session. Primary keys in {@link \RsResourceSql} table. </dd> <dt> string[] <var>a_staff</var> </dt> <dd> A list of staff members who will conduct the session. Primary keys in {@link \RsStaffSql} table. Deprecated, use <var>a_staff_list</var> instead. </dd> <dt> array <var>a_staff_info</var> </dt> <dd> Information about staff members who conduct this session. The keys are primary keys in {@link \RsStaffSql} table. Values are array with data: <dl> <dt> string <var>text_staff</var> </dt> <dd> Staff full name. </dd> <dt> bool <var>is_staff_change</var> </dt> <dd> <tt>true</tt> means staff is substituted, <tt>false</tt> simple staff member. </dd> <dt> string <var>k_staff</var> </dt> <dd> Staff key. Primary keys in {@link \RsStaffSql} table. </dd> </dl> </dd> <dt> string[] <var>a_user</var> </dt> <dd> For appointments, this is a list of the names of users who are scheduled to attend the session. </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> List of virtual locations. Each value is primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time of the session in UTC. </dd> <dt> string <var>dt_date_cancel</var> </dt> <dd> The date/time when the session was canceled in UTC. Only used for appointments. </dd> <dt> string <var>dt_date_local</var> </dt> <dd> The date/time of the session in local time. </dd> <dt> bool <var>has_quiz_uncompleted</var> </dt> <dd> `true` if has uncompleted quizzes, `false` otherwise. </dd> <dt> int <var>i_book</var> </dt> <dd> The number of clients booked into the session. </dd> <dt> int <var>i_capacity</var> </dt> <dd> The maximum capacity of the session. </dd> <dt> int <var>i_duration</var> </dt> <dd> The duration of the session in minutes. </dd> <dt> int <var>i_padding_after</var> </dt> <dd> The padding time after the session in minutes. Only used for appointments. </dd> <dt> int <var>i_padding_before</var> </dt> <dd> The padding time before the session in minutes. Only used for appointments. </dd> <dt> int <var>i_start</var> </dt> <dd> The start time in minutes after midnight. For example, a class starting at 10:30 in the morning local time will have an `i_start` value of 630. </dd> <dt> int <var>i_wait</var> </dt> <dd> Count clients on waitlist. </dd> <dt> int <var>id_option</var> </dt> <dd> Appointment title display style. Set only for appointments, for others it will be equal to 0. Constants from {@link \Wl\Schedule\Design\OptionSid}. </dd> <dt> int <var>id_service</var> </dt> <dd> The ID of the service type. One of {@link \RsServiceSid} constants. </dd> <dt> bool <var>is_arrive</var> </dt> <dd> For appointments: <tt>true</tt> if user has checked-in; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> bool <var>is_pay</var> </dt> <dd> For appointments: <tt>true</tt> if appointment is paid; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> bool <var>is_repeat</var> </dt> <dd> For appointments: <tt>true</tt> if appointment is recurring; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> string <var>k_appointment</var> </dt> <dd> The appointment key. Primary key in {@link \RsAppointmentSql} table. If the session isn''t an appointment, this will be `0`. </dd> <dt> string <var>dt_confirm</var> </dt> <dd> Confirmation date for appointment in MySQL format. Will be zero date + time in case appointment is not yet confirmed by client. </dd> <dt> string <var>k_class</var> </dt> <dd> The class key. Primary key in {@link \RsClassSql} table. If the session isn''t a class, this will be `0`. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The class period key. Primary key in {@link \RsClassPeriodSql} table. If the session isn''t a class, this will be `0`. </dd> <dt> string <var>k_location</var> </dt> <dd> The location key for where the session takes place. Primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>k_service</var> </dt> <dd> This is the key of the appointment type, while `k_appointment` is the specific instance. Primary key in {@link \RsServiceSql} table. For other cases, this will be `0`. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the session. </dd> <dt> bool <var>show_quiz_icon</var> </dt> <dd> `true` when need show quiz icon, `false` otherwise. </dd> <dt> string <var>text_alert</var> </dt> <dd> Alert message. </dd> <dt> string <var>text_color_background</var> </dt> <dd> The background color in hex representation as used on WellnessLiving. </dd> <dt> string <var>text_color_border</var> </dt> <dd> The border color in hex representation as used on WellnessLiving. </dd> <dt> string <var>text_quiz_title</var> </dt> <dd> Title for quiz icon. </dd> <dt> bool<var>is_virtual_service</var> </dt> <dd> <tt>true</tt> - If the business has at least one virtual service, <tt>false</tt> - otherwise. </dd> <dt> string<var>url_image</var> </dt> <dd> URL to image. Empty if image not exist. </dd> </dl>'
                  is_virtual_service:
                    type: boolean
                    description: '<tt>true</tt> - If the business has at least one virtual service, <tt>false</tt> - otherwise.'
      tags:
        - StaffApp-ScheduleList
  '/Wl/Schedule/ScheduleList/StaffApp/ScheduleListByToken.json':
    get:
      summary: 'Gets schedule of business {@link ScheduleListApi::$k_business} for day {@link ScheduleListApi::$dt_date}.'
      parameters:
        - name: dl_end
          in: query
          description: 'The end date of the range from which the list of schedule sessions should be retrieved. This will be `null` if the range has no end date. If this value is used, {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dt_date} should not be set.'
          schema:
            type: string
        - name: dl_start
          in: query
          description: 'The start date of the range from which the list of scheduled sessions should be retrieved. This will be `null` if the range has no start date. If this value is used, {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dt_date} should not be set.'
          schema:
            type: string
        - name: dt_date
          in: query
          description: 'The date of the sessions in Coordinated Universal Time (UTC) and MySQL format. If this value is used, then {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dl_end} and {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi::$dl_start} should not be set.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: text_token
          in: query
          description: 'The security token.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_schedule:
                    type: array[]
                    description: 'The sessions present on the business schedule. These are sorted chronologically in ascending order. Every element has the following keys: <dl> <dt> string[] <var>a_note</var> </dt> <dd> List of notes. </dd> <dt> array <var>a_appointment_visit_info</var> </dt> <dd> Additional visit information about this appointment. Empty array if it''s a class. <dl> <dt> int <var>id_visit</var> </dt> <dd> Visit id. One of {@link \Wl\Visit\VisitSid} constants. </dd> <dt> bool <var>is_confirmed</var> </dt> <dd> `true` means that appointment was requested and confirmed by the staff. </dd> <dt> bool <var>is_deny</var> </dt> <dd> `true` means that appointment was requested and denied by the staff. </dd> <dt> bool <var>is_notify_request_accept</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be confirmed by the staff. </dd> <dt> bool <var>is_notify_request_deny</var> </dt> <dd> `true` means that the client will receive a notification, if appointment will be denied by the staff. </dd> <dt> bool <var>is_request</var> </dt> <dd> `true` means that appointment was requested, but not confirmed by the staff. </dd> </dl> </dd> <dt> string[] <var>a_resource</var> </dt> <dd> A list of assets involved in the session. Primary keys in {@link \RsResourceSql} table. </dd> <dt> string[] <var>a_staff</var> </dt> <dd> A list of staff members who will conduct the session. Primary keys in {@link \RsStaffSql} table. Deprecated, use <var>a_staff_list</var> instead. </dd> <dt> array <var>a_staff_info</var> </dt> <dd> Information about staff members who conduct this session. The keys are primary keys in {@link \RsStaffSql} table. Values are array with data: <dl> <dt> string <var>text_staff</var> </dt> <dd> Staff full name. </dd> <dt> bool <var>is_staff_change</var> </dt> <dd> <tt>true</tt> means staff is substituted, <tt>false</tt> simple staff member. </dd> <dt> string <var>k_staff</var> </dt> <dd> Staff key. Primary keys in {@link \RsStaffSql} table. </dd> </dl> </dd> <dt> string[] <var>a_user</var> </dt> <dd> For appointments, this is a list of the names of users who are scheduled to attend the session. </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> List of virtual locations. Each value is primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time of the session in UTC. </dd> <dt> string <var>dt_date_cancel</var> </dt> <dd> The date/time when the session was canceled in UTC. Only used for appointments. </dd> <dt> string <var>dt_date_local</var> </dt> <dd> The date/time of the session in local time. </dd> <dt> int <var>i_book</var> </dt> <dd> The number of clients booked into the session. </dd> <dt> int <var>i_capacity</var> </dt> <dd> The maximum capacity of the session. </dd> <dt> int <var>i_duration</var> </dt> <dd> The duration of the session in minutes. </dd> <dt> int <var>i_padding_after</var> </dt> <dd> The padding time after the session in minutes. Only used for appointments. </dd> <dt> int <var>i_padding_before</var> </dt> <dd> The padding time before the session in minutes. Only used for appointments. </dd> <dt> int <var>i_start</var> </dt> <dd> The start time in minutes after midnight. For example, a class starting at 10:30 in the morning local time will have an `i_start` value of 630. </dd> <dt> int <var>i_wait</var> </dt> <dd> Count clients on waitlist. </dd> <dt> int <var>id_option</var> </dt> <dd> Appointment title display style. Set only for appointments, for others it will be equal to 0. Constants from {@link \Wl\Schedule\Design\OptionSid}. </dd> <dt> int <var>id_service</var> </dt> <dd> The ID of the service type. One of {@link \RsServiceSid} constants. </dd> <dt> bool <var>is_arrive</var> </dt> <dd> For appointments: <tt>true</tt> if user has checked-in; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> bool <var>is_pay</var> </dt> <dd> For appointments: <tt>true</tt> if appointment is paid; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> bool <var>is_repeat</var> </dt> <dd> For appointments: <tt>true</tt> if appointment is recurring; <tt>false</tt> otherwise. For classes always <tt>null</tt>. </dd> <dt> string <var>k_appointment</var> </dt> <dd> The appointment key. Primary key in {@link \RsAppointmentSql} table. If the session isn''t an appointment, this will be `0`. </dd> <dt> string <var>dt_confirm</var> </dt> <dd> Confirmation date for appointment in MySQL format. Will be zero date + time in case appointment is not yet confirmed by client. </dd> <dt> string <var>k_class</var> </dt> <dd> The class key. Primary key in {@link \RsClassSql} table. If the session isn''t a class, this will be `0`. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The class period key. Primary key in {@link \RsClassPeriodSql} table. If the session isn''t a class, this will be `0`. </dd> <dt> string <var>k_location</var> </dt> <dd> The location key for where the session takes place. Primary key in {@link \RsLocationSql} table. </dd> <dt> string <var>k_service</var> </dt> <dd> This is the key of the appointment type, while `k_appointment` is the specific instance. Primary key in {@link \RsServiceSql} table. For other cases, this will be `0`. </dd> <dt> string <var>s_title</var> </dt> <dd> The name of the session. </dd> <dt> string <var>text_alert</var> </dt> <dd> Alert message. </dd> <dt> string <var>text_color_background</var> </dt> <dd> The background color in hex representation as used on WellnessLiving. </dd> <dt> string <var>text_color_border</var> </dt> <dd> The border color in hex representation as used on WellnessLiving. </dd> <dt> bool<var>is_virtual_service</var> </dt> <dd> <tt>true</tt> - If the business has at least one virtual service, <tt>false</tt> - otherwise. </dd> <dt> string<var>url_image</var> </dt> <dd> URL to image. Empty if image not exist. </dd> </dl>'
                  is_virtual_service:
                    type: boolean
                    description: '<tt>true</tt> - If the business has at least one virtual service, <tt>false</tt> - otherwise.'
      tags:
        - StaffApp-ScheduleListByToken
  '/Wl/Profile/Form/Response/ResponseList.json':
    get:
      summary: ''
      parameters:
        - name: hide_completed
          in: query
          description: 'Defines whether completed forms should not be included in result list of forms. `true` to exclude completed forms from result. `false` to include completed forms to result.'
          schema:
            type: boolean
        - name: hide_optional
          in: query
          description: 'Defines whether optional uncompleted forms should not be included in result list of forms. `true` to exclude optional uncompleted forms from result. `false` to include optional uncompleted forms to result.'
          schema:
            type: boolean
        - name: is_backend
          in: query
          description: 'This will be `true` if the API is being used from the backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The key of the business to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_quiz_login:
                    type: array[]
                    description: 'The list of uncompleted quiz responses. Each element has the next structure: <dl> <dt>string[] <var>a_visit</var></dt> <dd> List of visit keys associated with uncompleted response. Key is visit key. Primary key in {@link \RsVisitSql} table. Value is date of visit. </dd> <dt>string <var>dtl_date</var></dt> <dd>The date of the request to fill out a quiz form.</dd> <dt>int <var>id_source</var></dt> <dd>The place where the request to fill out a quiz form occurred. One of the {@link SourceSid} constants.</dd> <dt>bool <var>is_private</var></dt> <dd> Determines whether the form can be viewed by staff member only after confirmation. `true` - the form can be viewed only after confirmation. `false` - the form can always be viewed. </dd> <dt>string <var>k_quiz</var></dt> <dd>The quiz key. Primary key in {@link QuizSql} table.</dd> <dt>string <var>k_quiz_login</var></dt> <dd>The key of the request. Primary key in the {@link \Wl\Quiz\Login\QuizLoginSql} table.</dd> <dt>string|null <var>k_quiz_response</var></dt> <dd> Key of the response. Primary key in the {@link ResponseSql} table. Not `null` in case when response in draft status. </dd> <dt>string <var>text_title</var></dt> <dd>The quiz title.</dd> </dl>'
                  a_quiz_response:
                    type: array[]
                    description: 'The list of completed quiz responses. Each element has the next structure: <dl> <dt>string[] <var>a_visit</var></dt> <dd> List of visit keys associated with uncompleted response. Key is visit key. Primary key in {@link \RsVisitSql} table. Value is date of visit. </dd> <dt>string <var>dtl_date</var></dt> <dd>The date of the request to fill out a quiz form.</dd> <dt>int <var>id_source</var></dt> <dd>The place where the request to fill out the quiz form occurred. One of the {@link SourceSid} constants.</dd> <dt>int <var>id_status</var></dt> <dd>Status of the response. One of {@link ResponseStatusSid} constants.</dd> <dt>bool <var>is_private</var></dt> <dd> Determines whether the form can be viewed by staff member only after confirmation. `true` - the form can be viewed only after confirmation. `false` - the form can always be viewed. </dd> <dt>string <var>k_quiz</var></dt> <dd>The quiz key. Primary key in {@link QuizSql} table.</dd> <dt>string <var>k_quiz_login</var></dt> <dd>The quiz response key. Primary key in {@link \Core\Quiz\Response\ResponseSql} table.</dd> <dt>string|null <var>text_amend_date</var></dt> <dd> Date when response amended. `null` if response was not edited. </dd> <dt>string|null <var>text_amend_user</var></dt> <dd> Name of the user who amend the response. `null` if response was not edited. </dd> <dt>string <var>text_title</var></dt> <dd>The quiz title.</dd> <dt>string <var>text_user</var></dt> <dd>Name of user who complete response or start a draft.</dd> </dl>'
                  can_amend:
                    type: boolean
                    description: 'Whether response can be amended by current user.'
                  can_fill:
                    type: boolean
                    description: 'Whether response can be filled by current user.'
                  can_remove:
                    type: boolean
                    description: 'Whether response can be removed by current user.'
                  can_view:
                    type: boolean
                    description: 'Whether response can be viewed by current user.'
      tags:
        - Response-ResponseList
  '/Wl/Profile/Edit/Email/EditEmail.json':
    get:
      summary: 'Checks if specified email address is busy.'
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, the API is being used from backend. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key where the check must be performed.'
          schema:
            type: string
        - name: text_mail
          in: query
          description: 'The email address to be checked.'
          schema:
            type: string
        - name: uid_want
          in: query
          description: 'The key of user whose email will be edited. This will be `0` in the case of a new user creation.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_business_member_key:
                    type: array
                    description: 'List of business keys where a user is already a member. Primary keys in {@link \RsBusinessSql} table.'
                  a_user:
                    type: array
                    description: 'Information about the user who occupies the specified email. This will be empty if the email is free or if the rate limit has been reached. Otherwise, has next keys: <dl> <dt> string <var>text_firstname</var> </dt> <dd> First name. </dd> <dt> string <var>text_lastname</var> </dt> <dd> Last name. </dd> <dt> string <var>text_phone</var> </dt> <dd> Phone. </dd> <dt> string <var>url_photo</var> </dt> <dd> URL to photo. </dd> </dl>'
                  is_added:
                    type: boolean
                    description: 'Shows, whether client was registered in the business: <tt>true</tt> if user was added to the business, <tt>false</tt> if staff only received temporary access, because mandatory fields must be specified first.'
                  is_current_member:
                    type: boolean
                    description: 'If `true`, user is already a member of current business, `false` - otherwise.'
                  is_limit:
                    type: boolean
                    description: 'If `true`, then the number of requests has exceeded the rate limit. Otherwise, this will be `false`.'
                  is_password_set:
                    type: boolean
                    description: 'If `true`, user, who has the specified email, has password set, `false` - otherwise.'
                  is_staff:
                    type: boolean
                    description: 'If `true`, user, who has the specified email, is staff in current business, `false` - otherwise.'
                  is_staff_any_business:
                    type: boolean
                    description: 'If `true`, user, who has the specified email, is staff in any business, `false` - otherwise.'
                  is_use:
                    type: boolean
                    description: 'If `true`, then the specified email is in use. Otherwise, this will be `false`.'
                  uid_result:
                    type: string
                    description: 'The key of user who has the specified email. This will be `0` if the email is free or if the rate limit has been reached.'
      tags:
        - Email-EditEmail
    post:
      summary: 'Adds user to business.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key where the check must be performed.'
                uid_want:
                  type: string
                  description: 'The key of user whose email will be edited. This will be `0` in the case of a new user creation.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_added:
                    type: boolean
                    description: 'Shows, whether client was registered in the business: <tt>true</tt> if user was added to the business, <tt>false</tt> if staff only received temporary access, because mandatory fields must be specified first.'
      tags:
        - Email-EditEmail
  '/Wl/Appointment/Book/Asset/AssetList.json':
    get:
      summary: 'Retrieves information about assets in the current asset category.'
      parameters:
        - name: dtl_date
          in: query
          description: 'The selected date and time of the asset booking. It is used in cases when the business booking policy allows clients to select a date and time, and then the available asset.'
          schema:
            type: string
        - name: i_image_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default size.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default size.'
          schema:
            type: number
            format: int32
        - name: id_mode
          in: query
          description: 'Mode type, one of {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_backend
          in: query
          description: 'This is `true` if asset categories are loaded for back-end mode. Otherwise, this will be `false` for front-end mode.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only for the selected book tab.'
          schema:
            type: boolean
        - name: k_appointment
          in: query
          description: 'Key of the appointment, if we reschedule existing appointment. It should be sent to ignore it when we get availability hours for the asset.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key. If not set, location''s business will be used.'
          schema:
            type: string
        - name: k_class_tab
          in: query
          description: 'The class tab key used to filter assets. This will be `null` if not set yet or if elements with no specified class tab are selected.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
        - name: k_resource_category
          in: query
          description: 'The asset category key to show information for.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'Timezone of date and time of asset booking. Empty if {@link AssetListApi::$dtl_date} not set or client can''t change in which timezone dates should be shown.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'Client to get information for. If client not set, returns full asset list without client restrictions.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_asset:
                    type: array[]
                    description: 'A list of information about assets: <dl> <dt>array <var>a_age_restrictions</var></dt> <dd> Information about age restrictions for this event. This will be an empty array if there aren''t any age restrictions. <dl> <dt>int|null <var>i_age_from</var></dt> <dd>The minimum age permitted for the event. This will be `null` if a minimum age isn''t set or available.</dd> <dt>int|null <var>i_age_to</var></dt> <dd>The maximum age permitted for the event. This will be `null` if a maximum age isn''t set or available.</dd> <dt>bool <var>is_age_public</var></dt> <dd>This will be `true` if age restrictions are public and available. Otherwise, this will be `false` if they''re hidden. When restrictions are hidden and current user isn''t a staff member, the age range will be empty.</dd> </dl> </dd> <dt>array <var>a_class_tab</var></dt> <dd>The key of service. Keys are primary key in {@link \RsServiceSql} table, values are primary key in {@link \Wl\Classes\Tab\Sql\ClassTab\Sql}.</dd> <dt> array[] <var>a_direct_link</var> </dt> <dd> A list of links to create a booking from a direct link (direct booking URL). The system needs to know what tab is associated with the booking. Therefore, there needs to be one link per tab. Each element has two values: <dl> <dt>string <var>k_class_tab</var></dt> <dd>The key of the book now tab.</dd> <dt>string <var>url_tab</var></dt> <dd>The direct booking URL. This will open the booking wizard under the related booking tab.</dd> </dl> </dd> <dt>array[] <var>a_image</var></dt> <dd>Information about the asset logo: <dl> <dt>int <var>i_angle</var></dt> <dd>The angle of the shape rotation. This is set only if the image is one of the default shapes.</dd> <dt>bool <var>is_empty</var></dt> <dd>Determines if the asset logo is empty.</dd> <dt>string <var>sid_image_icon</var></dt> <dd>The icon name. String representation of one of the {@link \Wl\Resource\Image\ImageIconSid} constants. This is only set if the image kind equals to `image`.</dd> <dt>string <var>sid_image_shape</var></dt> <dd>The shape name. String representation of one of the {@link \Wl\Resource\Image\ImageShapeSid} constants. This is set only if the image kind equals to `shape`.</dd> <dt>string <var>url</var></dt> <dd>The asset logo URL.</dd> </dl> </dd> <dt>array[] <var>a_period</var></dt> <dd>A list of asset periods with the following information: <dl> <dt>string <var>html_duration</var></dt> <dd>The HTML code used to display the asset duration.</dd> <dt>string <var>html_price</var></dt> <dd>The HTML code used to display the formatted price.</dd> <dt>int <var>i_duration</var></dt> <dd>The asset duration in minutes.</dd> <dt>int <var>id_price</var></dt> <dd>The asset period price type. One of {@link \RsServicePriceSid} constants.</dd> <dt>sting <var>m_price</var></dt> <dd>The asset period price.</dd> </dl> </dd> <dt>array <var>a_search_tag</var></dt> <dd>QUICK Search tag keys.</dd> <dt>bool <var>hide_application</var></dt> <dd> Determines whether the asset will be hidden in the White Label mobile apps. If `true`, the asset won''t be displayed. Otherwise, this will be `false`. </dd> <dt>string <var>html_age_restriction</var></dt> <dd>The resource age restriction</dd> <dt>string <var>html_title</var></dt> <dd>The resource name.</dd> <dt>int <var>id_service_require</var></dt> <dd>The purchase rule. One of the {@link \RsServiceRequireSid} constants.</dd> <dt>bool <var>is_age_restricted</var></dt> <dd>Determines whether this service can''t be booked due to age restrictions.</dd> <dt>string <var>k_class_tab</var></dt> <dd>Quick book tab key. Primary key in {@link \Wl\Classes\Tab\Sql\ClassTab\Sql} table.</dd> <dt>string <var>k_resource</var></dt> <dd>The resource key. Primary key in {@link \RsResourceSql} table.</dd> <dt>string <var>k_resource_category</var></dt> <dd>The resource category key. Primary key in {@link \RsResourceTypeSql} table.</dd> </dl>'
                  a_asset_busy:
                    type: array
                    description: 'A list of reserved assets. 1st level keys refer to asset keys. Primary key in {@link \RsResourceSql} table. 2nd level keys refer to asset numbers. Values is keys of appointment bookings that reserve the asset, primary keys in {@link \RsAppointmentSql} table, or `true` if asset reserved by class/event. For example, if you want to check if the 10th asset with the key of ''15'' is reserved, you can check if `a_resource_busy[''15''][''10'']` is free. If you''re rebooking an appointment, check the value of `a_resource_busy[''15''][''10'']`. If it''s equal to the key of your current appointment booking, you can assume the asset is available.'
                  k_resource_layout:
                    type: string
                    description: 'The asset layout key. May be empty if asset category has no layout.'
      tags:
        - Asset-AssetList
  '/Wl/Appointment/Book/Asset/Category.json':
    get:
      summary: 'Retrieves a list of information about service categories on the appointment booking page.'
      parameters:
        - name: is_backend
          in: query
          description: 'If `true`, asset categories are loaded for backend mode. Otherwise, this will be `false` if asset categories are loaded for frontend mode.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only for the selected book tab.'
          schema:
            type: boolean
        - name: k_class_tab
          in: query
          description: 'The class tab key to use for filtering services.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_category:
                    type: array[]
                    description: 'A list of information about asset categories. <dl> <dt> boolean <var>hide_application</var> </dt> <dd> <tt>true</tt> - all resources are hidden in this category for White Label mobile application. <tt>false</tt> - otherwise. </dd> <dt> string <var>k_resource_type</var> </dt> <dd> Resource type ID. </dd> <dt> string <var>html_title</var> </dt> <dd> Title of resource type. </dd> <dt> string <var>text_title</var> </dt> <dd> Title of resource type as text. </dd> </dl>'
      tags:
        - Asset-Category
  '/Wl/Appointment/Book/Finish/FinishMultiple.json':
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_answer:
                  type: array
                  description: 'A list of answers for the questions.'
                a_book_data:
                  type: array
                  description: 'All data from the provider model `Wl_Appointment_Book_ProviderModel`: <dl> <dt> array [<var>a_product</var>] </dt> <dd> Add-ons to the appointment. Specified for appointment bookings only. The old format used array keys. Primary keys in {@link \RsShopProductOptionSql} table. While the new format has each element as an array: <dl> <dt>int <var>i_count</var></dt><dd>The add-on buy count.</dd> <dt>int [<var>i_count_use</var>]</dt><dd>The add-on use count. If not set, then use count is equals to buy count.</dd> <dt>string <var>k_shop_product_option</var></dt><dd>The add-on key. Primary key in {@link \RsShopProductOptionSql} table.</dd> </dl> </dd> <dt> array [<var>a_repeat</var>] </dt> <dd> Information for the recurring booking: <dl> <dt> int[] [<var>a_week</var>] </dt> <dd> The days of the week when the appointment repeats. One of the constants of the {@link \ADateWeekSid} class. This will be empty if the appointment doesn''t repeat weekly. </dd> <dt> string [<var>dl_end</var>] </dt> <dd> The date when the appointment''s repeat cycle stops. This will be empty if the repeat cycle doesn''t stop at a certain date. </dd> <dt> int [<var>i_occurrence</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. This will be empty if the repeat cycle doesn''t stop after a certain number of occurrences. </dd> <dt> int <var>i_period</var> </dt> <dd> The frequency at which the appointment repeats. </dd> <dt> int <var>id_period</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. </dd> <dt> bool [<var>is_month</var>] </dt> <dd> <tt>true</tt> if the appointment repeats monthly on the same date. <tt>false</tt> if the appointment repeats monthly on the same day of the week. <tt>null</tt> if the appointment doesn''t repeat monthly. </dd> </dl> This will be empty if the appointment isn''t booked recurringly. </dd> <dt> array [<var>a_resource</var>] </dt> <dd> The list of assets for the appointment booking. Keys refer to asset categories. Primary keys in {@link \RsResourceTypeSql} table. Values are arrays with the next keys: <dl> <dt>int [<var>i_index</var>]</dt> <dd>The asset index on the layout. This is only specified if the asset category has a layout.</dd> <dt>string <var>k_resource</var></dt> <dd>The asset. Primary key in {@link \RsResourceSql} table.</dd> </dl> Specify this only for an appointment booking. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time for the booking in MySQL format in the location''s time zone. </dd> <dt> int [<var>i_duration</var>] </dt> <dd> The duration for the asset booking in minutes. Specify this for separate asset bookings only. </dd> <dt> int [<var>i_index</var>] </dt> <dd> The asset index on the layout. Specify this for separate asset bookings only and for cases when the asset category only has the layout. </dd> <dt> int <var>id_class_tab</var> </dt> <dd> The booking service type. One of the {@link \Wl\Classes\Tab\TabSid} constants. </dd> <dt> int [<var>id_gender_staff</var>] </dt> <dd> The gender of the staff member conducting the appointment. One of the {@link \AGenderSid} constants. Specify this for appointment bookings only. </dd> <dt> string [<var>k_login_promotion</var>] </dt> <dd> The user''s Purchase Option. Specify this if you want to use a specific Purchase Option to pay for the booking. Primary key in {@link \RsLoginPromotionSql} table. </dd> <dt> string [<var>k_resource</var>] </dt> <dd> The asset booking. Specify this for separate asset bookings only. Primary key in {@link \RsResourceSql} table. </dd> <dt> string [<var>k_service</var>] </dt> <dd> The appointment booking. Specify this for appointment bookings only. Primary key in {@link \RsServiceSql} table. </dd> <dt> string [<var>k_staff</var>] </dt> <dd> The staff member conducting the appointment. Specify this for appointment bookings only. Primary key in {@link \RsStaffSql} table. </dd> <dt> string [<var>k_staff_date</var>] </dt> <dd> The staff member conducting the appointment. The difference between this and <var>k_staff</var> is that this value must be set only in cases when you want to add customer to an appointment that already exists. Specify this for appointment bookings only. Primary key in {@link \RsStaffSql} table. </dd> <dt>string [<var>m_tip_appointment</var>]</dt> <dd>The amount of selected tips.</dd> <dt>sting <var>k_timezone</var></dt> <dd>The time zone key. This will be ''null'' if the time zone used matches the time zone of the location.</dd> </dl>'
                a_paid:
                  type: array
                  description: 'The sum paid.'
                a_pay:
                  type: array
                  description: 'The payment type for the appointment. One of the {@link \RsAppointmentPaySid} constants.'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. The structure of this array corresponds with the structure of {@link \RsPayForm::$a_pay_source}.'
                a_payment_data:
                  type: array
                  description: 'Data required for payment with the next structure:<dl> <dt>int <var>id_purchase_item</var></dt> <dd>The purchase item type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The promotion or appointment key, depending on <var>id_purchase_item</var> in this array.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The login promotion key. Primary key in the {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>text_discount_code</var></dt> <dd>The discount code.</dd> </dl>'
                a_purchase_item:
                  type: string[]
                  description: 'The purchase items keys. This will be empty if no purchases have been made for the appointment booking.'
                a_quiz_response:
                  type: array[]
                  description: 'The list of quiz response keys. Keys refer to quiz keys. Primary key in {@link \Core\Quiz\QuizSql} table. And values refer to response keys. Primary key in {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                a_user:
                  type: array
                  description: 'Data to create new users. Specify this if <var>$uid</var> is empty. The data must contain the next keys: <dl><dt>string[] <var>a_note</var></dt><dd>The list of notes to add to the new user''s profile.</dd> <dt>string <var>text_mail</var></dt><dd>The new user''s email address.</dd> <dt>string <var>text_name_first</var></dt><dd>The new user''s first name.</dd> <dt>string <var>text_name_last</var></dt><dd>The new user''s last name.</dd> <dt>string <var>text_phone</var></dt><dd>The new user''s mobile phone number.</dd></dl>'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_back_to_back:
                  type: boolean
                  description: 'Determines whether multiple appointments have been booked in back-to-back mode.'
                is_try:
                  type: boolean
                  description: 'This will be `true` when trying to make a test booking and rollback should be applied. Otherwise, this will be `false`. If the flag is set to `true`, credit card requirement will be ignored during this check.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_appointment:
                  type: string
                  description: 'The appointment key. Specify this to reschedule a certain appointment. Primary key in {@link \RsAppointmentSql} table.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                s_id:
                  type: string
                  description: 'Unique identifier of the wizard.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment:
                    type: array[]
                    description: 'The booked appointments. Every element has the key: <dl> <dt> string <var>k_appointment</var> </dt> <dd> The appointment key. Primary key in {@link \RsAppointmentSql} table. </dd> </dl>'
                  a_login_activity_visit:
                    type: string[]
                    description: 'The activity IDs of bookings that have been made.'
                  a_visit:
                    type: string[]
                    description: 'The visit IDs. Primary keys in {@link \RsVisitSql} table.'
                  a_visit_provider:
                    type: string[][]
                    description: 'Keys of booked visits. Primary keys in {@link \RsVisitSql} table. Structured into a two-dimensional array. 1st dimension - providers; 2nd dimension - visit keys inside a provider.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Finish-FinishMultiple
  '/Wl/Appointment/Book/Finish/Finish.json':
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_answer:
                  type: array
                  description: 'A list of answers for the questions from {@link \Wl\Appointment\Book\Question\QuestionApi::$a_question}. Keys refer to hashes of the questions. Values refer to answers for the questions.'
                a_book_data:
                  type: array
                  description: 'All data from the provider model <tt>Wl_Appointment_Book_ProviderModel</tt>: <dl> <dt> array [<var>a_product</var>] </dt> <dd> Add-ons to the appointment. Specify this for appointment bookings only. Old format: array keys refer to primary keys. See table {@link \RsShopProductOptionSql}. New format: each element is an array: <dt>int <var>i_count</var></dt><dd>The add-on count</dd> <dt>string <var>k_shop_product_option</var></dt><dd>The key of add-on. Primary key in {@link \RsShopProductOptionSql} table.</dd> </dd> <dt> array [<var>a_repeat</var>] </dt> <dd> Recurring booking information: <dl> <dt> int[] [<var>a_week</var>] </dt> <dd> The days of week when appointment repeats. One of the {@link \ADateWeekSid} constants. This will be empty if the appointment doesn''t repeat weekly. </dd> <dt> string [<var>dl_end</var>] </dt> <dd> The date when the appointment''s repeat cycle stops. This will be empty if the repeat cycle doesn''t stop at a certain date. </dd> <dt> int [<var>i_occurrence</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle must stop. This will be empty if the repeat cycle doesn''t stop after a certain number of occurrences. </dd> <dt> int <var>i_period</var> </dt> <dd> The frequency of the appointment''s repeat cycle. </dd> <dt> int <var>id_period</var> </dt> <dd> The measurement unit of <tt>i_period</tt>. One of the {@link \ADurationSid} constants. </dd> <dt> bool [<var>is_month</var>] </dt> <dd> <tt>true</tt> if the appointment repeats monthly on the same date. <tt>false</tt> if the appointment repeats monthly on the same day of the week. <tt>null</tt> if the appointment doesn''t repeat monthly. </dd> </dl> This will be empty if the appointment isn''t recurring. </dd> <dt> array [<var>a_resource</var>] </dt> <dd> A list of assets for the appointment booking. Keys refer to asset categories. Primary keys in {@link \RsResourceTypeSql} table. Values refer to arrays with the next keys: <dl> <dt>int [<var>i_index</var>]</dt> <dd>The asset index on the layout. Specify this only if the asset category has a layout.</dd> <dt>string <var>k_resource</var></dt> <dd>The asset. Primary key in {@link \RsResourceSql} table.</dd> </dl> Specify this only for the appointment booking. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time for the booking in MySQL format in the location''s time zone. </dd> <dt> int [<var>i_duration</var>] </dt> <dd> The duration of asset booking in minutes. Specify this for separate asset bookings only. </dd> <dt> int [<var>i_index</var>] </dt> <dd> The asset index on the layout. Specify this for separate asset bookings only and for cases when the asset category only has a layout. </dd> <dt> int <var>id_class_tab</var> </dt> <dd> The booking service type. One of the {@link \Wl\Classes\Tab\TabSid} constants. </dd> <dt> int [<var>id_gender_staff</var>] </dt> <dd> The gender of the staff member conducting the appointment. One of the {@link \AGenderSid} constants. Specify this for appointment bookings only. </dd> <dt> string [<var>k_login_promotion</var>] </dt> <dd> The user''s pass (for example, a membership or a package). Primary key in {@link \RsLoginPromotionSql} table. Specify this if you want to set the pass to use to pay for the booking. </dd> <dt> string [<var>k_resource</var>] </dt> <dd> The asset booking. Specify this for separate asset bookings only. Primary key in {@link \RsResourceSql} table. </dd> <dt> string [<var>k_service</var>] </dt> <dd> The appointment booking. Specify this for appointment bookings only. Primary key in {@link \RsServiceSql} table. </dd> <dt> string [<var>k_staff</var>] </dt> <dd> The staff member conducting the appointment. Specify this for appointment bookings only. Primary key in {@link \RsStaffSql} table. </dd> <dt> string [<var>k_staff_date</var>] </dt> <dd> The staff member conducting the appointment. The difference between this an <var>k_staff</var> is that this value must be set only in cases when you want to add a customer to an appointment that already exists. Specify this for appointment bookings only. Primary key in {@link \RsStaffSql} table. </dd> <dt>string [<var>m_tip_appointment</var>]</dt> <dd>The amount of selected tips.</dd> </dl>'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Structure of this array corresponds structure of {@link \RsPayForm::$a_pay_source}.'
                a_payment_data:
                  type: array
                  description: 'Data required for payment. Has next structure:<dl> <dt>int <var>id_purchase_item</var></dt> <dd>Type of the purchase item. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>Promotion key or appointment key. Depends on <var>id_purchase_item</var> of this array.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>Login promotion key. Primary key in the {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>k_session_pass</var></dt> <dd>Session pass key. Primary key in the {@link \Wl\Session\Pass\Sql} table.</dd> <dt>string <var>text_discount_code</var></dt> <dd>Discount code.</dd> </dl>'
                a_purchase_item:
                  type: string[]
                  description: 'The purchase item keys. Empty if no purchases are made for the appointment booking.'
                a_quiz_response:
                  type: array
                  description: 'A list of quiz response keys. Keys refer to quiz keys. Primary key in {@link \Core\Quiz\QuizSql} table. Values refer to response keys. Primary key in {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                a_user:
                  type: array
                  description: 'Data to create new user. Specify this if <var>$uid</var> is empty. Must contain the following keys: <dl> <dt>string[] <var>a_note</var></dt> <dd>List of notes to add to user.</dd> <dt>string <var>text_mail</var></dt> <dd>Mail.</dd> <dt>string <var>text_name_first</var></dt> <dd>First name.</dd> <dt>string <var>text_name_last</var></dt> <dd>Last name.</dd> <dt>string <var>text_phone</var></dt> <dd>Phone.</dd> </dl>'
                id_mode:
                  type: number
                  format: int32
                  description: 'The booking mode ID. One of the {@link ModeSid} constants.'
                id_pay:
                  type: number
                  format: int32
                  description: 'The payment type ID for the appointment. One of the {@link \RsAppointmentPaySid} constants.'
                is_back_to_back:
                  type: boolean
                  description: 'Determines whether multiple appointments are booked in back-to-back mode.'
                is_unpaid_force:
                  type: boolean
                  description: 'If `true`, the appointment is booked as unpaid. Otherwise, this will be `false` to select an available Purchase Option.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_appointment:
                  type: string
                  description: 'The appointment key. This should be set if you''re rebooking an existing appointment. Otherwise, use `0` to book a new appointment.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                k_timezone:
                  type: null|string
                  description: 'Key of timezone. `null` if not set then use default timezone client. See {@link ProfileTimezone::createInBusiness()}.'
                m_pay:
                  type: string
                  description: 'The sum paid for a deposit.'
                s_id:
                  type: string
                  description: 'Unique identifier of the wizard.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment:
                    type: array[]
                    description: 'The keys of the booked appointments. Every element has key: <dl> <dt> string <var>k_appointment</var> </dt> <dd> The appointment key. Primary key in {@link \RsAppointmentSql} table. </dd> </dl>'
                  a_login_activity_visit:
                    type: string[]
                    description: 'The activity keys of the bookings that were made.'
                  a_visit:
                    type: string[]
                    description: 'The keys of visits.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Finish-Finish
  '/Wl/Appointment/Book/Finish/Finish47.json':
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_answer:
                  type: array
                  description: 'A list of answers for the questions from {@link \Wl\Appointment\Book\Question\QuestionApi::$a_question}. Keys refer to hashes of the questions. Values refer to answers for the questions.'
                a_book_data:
                  type: array
                  description: 'The documentation is the same as in {@link FinishApi::$a_book_data}.'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Structure of this array corresponds structure of {@link \RsPayForm::$a_pay_source}.'
                a_payment_data:
                  type: array
                  description: 'Data required for payment. Has next structure:<dl> <dt>int <var>id_purchase_item</var></dt> <dd>Type of the purchase item. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>Promotion key or appointment key. Depends on <var>id_purchase_item</var> of this array.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>Login promotion key. Primary key in the {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>k_session_pass</var></dt> <dd>Session pass key. Primary key in the {@link \Wl\Session\Pass\Sql} table.</dd> <dt>string <var>text_discount_code</var></dt> <dd>Discount code.</dd> </dl>'
                a_purchase_item:
                  type: string[]
                  description: 'The purchase item keys. Empty if no purchases are made for the appointment booking.'
                a_quiz_response:
                  type: array
                  description: 'List of quiz response keys. Key is quiz key from {@link \Core\Quiz\QuizSql} table. Value is response key from {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                a_user:
                  type: array
                  description: 'Data to create new user. Specify this if <var>$uid</var> is empty. Must contain the following keys: <dl> <dt>string[] <var>a_note</var></dt> <dd>List of notes to add to user.</dd> <dt>string <var>text_mail</var></dt> <dd>Mail.</dd> <dt>string <var>text_name_first</var></dt> <dd>First name.</dd> <dt>string <var>text_name_last</var></dt> <dd>Last name.</dd> <dt>string <var>text_phone</var></dt> <dd>Phone.</dd> </dl>'
                id_mode:
                  type: number
                  format: int32
                  description: 'The booking mode ID. One of the {@link ModeSid} constants.'
                id_pay:
                  type: number
                  format: int32
                  description: 'The payment type ID for the appointment. One of the {@link \RsAppointmentPaySid} constants.'
                is_back_to_back:
                  type: boolean
                  description: 'Determines whether multiple appointments are booked in back-to-back mode.'
                is_unpaid_force:
                  type: boolean
                  description: 'If `true`, the appointment is booked as unpaid. Otherwise, this will be `false` to select an available Purchase Option.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_appointment:
                  type: string
                  description: 'The appointment key. This should be set if you''re rebooking an existing appointment. Otherwise, use `0` to book a new appointment.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                k_timezone:
                  type: null|string
                  description: 'Key of timezone. `null` if not set then use default timezone client. See {@link ProfileTimezone::createInBusiness()}.'
                m_pay:
                  type: string
                  description: 'The sum paid for a deposit.'
                s_id:
                  type: string
                  description: 'Unique identifier of the wizard.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_appointment:
                    type: array[]
                    description: 'The keys of the booked appointments. Every element has key: <dl> <dt> string <var>k_appointment</var> </dt> <dd> The appointment key. Primary key in {@link \RsAppointmentSql} table. </dd> </dl>'
                  a_login_activity_visit:
                    type: string[]
                    description: 'The activity keys of the bookings that were made.'
                  a_visit:
                    type: string[]
                    description: 'The keys of visits.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Finish-Finish47
  '/Wl/Appointment/Book/Service/Category.json':
    get:
      summary: 'Retrieves a list of information about service categories on the appointment booking page.'
      parameters:
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: is_backend
          in: query
          description: '`true` - return all service categories for a certain location. `false` - return only service categories that are associated with a book tab and with staff members able to conduct them.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only for the selected book tab.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_class_tab
          in: query
          description: 'The class tab key used to filter services.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_category:
                    type: array
                    description: 'A list of information about service categories. <dl> <dt> bool <var>hide_application</var> </dt> <dd> <tt>true</tt> - all services are hidden in this category for White Label mobile application. <tt>false</tt> - otherwise. </dd> <dt> bool <var>i_sort</var> </dt> <dd> Sort key for category. Used to sort categories on category list page. </dd> <dt> string <var>k_service_category</var> </dt> <dd> Service category key. Primary key in {@link \RsServiceCategorySql} table. </dd> <dt> string <var>s_title</var> </dt> <dd> Service category title. </dd> </dl>'
                  is_client_flag:
                    type: boolean
                    description: '<tt>true</tt> - if client has a flag, <tt>false</tt> - otherwise.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Service-Category
  '/Wl/Appointment/Book/Service/ServiceList52.json':
    get:
      summary: 'Retrieves information about services in the current service category.'
      parameters:
        - name: a_class_tab
          in: query
          description: 'The class tab key to use to filter services. If empty, this can be found on the standard book tab. If multiple tabs are sent, appointment types, which are in at least in one of the tabs, will be in the result.'
          schema:
            type: string[]
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: i_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: int|null
        - name: i_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: int|null
        - name: is_backend
          in: query
          description: '`true` - return all active services for a certain location. `false` - return only services that are associated with a book now tab.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only on the selected book now tab.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_service_category
          in: query
          description: 'The key of a service category to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_service:
                    type: array
                    description: 'A list of services with information about them. <b>Key</b> - the service key. Primary key in {@link \RsServiceSql} table. <b>Value</b> - an array, with every element consisting of the next keys: <dl> <dt> array <var>a_class_tab</var> </dt> <dd> The list of tab keys for the service. </dd> <dt> array[] <var>a_direct_link</var> </dt> <dd> A list of links to start booking from a direct link. This can''t be one link, as the same appointment can be available in several booking tabs. Therefore, each booking tab has its own direct booking link. Each element has two values: <dl> <dt>string <var>k_class_tab</var></dt> <dd>The key of the book now tab.</dd> <dt>string <var>url_tab</var></dt> <dd>The booking URL. This will open the booking wizard under the related booking tab.</dd> </dl> </dd> <dt> array <var>a_config</var> </dt> <dd> Appointment-specific business policies. This will be `null` when using the general business policy. </dd> <dt> array <var>a_image</var> </dt> <dd> Information about the appointment image. An array with the following values: <dl> <dt>int <var>i_height</var></dt> <dd>The height of the image.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the image.</dd> <dt>bool <var>is_empty</var></dt> <dd>This will be `true` if the image is not set.</dd> <dt>string <var>k_service</var></dt> <dd>The service key.</dd> <dt>string <var>s_service</var></dt> <dd>The name of the service.</dd> <dt>string <var>s_url</var></dt> <dd>The URL to the image.</dd> </dl> </dd> <dt> array <var>a_login_type_restriction</var> </dt> <dd> Keys are login type keys, primary keys in {@link \Wl\Login\Type\Sql}, values - List of login types'' titles for current service. Clients that have one of these types can book service. </dd> <dt> string[] <var>a_member_group_restriction</var> </dt> <dd> Keys are member group keys, primary keys in {@link \Wl\Member\Group\Sql}, values - list of member groups'' titles for current service. Clients that belongs to these groups can book service. </dd> <dt> string <var>f_deposit</var> </dt> <dd> The amount of deposit required. </dd> <dt> string <var>f_offline_max</var> </dt> <dd> The maximum offline price. </dd> <dt> string <var>f_offline_min</var> </dt> <dd> The minimum offline price. </dd> <dt> string <var>f_online</var> </dt> <dd> The online price. </dd> <dt> bool <var>hide_application</var> </dt> <dd> Determines whether the service will be hidden in the White Label mobile application. `true` means that service won''t be displayed. Otherwise, this will be `false`. </dd> <dt> int <var>i_age_from</var> </dt> <dd> The required minimum client age to book an appointment. </dd> <dt> int <var>i_age_to</var> </dt> <dd> The required maximum client age to book an appointment. </dd> <dt> int <var>i_price</var> </dt> <dd> The price type ID. One of {@link \RsServicePriceSid} constants. </dd> <dt> int <var>i_duration</var> </dt> <dd> The appointment duration in minutes. </dd> <dt> int <var>id_book_flow</var> </dt> <dd> The type of client booking flow. One of {@link \Wl\Service\ServiceBookFlowSid} constants. </dd> <dt> int <var>id_service_require</var> </dt> <dd> The required payment type ID. One of {@link \RsServiceRequireSid} constants. </dd> <dt> bool <var>is_age_public</var> </dt> <dd> `true` if age restrictions are public. Otherwise, `false` if they should be hidden from clients. </dd> <dt> bool <var>is_age_restricted</var> </dt> <dd> Determines whether this service can''t be booked due to age restrictions. </dd> <dt> bool <var>is_back_to_back</var> </dt> <dd> Determines whether this service supports back-to-back booking. </dd> <dt> bool <var>is_bookable</var> </dt> <dd> Whether this appointment can be booked online. </dd> <dt> bool <var>is_book_repeat_client</var> </dt> <dd> `true` if clients can book classes and appointments on a recurring basis. Otherwise, this `false`. </dd> <dt> bool <var>is_book_repeat_no_end_date_appointment</var> </dt> <dd> `true` if appointment bookings default to weekly recurring with no end date, `false` otherwise. </dd> <dt> bool <var>is_deposit_percent</var> </dt> <dd> `true` if <var>f_deposit</var> is a percentage. Otherwise, this will be `false` if <var>f_deposit</var> is an amount of money. </dd> <dt> bool <var>is_gender_select</var> </dt> <dd> `true` if clients can select the staff member''s gender. Otherwise, this will be `false`. </dd> <dt> bool <var>is_online_sell</var> </dt> <dd> `true` if clients can buy this appointment. Otherwise, this will be `false` if only staff members can sell it. </dd> <dt> bool <var>is_resource_type</var> </dt> <dd> `true` if the service requires assets. Otherwise, this will be `false`. </dd> <dt> bool <var>is_single_buy</var> </dt> <dd> `true` if the appointment can be booked without a Purchase Option. Otherwise, this will be `false` if it''s necessary to buy a Purchase Option. </dd> <dt> bool <var>is_staff_confirm</var> </dt> <dd> `true` if the appointment must be confirmed by a staff member after booking. Otherwise, this will be `false`. </dd> <dt> bool <var>is_staff_skip</var> </dt> <dd> `true` if clients can select a staff member for the appointment. Otherwise, this will be `false` if otherwise. </dd> <dt> bool <var>is_question</var> </dt> <dd> Determines whether the service will ask for questions or not. </dd> <dt> bool <var>is_virtual</var> </dt> <dd> `true` if the service is virtual. Otherwise, this will be `false`. </dd> <dt> string <var>k_service</var> </dt> <dd> The appointment primary key. Primary key in {@link \RsServiceSql} table. </dd> <dt> string <var>k_service_category</var> </dt> <dd> The service category primary key. Primary key in {@link \RsServiceCategorySql} table. </dd> <dt> string <var>s_duration</var> </dt> <dd> The appointment duration in a human-readable format. </dd> <dt> string <var>s_service</var> </dt> <dd> The appointment title. </dd> <dt> string <var>text_age_restriction</var> </dt> <dd> Age restriction header. </dd> <dt> string <var>xml_description</var> </dt> <dd> Appointment description (deprecated, use `html_description`). </dd> <dt> string <var>xml_description_short</var> </dt> <dd> Appointment short description (deprecated, use `html_description_short`). </dd> <dt> string <var>xml_special</var> </dt> <dd> Special instructions (deprecated, use `html_special`). </dd> </dl>'
                  is_multiple_booking:
                    type: boolean
                    description: 'Whether services allow multiple appointment booking.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Service-ServiceList52
  '/Wl/Appointment/Book/Service/ServiceList.json':
    get:
      summary: 'Retrieves information about services in the current service category.'
      parameters:
        - name: a_class_tab
          in: query
          description: 'The class tab key to use to filter services. If empty, this can be found on the standard book tab. If multiple tabs are sent, appointment types, which are in at least in one of the tabs, will be in the result.'
          schema:
            type: string[]
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: i_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: int|null
        - name: i_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size.'
          schema:
            type: int|null
        - name: is_backend
          in: query
          description: '`true` - return all active services for a certain location. `false` - return only services that are associated with a book now tab.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only on the selected book now tab.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_class_tab
          in: query
          description: 'The class tab key to filter services. If empty or `0`, this can be found on the standard book now tab.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_service_category
          in: query
          description: 'The key of a service category to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_service:
                    type: array
                    description: 'A list of services with information about them. <b>Key</b> - the service key. Primary key in {@link \RsServiceSql} table. <b>Value</b> - an array, with every element consisting of the next keys: <dl> <dt> array <var>a_class_tab</var> </dt> <dd> The list of tab keys for the service. </dd> <dt> array[] <var>a_direct_link</var> </dt> <dd> A list of links to start booking from a direct link. This can''t be one link, as the same appointment can be available in several booking tabs. Therefore, each booking tab has its own direct booking link. Each element has two values: <dl> <dt>string <var>k_class_tab</var></dt> <dd>The key of the book now tab.</dd> <dt>string <var>url_tab</var></dt> <dd>The booking URL. This will open the booking wizard under the related booking tab.</dd> </dl> </dd> <dt> array <var>a_config</var> </dt> <dd> Appointment-specific business policies. This will be `null` when using the general business policy. </dd> <dt> array <var>a_image</var> </dt> <dd> Information about the appointment image. An array with the following values: <dl> <dt>int <var>i_height</var></dt> <dd>The height of the image.</dd> <dt>int <var>i_width</var></dt> <dd>The width of the image.</dd> <dt>bool <var>is_empty</var></dt> <dd>This will be `true` if the image is not set.</dd> <dt>string <var>k_service</var></dt> <dd>The service key.</dd> <dt>string <var>s_service</var></dt> <dd>The name of the service.</dd> <dt>string <var>s_url</var></dt> <dd>The URL to the image.</dd> </dl> </dd> <dt> array <var>a_login_type_restriction</var> </dt> <dd> Keys are login type keys, primary keys in {@link \Wl\Login\Type\Sql}, values - List of login types'' titles for current service. Clients that have one of these types can book service. </dd> <dt> string[] <var>a_member_group_restriction</var> </dt> <dd> Keys are member group keys, primary keys in {@link \Wl\Member\Group\Sql}, values - list of member groups'' titles for current service. Clients that belongs to these groups can book service. </dd> <dt> string <var>f_deposit</var> </dt> <dd> The amount of deposit required. </dd> <dt> string <var>f_offline_max</var> </dt> <dd> The maximum offline price. </dd> <dt> string <var>f_offline_min</var> </dt> <dd> The minimum offline price. </dd> <dt> string <var>f_online</var> </dt> <dd> The online price. </dd> <dt> bool <var>hide_application</var> </dt> <dd> Determines whether the service will be hidden in the White Label mobile application. `true` means that service won''t be displayed. Otherwise, this will be `false`. </dd> <dt> int <var>i_age_from</var> </dt> <dd> The required minimum client age to book an appointment. </dd> <dt> int <var>i_age_to</var> </dt> <dd> The required maximum client age to book an appointment. </dd> <dt> int <var>i_price</var> </dt> <dd> The price type ID. One of {@link \RsServicePriceSid} constants. </dd> <dt> int <var>i_duration</var> </dt> <dd> The appointment duration in minutes. </dd> <dt> int <var>id_book_flow</var> </dt> <dd> The type of client booking flow. One of {@link \Wl\Service\ServiceBookFlowSid} constants. </dd> <dt> int <var>id_service_require</var> </dt> <dd> The required payment type ID. One of {@link \RsServiceRequireSid} constants. </dd> <dt> bool <var>is_age_public</var> </dt> <dd> `true` if age restrictions are public. Otherwise, `false` if they should be hidden from clients. </dd> <dt> bool <var>is_age_restricted</var> </dt> <dd> Determines whether this service can''t be booked due to age restrictions. </dd> <dt> bool <var>is_back_to_back</var> </dt> <dd> Determines whether this service supports back-to-back booking. </dd> <dt> bool <var>is_bookable</var> </dt> <dd> Whether this appointment can be booked online. </dd> <dt> bool <var>is_book_repeat_client</var> </dt> <dd> `true` if clients can book classes and appointments on a recurring basis. Otherwise, this `false`. </dd> <dt> bool <var>is_book_repeat_no_end_date_appointment</var> </dt> <dd> `true` if appointment bookings default to weekly recurring with no end date, `false` otherwise. </dd> <dt> bool <var>is_deposit_percent</var> </dt> <dd> `true` if <var>f_deposit</var> is a percentage. Otherwise, this will be `false` if <var>f_deposit</var> is an amount of money. </dd> <dt> bool <var>is_gender_select</var> </dt> <dd> `true` if clients can select the staff member''s gender. Otherwise, this will be `false`. </dd> <dt> bool <var>is_online_sell</var> </dt> <dd> `true` if clients can buy this appointment. Otherwise, this will be `false` if only staff members can sell it. </dd> <dt> bool <var>is_resource_type</var> </dt> <dd> `true` if the service requires assets. Otherwise, this will be `false`. </dd> <dt> bool <var>is_single_buy</var> </dt> <dd> `true` if the appointment can be booked without a Purchase Option. Otherwise, this will be `false` if it''s necessary to buy a Purchase Option. </dd> <dt> bool <var>is_staff_confirm</var> </dt> <dd> `true` if the appointment must be confirmed by a staff member after booking. Otherwise, this will be `false`. </dd> <dt> bool <var>is_staff_skip</var> </dt> <dd> `true` if clients can select a staff member for the appointment. Otherwise, this will be `false` if otherwise. </dd> <dt> bool <var>is_question</var> </dt> <dd> Determines whether the service will ask for questions or not. </dd> <dt> bool <var>is_virtual</var> </dt> <dd> `true` if the service is virtual. Otherwise, this will be `false`. </dd> <dt> string <var>k_service</var> </dt> <dd> The appointment primary key. Primary key in {@link \RsServiceSql} table. </dd> <dt> string <var>k_service_category</var> </dt> <dd> The service category primary key. Primary key in {@link \RsServiceCategorySql} table. </dd> <dt> string <var>s_duration</var> </dt> <dd> The appointment duration in a human-readable format. </dd> <dt> string <var>s_service</var> </dt> <dd> The appointment title. </dd> <dt> string <var>text_age_restriction</var> </dt> <dd> Age restriction header. </dd> <dt> string <var>xml_description</var> </dt> <dd> Appointment description (deprecated, use `html_description`). </dd> <dt> string <var>xml_description_short</var> </dt> <dd> Appointment short description (deprecated, use `html_description_short`). </dd> <dt> string <var>xml_special</var> </dt> <dd> Special instructions (deprecated, use `html_special`). </dd> </dl>'
                  is_multiple_booking:
                    type: boolean
                    description: 'Whether services allow multiple appointment booking.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Service-ServiceList
  '/Wl/Appointment/Book/Schedule/DayTime.json':
    get:
      summary: 'Retrieves a list of available appointment booking schedule.'
      parameters:
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: dt_date
          in: query
          description: 'The date to show the available appointment booking schedule.'
          schema:
            type: string
        - name: i_duration
          in: query
          description: 'The duration of the asset booking or custom appointment duration in minutes. Zero in case of service predefined duration. In case of back-to-back booking - custom duration of first appointment.'
          schema:
            type: number
            format: int32
        - name: i_index
          in: query
          description: 'An index of the selected asset. `0` for booking of service or if asset is not on layout.'
          schema:
            type: number
            format: int32
        - name: id_gender_staff
          in: query
          description: 'The ID of the staff member''s gender. In case of back-to-back booking - staff gender of first appointment. One of the {@link \AGenderSid} constants. `0` means no limitations on staff gender.'
          schema:
            type: number
            format: int32
        - name: is_back_to_back
          in: query
          description: 'Determines whether multiple appointments are booked in back-to-back mode.'
          schema:
            type: boolean
        - name: is_staff
          in: query
          description: '<tt>true</tt> if the request is made by staff member; in this case booking policy restrictions are ignored. <tt>false</tt> if the request is made by client; booking policy restrictions are applied.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only for the selected bookable tab. Cannot be set simultaneously with {DayTimeApi::$k_class_tab}.'
          schema:
            type: boolean
        - name: is_unavailable
          in: query
          description: '`true` - return service categories that have no staff members able to conduct them. `false` - return only service categories that have staff members able to conduct them.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_class_tab
          in: query
          description: 'Current booking tab. Only used for asset booking with "Allow clients to select a date and time, then the available asset" booking policy enabled. Cannot be set simultaneously with {DayTimeApi::$is_tab_all}.'
          schema:
            type: string|null
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_resource
          in: query
          description: 'The resource key to show which days are available for booking. Should be `0` in case of back-to-back booking.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The service key used for showing the available appointment booking schedule. In case of back-to-back booking - service key of first appointment.'
          schema:
            type: string
        - name: k_staff
          in: query
          description: 'The staff member key used for showing the available appointment booking schedule. In case of back-to-back booking - staff key of first appointment. `0` means any available staff.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'Key of timezone. `null` if not set then use default timezone client. See {@link ProfileTimezone::createInBusiness()}.'
          schema:
            type: null|string
        - name: s_appointment
          in: query
          description: 'The staff key to show what days are available for booking. For back-to-back booking ({@link DayTimeApi::$is_back_to_back} == `true`): array of appointments for back-to-back booking. Converted to JSON string to be usable as model key. Each item is an array with next structure: <dl> <dt>array <var>a_addon</var></dt><dd>Array of appointment addons. Each value is primary key in {@link \RsShopProductSql} table.</dd> <dt>int <var>i_duration</var></dt><dd>Custom duration of the appointment in minutes. Zero in case of service predefined duration.</dd> <dt>int <var>id_gender_staff</var></dt><dd>Staff gender. One of {@link \AGenderSid} constants. Zero mean no limitations on staff gender.</dd> <dt>string <var>k_service</var></dt><dd>Service key. Primary key in {@link \RsServiceSql} table.</dd> <dt>string <var>k_staff</var></dt><dd>Staff key. Zero means any available staff. Primary key in {@link \RsStaffSql} table.</dd> </dl> For multiple appointment booking ({@link DayTimeApi::$is_back_to_back} == `false`): array of previously booked appointments. Converted to JSON string to be usable as model key. Each item is an array with next structure: <dl> <dt>string <var>dtl_date</var></dt><dd>Local date and time of appointment start in MySQL format.</dd> <dt>int <var>i_duration</var></dt><dd>Duration of the appointment in minutes.</dd> <dt>string <var>k_service</var></dt><dd>Service key. Primary key in {@link \RsServiceSql} table.</dd> </dl>'
          schema:
            type: string
        - name: s_product
          in: query
          description: 'A list of service add-ons keys(encoded as JSON string). In case of back-to-back booking - add-ons of first appointment.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_time:
                    type: array
                    description: 'An array with a schedule of available appointment booking times. <dl> <dt>string <var>dt_date</var></dt> <dd>Date of the calendar.</dd> <dt>int <var>i_count</var></dt> <dd>Amount of clients that have already booked this appointment.</dd> <dt>int <var>i_time</var></dt> <dd>Integer representation of appointment schedule time.</dd> <dt>bool <var>is_waitlist</var></dt> <dd>Whether the appointment can be booked only in a wait list.</dd> <dt>string <var>k_staff</var></dt> <dd>If this time is already occupied by any client and staff member (but service capacity is not exhausted), this key contains key of staff member. Primary key in {@link \RsStaffSql} table). Otherwise `0`.</dd> <dt>string <var>s_title</var></dt> <dd>String representation of appointment schedule time.</dd> </dl>'
                  dt_date:
                    type: string
                    description: 'The date to show the available appointment booking schedule.'
                  is_waitlist:
                    type: boolean
                    description: 'Whether list of available times contains slots with only waitlist booking available.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Schedule-DayTime
  '/Wl/Appointment/Book/Schedule/Calendar.json':
    get:
      summary: 'Retrieves a list with all calendar days in specified period with available and unavailable appointment booking schedule.'
      parameters:
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: dt_date
          in: query
          description: 'The date to show the available appointment booking schedule.'
          schema:
            type: string
        - name: i_duration
          in: query
          description: 'The duration of the asset booking or custom appointment duration in minutes. Zero in case of service predefined duration. In case of back-to-back booking - custom duration of first appointment.'
          schema:
            type: number
            format: int32
        - name: i_index
          in: query
          description: 'An index of the selected asset. `0` for booking of service or if asset is not on layout.'
          schema:
            type: number
            format: int32
        - name: id_gender_staff
          in: query
          description: 'The ID of the staff member''s gender. In case of back-to-back booking - staff gender of first appointment. One of the {@link \AGenderSid} constants. `0` means no limitations on staff gender.'
          schema:
            type: number
            format: int32
        - name: is_back_to_back
          in: query
          description: 'Determines whether multiple appointments are booked in back-to-back mode.'
          schema:
            type: boolean
        - name: is_month_view
          in: query
          description: 'If calendar should be displayed in month view mode.'
          schema:
            type: boolean
        - name: is_staff
          in: query
          description: '<tt>true</tt> if the request is made by staff member; in this case booking policy restrictions are ignored. <tt>false</tt> if the request is made by client; booking policy restrictions are applied.'
          schema:
            type: boolean
        - name: is_tab_all
          in: query
          description: '`true` - search in all tabs. `false` - search only for the selected bookable tab. Cannot be set simultaneously with {DayTimeApi::$k_class_tab}.'
          schema:
            type: boolean
        - name: is_unavailable
          in: query
          description: '`true` - return service categories that have no staff members able to conduct them. `false` - return only service categories that have staff members able to conduct them.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_class_tab
          in: query
          description: 'Current booking tab. Only used for asset booking with "Allow clients to select a date and time, then the available asset" booking policy enabled. Cannot be set simultaneously with {DayTimeApi::$is_tab_all}.'
          schema:
            type: string|null
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_resource
          in: query
          description: 'The resource key to show which days are available for booking. Should be `0` in case of back-to-back booking.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The service key used for showing the available appointment booking schedule. In case of back-to-back booking - service key of first appointment.'
          schema:
            type: string
        - name: k_staff
          in: query
          description: 'The staff member key used for showing the available appointment booking schedule. In case of back-to-back booking - staff key of first appointment. `0` means any available staff.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'Key of timezone. `null` if not set to use client''s profile timezone.'
          schema:
            type: string|null
        - name: s_appointment
          in: query
          description: 'The staff key to show what days are available for booking. For back-to-back booking ({@link DayTimeApi::$is_back_to_back} == `true`): array of appointments for back-to-back booking. Converted to JSON string to be usable as model key. Each item is an array with next structure: <dl> <dt>array <var>a_addon</var></dt><dd>Array of appointment addons. Each value is primary key in {@link \RsShopProductSql} table.</dd> <dt>int <var>i_duration</var></dt><dd>Custom duration of the appointment in minutes. Zero in case of service predefined duration.</dd> <dt>int <var>id_gender_staff</var></dt><dd>Staff gender. One of {@link \AGenderSid} constants. Zero mean no limitations on staff gender.</dd> <dt>string <var>k_service</var></dt><dd>Service key. Primary key in {@link \RsServiceSql} table.</dd> <dt>string <var>k_staff</var></dt><dd>Staff key. Zero means any available staff. Primary key in {@link \RsStaffSql} table.</dd> </dl> For multiple appointment booking ({@link DayTimeApi::$is_back_to_back} == `false`): array of previously booked appointments. Converted to JSON string to be usable as model key. Each item is an array with next structure: <dl> <dt>string <var>dtl_date</var></dt><dd>Local date and time of appointment start in MySQL format.</dd> <dt>int <var>i_duration</var></dt><dd>Duration of the appointment in minutes.</dd> <dt>string <var>k_service</var></dt><dd>Service key. Primary key in {@link \RsServiceSql} table.</dd> </dl>'
          schema:
            type: string
        - name: s_product
          in: query
          description: 'A list of service add-ons keys(encoded as JSON string). In case of back-to-back booking - add-ons of first appointment.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_date:
                    type: array[]
                    description: 'A list with all calendar days in the specified month with available and unavailable appointment bookings in the schedule. <dl> <dt>string <var>dt_date</var></dt> <dd>Date item of the calendar.</dd> <dt>int <var>i_week</var></dt> <dd>Number of day in week.</dd> <dt>bool <var>is_available</var></dt> <dd>Whether booking is available for this day.</dd> <dt>bool <var>is_current</var></dt> <dd>Whether date is current.</dd> <dt>bool <var>is_out</var></dt> <dd>Whether date is out of current month or it''s business/location closed date.</dd> <dt>bool <var>is_waitlist_only</var></dt> <dd>Whether booking for this day available only in wait list.</dd> <dt>bool <var>is_week_end</var></dt> <dd>Whether date is last day of the week.</dd> <dt>bool <var>is_week_start</var></dt> <dd>Whether date is first day of the week.</dd> <dt>string <var>s_day</var></dt> <dd>String representation of day number with leading zeroes.</dd> <dt>string <var>s_week</var></dt> <dd>String representation of week day (one letter, i.e. "F").</dd> </dl>'
                  a_time:
                    type: array
                    description: 'An array with a schedule of available appointment booking times. <dl> <dt>string <var>dt_date</var></dt> <dd>Date of the calendar.</dd> <dt>int <var>i_count</var></dt> <dd>Amount of clients that have already booked this appointment.</dd> <dt>int <var>i_time</var></dt> <dd>Integer representation of appointment schedule time.</dd> <dt>bool <var>is_waitlist</var></dt> <dd>Whether the appointment can be booked only in a wait list.</dd> <dt>string <var>k_staff</var></dt> <dd>If this time is already occupied by any client and staff member (but service capacity is not exhausted), this key contains key of staff member. Primary key in {@link \RsStaffSql} table). Otherwise `0`.</dd> <dt>string <var>s_title</var></dt> <dd>String representation of appointment schedule time.</dd> </dl>'
                  a_timezone_data:
                    type: array
                    description: 'Information about timezone. <dl> <dt>array|null <var>a_timezone</var></dt> <dd> `null` if business settings doesn''t allow client to adjust timezone, otherwise list of timezones: <dl> <dt>int <var>i_order</var></dt> <dd>Timezone order.</dd> <dt>int <var>i_shift</var></dt> <dd>Timezone shift from UTC in hours.</dd> <dt>bool <var>is_select</var></dt> <dd>`true` for selected timezone - from {@link CalendarApi::$k_timezone} param or client''s default timezone when param not set.</dd> <dt>string <var>k_timezone</var></dt> <dd>Timezone key.</dd> <dt>string <var>s_title</var></dt> <dd>Timezone name.</dd> <dt>string <var>text_abbr</var></dt> <dd>Timezone abbreviation.</dd> </dl> </dd> <dt>string|null <var>name</var></dt> <dd>`null` if business settings doesn''t allow client to adjust timezone, otherwise timezone input name.</dd> </dl>'
                  a_week_name:
                    type: array
                    description: 'Array with short week day''s names (2 letters, i.e. ''Fr'') for calendar month view. Week days order according to business''s settings. <dl> <dt>int <var>i_day</var></dt> <dd>Week day, one of the {@link \ADateWeekSid} constants.</dd> <dt>string <var>html_week_day</var></dt> <dd>Short week day''s name (2 letters, i.e. ''Fr'').</dd> </dl>'
                  can_backwards:
                    type: boolean
                    description: 'Whether previous calendar period can be shown (start of shown period later than current date).'
                  dt_date:
                    type: string
                    description: 'The date to show the available appointment booking schedule.'
                  i_week_end:
                    type: number
                    format: int32
                    description: 'Last day of the week. One of {@link \ADateWeekSid} constants.'
                  i_week_start:
                    type: number
                    format: int32
                    description: 'First day of the week. One of {@link \ADateWeekSid} constants.'
                  is_waitlist:
                    type: boolean
                    description: 'Whether list of available times contains slots with only waitlist booking available.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
      tags:
        - Schedule-Calendar
  '/Wl/Appointment/Book/Purchase/Purchase.json':
    get:
      summary: 'Retrieves a list of information about available purchase options.'
      parameters:
        - name: a_service
          in: query
          description: 'List of selected services without current {@link \Wl\Appointment\Book\Purchase\PurchaseApi::$k_service}. The list of these services directly affects the list of selected promotions. Depending on the number and order of services, there may be different results. The current {@link \Wl\Appointment\Book\Purchase\PurchaseApi::$k_service} will be added to the end of this list. It is worth considering this list as a list of previously selected services. Each element has the following structure: <dl> <dt>array <var>a_purchase</var></dt> <dd> List of purchase options selected for the service. Should be set if a new purchase option is selected for this service. <dl> <dt>int <var>id_purchase_item</var></dt> <dd>Purchase item ID. Constant from {@link \RsPurchaseItemSid}.</dd> <dt>string <var>k_id</var></dt> <dd>Purchase item key.</dd> </dl> </dd> <dt>string <var>dt_date</var></dt> <dd>Local date/time to check purchase options expiration.</dd> <dt>string|null <var>k_login_prize</var></dt> <dd> Login prize key. Primary key from {@link \RsLoginPrizeSql}. `null` if no login prize used to pay for this service. </dd> <dt>string|null <var>k_login_promotion</var></dt> <dd> Login promotion key. Should be set if login promotion selected for this service. </dd> <dt>string <var>k_service</var></dt> <dd>Service key. See table {@link \RsServiceSql}.</dd> <dt>string <var>k_timezone</var></dt> <dd> The timezone key for `dt_date` field. Can be `null` if timezone is not selected. If not selected, the default client timezone will be used {@link ProfileTimezone::createInBusiness()}. In any case, the timezone will be used if the business allows client timezones. </dd> </dl>'
          schema:
            type: array[]
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: dt_date
          in: query
          description: 'The date to use to check for expiration of Purchase Options.'
          schema:
            type: string
        - name: i_duration
          in: query
          description: 'The asset booking duration.'
          schema:
            type: number
            format: int32
        - name: i_height
          in: query
          description: 'Image height in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size {@link \RsLoginLogo::THUMBNAIL_HEIGHT}.'
          schema:
            type: int|null
        - name: i_width
          in: query
          description: 'Image width in pixels. Please specify this value if you need image to be returned in specific size. In case this value is not specified returned image will have default thumbnail size {@link \RsLoginLogo::THUMBNAIL_WIDTH}.'
          schema:
            type: int|null
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_backend
          in: query
          description: '`true` - get all Purchase Options suitable for appointment. `false` - get only Purchase Options available for the client.'
          schema:
            type: boolean
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The Purchase Option ID used to pay for the appointment. This will be `null` if the client doesn''t have a suitable Purchase Option.'
          schema:
            type: string
        - name: k_resource
          in: query
          description: 'The resource key.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The service key used to select available Purchase Options. If multiple services are selected, they should be specified in {@link PurchaseApi::$a_service} array.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'The timezone key for {@link PurchaseApi::$dt_date}. Can be `null` if timezone is not selected. If not selected, the default client timezone will be used {@link ProfileTimezone::createInBusiness()}. In any case, the timezone will be used if the business allows client timezones.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_prize:
                    type: array
                    description: 'Data about the login prize which can be used to pay for service. <dl> <dt>int <var>i_count</var></dt><dd>Login prize remaining quantity.</dd> <dt>string <var>k_login_prize</var></dt><dd>Key of login prize. Primary key in {@link \RsLoginPrizeSql}.</dd> <dt>string <var>text_description</var></dt><dd>User friendly login prize description.</dd> </dl>'
                  a_login_promotion:
                    type: array[]
                    description: 'A list of the client`s login promotions that can be applied to a given service. <dl> <dt>array <var>a_login_promotion_info</var></dt> <dd> Information about the Purchase Option. It contains the following information: <dl> <dt>int <var>i_limit</var></dt> <dd>The count of visits that the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes that current Purchase Option can be used for.</dd> <dt>int <var>i_remain</var></dt> <dd>The count of the remaining visits.</dd> <dt>int|null <var>i_remain_duration</var></dt> <dd>The number of minutes left in this Purchase Option.</dd> </dl> </dd> <dt>string[] <var>a_visit_limit</var></dt> <dd>The list of calendar restrictions of the Purchase Option. For example, four per week.</dd> <dt>array <var>a_restrict</var></dt> <dd>Data about the shortest restriction period: <dl> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the shortest restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the shortest restriction period.</dd> <dt>string <var>text_restriction</var></dt> <dd>The description of the shortest restriction period. For example "this week" or "for a four-day period".</dd> </dl> </dd> <dt>array[] <var>a_restrict_data</var></dt> <dd>Data about all restriction periods. Given as an array, where each record has the following structure: <dl> <dt>int <var>i_book</var></dt> <dd>The count of future sessions that are paid with this Purchase Option.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the restriction period.</dd> <dt>int <var>i_use</var></dt> <dd>The usage count of the Purchase Option.</dd> <dt>int <var>i_visit_past</var></dt> <dd> The count of attended sessions before the last renewal. This will be ''0'' if no sessions before the last renewal or if the Purchase Option doesn''t auto-renew. </dd> <dt>string <var>text_restriction</var></dt> <dd>The description of restriction period. For example, "this week" or "for a four-day period".</dd> </dl> </dd> <dt>int <var>i_limit</var></dt> <dd>The count of visits that the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes that current Purchase Option can be used for.</dd> <dt>int <var>i_promotion_priority</var></dt> <dd>Priority of this promotion. Result of {@link PromotionPrioritySid::priorityGet()} method.</dd> <dt>int <var>id_program</var></dt> <dd>The program ID for promotions. One of the {@link \RsProgramSid} constants.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The Purchase Option login key. Primary key in {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>s_class_include</var></dt> <dd>The list of services provided by this Purchase Option.</dd> <dt>string <var>s_description</var></dt> <dd>The Purchase Option description.</dd> <dt>string <var>s_duration</var></dt> <dd>The Purchase Option duration.</dd> <dt>string <var>s_title</var></dt> <dd>The Purchase Option name.</dd> <dt>string <var>text_package_item</var></dt> <dd>If this Purchase Option is a package, then this field contains a list of Purchase Options contained in the package.</dd> </dl>'
                  a_purchase:
                    type: array[]
                    description: 'An array with information about available Purchase Options. <dl> <dt> array <var>a_image</var> </dt> <dd> Information describing the logo of the purchase option. This value can be false if there is no logo described. Image information will have the following fields: <dl> <dt> int <var>i_height</var> </dt> <dd> Actual height of thumbnail image. </dd> <dt> int <var>i_height_src</var> </dt> <dd> Height of original image. </dd> <dt> int <var>i_rotate</var> </dt> <dd> Angle on which image was rotated compared to the original. </dd> <dt> int <var>i_width</var> </dt> <dd> Actual width of thumbnail image. </dd> <dt> int <var>i_width_src</var> </dt> <dd> Width of original image. </dd> <dt> bool <var>is-resize</var> </dt> <dd> Whether thumbnail is a resized variant of original image. If set to <tt>false</tt> value returned in <var>url-thumbnail</var> equals value in <var>url-view</var>. </dd> <dt> string <var>url-view</var> </dt> <dd> Url to original image in file storage. </dd> <dt> string <var>url-thumbnail</var> </dt> <dd> Url to resized and rotated image in file storage. If size of original image is larger then specified by arguments, image thumbnail as created, and a link to this thumbnail is returned. Otherwise link to original image is returned here. </dd> </dl> </dd> <dt> array <var>a_payment</var> </dt> <dd> The set of calculated values for payment: <dl> <dt> string <var>m_discount</var> </dt> <dd> The amount of the whole discount of one purchase item. </dd> <dt> string <var>m_discount_login</var> </dt> <dd> The discount amount for the client type of one purchase item. </dd> </dl> </dd> <dt> string[] <var>a_visit_limit</var> </dt> <dd> A list of calendar restrictions of the Purchase Option in a human readable format, for example: ''4 per week''. </dd> <dt> string <var>dt_expire</var> </dt> <dd> Date, when promotion expires. </dd> <dt> string <var>dt_start</var> </dt> <dd> Date, when promotion starts. </dd> <dt> string <var>f_price</var> </dt> <dd> The price of the Purchase Option. </dd> <dt> int <var>i</var> </dt> <dd> Order number of the purchase option in the list. </dd> <dt> int <var>i_limit</var> </dt> <dd> Count of visits that purchase option allows to make. </dd> <dt> int|null <var>i_limit_duration</var> </dt> <dd> Maximum number of minutes that current promotion can be used. </dd> <dt> int <var>i_payment_period</var> </dt> <dd> Count of calendar periods (weeks, months, years) between payment for membership. </dd> <dt> int <var>id_duration</var> </dt> <dd> Duration ID. Constant from {@link \ADurationSid}. </dd> <dt> int <var>id_program</var> </dt> <dd> Program ID for promotions from {@link \RsProgramSid}. </dd> <dt> int <var>id_program_type</var> </dt> <dd> Program type ID. Constant from {@link \RsProgramTypeSid}. </dd> <dt> int <var>id_promotion_price</var> </dt> <dd> How the Purchase Item price is specified. One of the {@link \RsProgramTypeSid} constants. </dd> <dt> int <var>id_purchase_item</var> </dt> <dd> ID of the purchase item from {@link \RsPurchaseItemSid} </dd> <dt> bool <var>is_contract</var> </dt> <dd> This will be `true` if the Purchase Option is a contract. It will `false` otherwise. </dd> <dt> bool <var>is_description</var> </dt> <dd> `true` if purchase option has description. </dd> <dt> bool <var>is_introductory</var> </dt> <dd> `true` if promotion is introductory offer, `false` otherwise. </dd> <dt> bool <var>is_renew</var> </dt> <dd> This will be `true` if the Purchase Option will auto-renew. It will be `false` otherwise. </dd> <dt> bool <var>is_renew_check</var> </dt> <dd> If `true` - the Purchase Option is renewable and the "auto-renew" option should be turned on by default. `This will be `false` otherwise. </dd> <dt> bool <var>is_start</var> </dt> <dd> This will be `true` if the Purchase Option has a duration that begins on purchase. It will be `false` otherwise. </dd> <dt> int <var>k_id</var> </dt> <dd> Primary ID of the element in it''s table. </dd> <dt> string|null [<var>m_price_old</var>] </dt> <dd> Price of single session purchase before online discount. `null` if service does not have online discount. Is set only if this purchase option is purchase of single visit. </dd> <dt> string <var>s_activation</var> </dt> <dd> Activation settings of the promotion. </dd> <dt> string <var>s_class</var> </dt> <dd> Class for designer to mark purchase options with different icons. </dd> <dt> string <var>s_class_include</var> </dt> <dd> List of included in the promotion services. </dd> <dt> string <var>s_description</var> </dt> <dd> Description of the purchase option. </dd> <dt> string <var>s_duration</var> </dt> <dd> Duration of the promotion. </dd> <dt> string <var>s_payment_duration</var> </dt> <dd> Period between payments for memberships. </dd> <dt> string <var>sid_program_category</var> </dt> <dd> Category of the program for promotions from {@link \RsProgramCategorySid}. </dd> <dt> string <var>s_title</var> </dt> <dd> Name of the purchase option. </dd> <dt> string <var>s_value</var> </dt> <dd> Key of the purchase option in the format [<var>purchase_item_id</var>]::[<var>k_id</var>] </dd> <dt> string <var>text_package_item</var> </dt> <dd> If this promotion is a package. This field contains list of promotions contained in the package. </dd> </dl>'
                  a_reward_prize:
                    type: array
                    description: 'List of redeemable prizes which can be used to pay for service. <dl> <dt>int <var>i_score</var></dt><dd>Prize price in points.</dd> <dt>string <var>k_reward_prize</var></dt><dd>Key of redeemable prize.. Primary key in {@link \RsRewardPrizeSql}.</dd> <dt>string <var>text_description</var></dt><dd>User friendly prize description.</dd> </dl>'
                  a_session_pass:
                    type: array
                    description: 'Session pass information in a case if user books same appointment second time and already has Drop-in.'
                  is_single_default:
                    type: boolean
                    description: 'Indicates if drop-in rate should be the default purchase option.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  k_login_promotion:
                    type: string
                    description: 'The Purchase Option ID used to pay for the appointment. This will be `null` if the client doesn''t have a suitable Purchase Option.'
                  k_promotion_default:
                    type: string
                    description: 'Default promotion key. Primary key in {@link \RsPromotionSql} table. Empty if the appointment has no default promotion.'
                  text_login_promotion:
                    type: string
                    description: 'Login promotion title suitable to pay for the services.'
      tags:
        - Purchase-Purchase
  '/Wl/Appointment/Book/Staff/List.json':
    get:
      summary: 'Retrieves an information about staff members for the current service.'
      parameters:
        - name: dt_date
          in: query
          description: 'The date/time of the appointment selected by user, in the location''s time zone.'
          schema:
            type: string
        - name: i_duration_custom
          in: query
          description: 'Custom appointment duration in minutes. `null` if not set.'
          schema:
            type: int|null
        - name: id_role
          in: query
          description: 'User role by whom this api called. For different roles different results might be generated.'
          schema:
            type: number
            format: int32
        - name: is_unavailable
          in: query
          description: '`true` - returns service categories that have no staff members available to conduct them. `false` - returns only service categories that have staff members available to conduct them.'
          schema:
            type: boolean
        - name: k_appointment_ignore
          in: query
          description: 'Key of appointment which must be ignored when searches available staff.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The key of a service for which to show information.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'User''s timezone. Primary key in {@link \AGeoTimezoneSql} table. `null` until initialized or to use location timezone.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'The user key for whom the service is booking. Primary key in {@link \PassportLoginSql} table. `null` when not set.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_staff:
                    type: array[]
                    description: 'A list of staff members with information about them. <dl> <dt>int <var>id_gender</var></dt> <dd>Staff member''s gender.</dd> <dt>bool <var>is_available</var></dt> <dd>Whether staff member is available for booking. Note, if staff member reached daily limits, this field will be different for client and staff booking flows. If client books, such staff member is not available and this field is `false`. If staff member books, such staff member is available.</dd> <dt>bool <var>is_daily_limit</var></dt> <dd>Whether staff member reached daily limits on number or total duration of the appointments for one day.</dd> <dt>bool <var>is_wait_list</var></dt> <dd>Whether staff member available only for wait list booking.</dd> <dt>string <var>k_staff</var></dt> <dd>Primary key of the staff member.</dd> <dt>string <var>s_position</var></dt> <dd>Position of the staff member in the business.</dd> <dt>int <var>s_staff</var></dt> <dd>Name of the staff member.</dd> <dt>string <var>uid</var></dt> <dd>UID of the staff member.</dd> <dt>string <var>xml_biography</var></dt> <dd>Biography of the staff member.</dd> </dl>'
                  can_book_unavailable_staff:
                    type: boolean
                    description: 'Can staff booked unavailable staff.'
                  has_gender:
                    type: boolean
                    description: 'Determines whether to select the staff member''s gender for the appointment.'
                  has_staff:
                    type: boolean
                    description: 'Determines whether to select staff member(s) for the appointment.'
                  is_gender_different:
                    type: boolean
                    description: 'Determines if the staff list has male and female members.'
      tags:
        - Staff-List
  '/Wl/Appointment/Book/Payment/Payment.json':
    get:
      summary: 'Additional information about payment.'
      parameters:
        - name: a_book_data
          in: query
          description: 'Information detailing an appointment booking.'
          schema:
            type: array
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: id_mode
          in: query
          description: 'The key of source mode. A constant of {@link ModeSid}.'
          schema:
            type: number
            format: int32
        - name: id_purchase_item
          in: query
          description: 'The purchase item ID. A constant of {@link \RsPurchaseItemSid}.'
          schema:
            type: number
            format: int32
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key. Currently used only with {@link \Wl\Appointment\Book\Payment\PaymentApi::$k_session_pass} variable.'
          schema:
            type: string|null
        - name: k_id
          in: query
          description: 'The item key. Depends on {@link PaymentApi::$id_purchase_item} property.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The login promotion key.'
          schema:
            type: string
        - name: k_session_pass
          in: query
          description: 'Session pass key.'
          schema:
            type: string
        - name: m_variable_price
          in: query
          description: 'Variable price. Is set only during booking an appointment with variable type of the price {@link \RsServicePriceSid::VARIES} from spa backend {@link ModeSid::SPA_BACKEND}.'
          schema:
            type: string
        - name: s_unique_key
          in: query
          description: 'Service unique key. Used for model cache.'
          schema:
            type: string
        - name: text_coupon_code
          in: query
          description: 'Gift card code.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code to be applied to the purchase.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion_data:
                    type: array[]
                    description: 'Information about selected Purchase Options. <dl> <dt>string <var>i_limit</var></dt> <dd>The limit of total visits.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits.</dd> <dt>string <var>s_expire</var></dt> <dd>The expiration date.</dd> <dt>string <var>s_title</var></dt> <dd>The title of the Purchase Option.</dd> </dl>'
                  a_purchase:
                    type: array[]
                    description: 'Information about selected purchase items. Indexes are strings in the format `id_purchase_item-k_id`. Values are an array with the following structure: <dl> <dt>array <var>a_tax</var></dt> <dd> Contains information about taxes in the following format. A list of taxes to apply. The array keys are `k_tax` keys. Each element contains the following fields: <dl> <dt>float <var>m_tax</var></dt> <dd>The tax rate.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the tax.</dd> </dl> </dd> <dt>string <var>id_purchase_item</var></dt> <dd>The purchase item ID. A constant of {@link \RsPurchaseItemSid}.</dd> <dt>string <var>k_id</var></dt> <dd>The value of the discount used for the purchase.</dd> <dt>string <var>m_discount</var></dt> <dd>The value of the discount used for the purchase.</dd> <dt>string <var>m_discount_login</var></dt> <dd>The discount amount for the client type of one purchase item.</dd> <dt>string <var>m_pay</var></dt> <dd>The payment for the Purchase Option or single visit without taxes.</dd> <dt>string <var>m_price</var></dt> <dd>The price of the Purchase Option or single visit.</dd> </dl>'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  m_coupon:
                    type: string
                    description: 'Gift card amount.'
                  m_discount:
                    type: string
                    description: 'Discount amount.'
                  m_surcharge:
                    type: string
                    description: 'Surcharge amount calculated for credit cards (Virtual Terminal and Card Swiper).'
                  m_surcharge_ach:
                    type: string
                    description: 'Surcharge amount calculated for money transfers from account: ACH, Direct Entry.'
                  m_tax:
                    type: string
                    description: 'The tax of service.'
                  m_total:
                    type: string
                    description: 'The total cost of the purchase.'
      tags:
        - Payment-Payment
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_book_data:
                  type: array
                  description: 'Information detailing an appointment booking.'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                a_quiz_response:
                  type: array
                  description: 'List of quiz response keys. Key is quiz key from {@link \Core\Quiz\QuizSql} table. Value is response key from {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The key of source mode. A constant of {@link ModeSid}.'
                id_purchase_item:
                  type: number
                  format: int32
                  description: 'The purchase item ID. A constant of {@link \RsPurchaseItemSid}.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_id:
                  type: string
                  description: 'The item key. Depends on {@link PaymentApi::$id_purchase_item} property.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                text_coupon_code:
                  type: string
                  description: 'Gift card code.'
                text_discount_code:
                  type: string
                  description: 'The discount code to be applied to the purchase.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_purchase_item:
                    type: string[]|null
                    description: 'The purchase item keys from the database. This will be `null` if not set yet.'
                  id_pay:
                    type: number
                    format: int32
                    description: 'The payment type for the appointment. A constant of {@link \RsAppointmentPaySid}.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  k_login_activity_purchase:
                    type: string
                    description: 'The key of activity of the purchase made. Empty if no purchase has been made.'
                  k_login_prize:
                    type: string
                    description: 'Login prize key. In case when appointment paid by reward prize, there is the key of redeemed login prize. Empty otherwise.'
      tags:
        - Payment-Payment
  '/Wl/Appointment/Book/Payment/PaymentMultiple.json':
    get:
      summary: 'Additional information about payment.'
      parameters:
        - name: a_book_data
          in: query
          description: 'The booking process information: <dl> <dt> array[] <var>a_provider</var> </dt> <dd> The batch of appointments to be booked. Each element has the next values: <dl> <dt> array <var>a_product</var> </dt> <dd> The add-on list. Keys refer to add-on keys, and values refer to the add-on quantities. </dd> <dt> int <var>i_duration</var> </dt> <dd> The asset duration in minutes. This won''t be empty for asset bookings. </dd> <dt> int <var>id_purchase_item</var> </dt> <dd> The ID of the purchase item. One of the {@link \RsPurchaseItemSid} constants. This won''t be empty for new options purchased. </dd> <dt> bool <var>is_pay_later</var> </dt> <dd> This will be <tt>true</tt> if the customer wants to pay upon their visit. Otherwise, this will be <tt>false</tt> if the user wants to pay now. </dd> <dt> bool <var>is_purchase_previous</var> </dt> <dd> This will be <tt>true</tt> if the Purchase Option that was selected for another appointment from the batch must be used for this appointment. Otherwise, this will be <tt>false</tt>. </dd> <dt> bool <var>is_wait_list_unpaid</var> </dt> <dd> This will be <tt>true</tt> if the customer is booked into the wait list and doesn''t have to pay. Otherwise, this will be <tt>false</tt> if the customer is booking to an active list (or if the wait list booking should be paid now). </dd> <dt> string <var>k_id</var> </dt> <dd> The key of the purchase item. This won''t be empty for new options purchased. </dd> <dt> string <var>k_login_prize</var> </dt> <dd> The key of the customer''s prize used to pay for the booking. This won''t be empty for bookings made using prizes. </dd> <dt> string <var>k_login_promotion</var> </dt> <dd> The key of the Purchase Option. This won''t be empty when using a Purchase Option that''s already been purchased. </dd> <dt> string <var>k_resource</var> </dt> <dd> The key of the asset booking. This is only used for asset bookings. </dd> <dt> string <var>k_service</var> </dt> <dd> The key of the appointment booking service. This is only used for appointment bookings. </dd> <dt> string <var>s_signature</var> </dt> <dd> The signature for the Purchase Option contract. The data is returned from the canvas HTML element or the signature pad. This won''t be empty if the Purchase Option requires contract signing. </dd> </dl> </dd> <dt> int <var>id_class_tab</var> </dt> <dd> The "Book now" tab. One of the {@link TabSid} constants. </dd> <dt> string <var>m_tip_appointment</var> </dt> <dd> The tips amount. </dd> </dl> Set this field value for GET requests.'
          schema:
            type: array
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: id_mode
          in: query
          description: 'The ID of the source mode. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: text_coupon_code
          in: query
          description: 'The gift card code.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion_data:
                    type: array
                    description: 'Information about the selected login promotion. <dl> <dt> int <var>i_limit</var> </dt> <dd> The visit count limit of the promotion. </dd> <dt> int <var>i_remain</var> </dt> <dd> The count of remaining visits. </dd> <dt> string <var>s_expire</var> </dt> <dd> The expiration date. </dd> <dt> string <var>s_title</var> </dt> <dd> The title of the promotion. </dd> </dl>'
                  a_purchase:
                    type: array
                    description: 'Fields refer to strings in the format <tt>id_purchase_item-k_id</tt>. Values refer to an array with the next stricture: <dl> <dt> array <var>a_tax</var> </dt> <dd> A list of taxes to apply containing information about taxes. The array keys are <tt>k_tax</tt> keys. Each element contains the following fields: <dl> <dt> float <var>m_tax</var> </dt> <dd> The tax rate. </dd> <dt> string <var>text_title</var> </dt> <dd> The name of the tax. </dd> </dl> </dd> <dt> string <var>id_purchase_item</var> </dt> <dd> The purchase item ID. One of the {@link \RsPurchaseItemSid} constants. </dd> <dt> string <var>k_id</var> </dt> <dd> The value of the discount used for the purchase. </dd> <dt> string <var>m_discount</var> </dt> <dd> The value of the discount used for the purchase. </dd> <dt> string <var>m_pay</var> </dt> <dd> The payment for the promotion (or single visit) without taxes. </dd> <dt> string <var>m_price</var> </dt> <dd> The price of the promotion (or single visit). </dd> </dl>'
                  a_total:
                    type: string[]
                    description: 'The list of amounts to pay for appointments from the batch, with taxes and without surcharges.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  m_coupon:
                    type: string
                    description: 'The gift card amount.'
                  m_discount:
                    type: string
                    description: 'The discount amount.'
                  m_surcharge:
                    type: string
                    description: 'Surcharge amount calculated for credit cards (Virtual Terminal and Card Swiper).'
                  m_surcharge_ach:
                    type: string
                    description: 'Surcharge amount calculated for money transfers from account: ACH, Direct Entry.'
                  m_tax:
                    type: string
                    description: 'The amount of tax to pay.'
                  m_total:
                    type: string
                    description: 'The price of the service, with taxes and without surcharges.'
      tags:
        - Payment-PaymentMultiple
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_book_data_post:
                  type: array
                  description: 'A copy of {@link PaymentMultipleApi::$a_book_data}. Set this field value for POST requests.'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                a_quiz_response:
                  type: array
                  description: 'The list of quiz response keys. Keys refer to quiz keys. Primary key in {@link \Core\Quiz\QuizSql} table. And values refer to response keys. Primary key in {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The ID of the source mode. One of the {@link ModeSid} constants.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                text_coupon_code:
                  type: string
                  description: 'The gift card code.'
                text_discount_code:
                  type: string
                  description: 'The discount code.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_prize:
                    type: string[]
                    description: 'The list of redeemed prizes. Each value is a primary key in {@link \RsLoginPrizeSql} table.'
                  a_pay:
                    type: int[]
                    description: 'The payment type for the appointment. One of the {@link \RsAppointmentPaySid} constants.'
                  a_purchase_item:
                    type: string[][]|null
                    description: 'The keys of purchased items. The first level of the array is the list of appointments from the batch. The second level of the array is the list of items purchased for this appointment.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  k_login_activity_purchase:
                    type: string
                    description: 'Key of the activity for the purchase made. This will be empty if no purchase has been made.'
      tags:
        - Payment-PaymentMultiple
  '/Wl/Appointment/Book/Payment/PaymentPost.json':
    get:
      summary: 'Additional information about payment.'
      parameters:
        - name: a_uid
          in: query
          description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
          schema:
            type: string[]
        - name: id_mode
          in: query
          description: 'The key of source mode. A constant of {@link ModeSid}.'
          schema:
            type: number
            format: int32
        - name: id_purchase_item
          in: query
          description: 'The purchase item ID. A constant of {@link \RsPurchaseItemSid}.'
          schema:
            type: number
            format: int32
        - name: is_walk_in
          in: query
          description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key. Currently used only with {@link \Wl\Appointment\Book\Payment\PaymentApi::$k_session_pass} variable.'
          schema:
            type: string|null
        - name: k_id
          in: query
          description: 'The item key. Depends on {@link PaymentApi::$id_purchase_item} property.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The login promotion key.'
          schema:
            type: string
        - name: k_session_pass
          in: query
          description: 'Session pass key.'
          schema:
            type: string
        - name: m_variable_price
          in: query
          description: 'Variable price. Is set only during booking an appointment with variable type of the price {@link \RsServicePriceSid::VARIES} from spa backend {@link ModeSid::SPA_BACKEND}.'
          schema:
            type: string
        - name: s_unique_key
          in: query
          description: 'Service unique key. Used for model cache.'
          schema:
            type: string
        - name: text_coupon_code
          in: query
          description: 'Gift card code.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code to be applied to the purchase.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion_data:
                    type: array[]
                    description: 'Information about selected Purchase Options. <dl> <dt>string <var>i_limit</var></dt> <dd>The limit of total visits.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits.</dd> <dt>string <var>s_expire</var></dt> <dd>The expiration date.</dd> <dt>string <var>s_title</var></dt> <dd>The title of the Purchase Option.</dd> </dl>'
                  a_purchase:
                    type: array[]
                    description: 'Information about selected purchase items. Indexes are strings in the format `id_purchase_item-k_id`. Values are an array with the following structure: <dl> <dt>array <var>a_tax</var></dt> <dd> Contains information about taxes in the following format. A list of taxes to apply. The array keys are `k_tax` keys. Each element contains the following fields: <dl> <dt>float <var>m_tax</var></dt> <dd>The tax rate.</dd> <dt>string <var>text_title</var></dt> <dd>The name of the tax.</dd> </dl> </dd> <dt>string <var>id_purchase_item</var></dt> <dd>The purchase item ID. A constant of {@link \RsPurchaseItemSid}.</dd> <dt>string <var>k_id</var></dt> <dd>The value of the discount used for the purchase.</dd> <dt>string <var>m_discount</var></dt> <dd>The value of the discount used for the purchase.</dd> <dt>string <var>m_discount_login</var></dt> <dd>The discount amount for the client type of one purchase item.</dd> <dt>string <var>m_pay</var></dt> <dd>The payment for the Purchase Option or single visit without taxes.</dd> <dt>string <var>m_price</var></dt> <dd>The price of the Purchase Option or single visit.</dd> </dl>'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  m_coupon:
                    type: string
                    description: 'Gift card amount.'
                  m_discount:
                    type: string
                    description: 'Discount amount.'
                  m_surcharge:
                    type: string
                    description: 'Surcharge amount calculated for credit cards (Virtual Terminal and Card Swiper).'
                  m_surcharge_ach:
                    type: string
                    description: 'Surcharge amount calculated for money transfers from account: ACH, Direct Entry.'
                  m_tax:
                    type: string
                    description: 'The tax of service.'
                  m_total:
                    type: string
                    description: 'The total cost of the purchase.'
      tags:
        - Payment-PaymentPost
    post:
      summary: 'Allows to pay an appointment or appointment purchase option for the client.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_book_data:
                  type: array
                  description: 'Information detailing an appointment booking. Same as {@link \Wl\Appointment\Book\Payment\PaymentApi::$a_book_data}.'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                a_quiz_response:
                  type: array
                  description: 'List of quiz response keys. Key is quiz key from {@link \Core\Quiz\QuizSql} table. Value is response key from {@link \Core\Quiz\Response\ResponseSql} table.'
                a_uid:
                  type: string[]
                  description: 'List of user keys to book appointments. Primary keys in {@link \PassportLoginSql}. There may be empty values in this list, which means that this is a walk-in.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The key of source mode. A constant of {@link ModeSid}.'
                id_purchase_item:
                  type: number
                  format: int32
                  description: 'The purchase item ID. A constant of {@link \RsPurchaseItemSid}.'
                is_walk_in:
                  type: boolean
                  description: 'If `true`, the client is a walk-in. Otherwise, this will be `false`.'
                k_id:
                  type: string
                  description: 'The item key. Depends on {@link PaymentApi::$id_purchase_item} property.'
                k_location:
                  type: string
                  description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                text_coupon_code:
                  type: string
                  description: 'Gift card code.'
                text_discount_code:
                  type: string
                  description: 'The discount code to be applied to the purchase.'
                uid:
                  type: string
                  description: 'The user key. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_purchase_item:
                    type: string[]|null
                    description: 'The purchase item keys from the database. This will be `null` if not set yet.'
                  id_pay:
                    type: number
                    format: int32
                    description: 'The payment type for the appointment. A constant of {@link \RsAppointmentPaySid}.'
                  k_location:
                    type: string
                    description: 'Location to show available appointment booking schedule. Primary key in {@link \RsLocationSql} table.'
                  k_login_activity_purchase:
                    type: string
                    description: 'The key of activity of the purchase made. Empty if no purchase has been made.'
                  k_login_prize:
                    type: string
                    description: 'Login prize key. In case when appointment paid by reward prize, there is the key of redeemed login prize. Empty otherwise.'
      tags:
        - Payment-PaymentPost
  '/Wl/Appointment/Book/Product/Product62.json':
    get:
      summary: 'Retrieves list of available service add-ons.'
      parameters:
        - name: k_location
          in: query
          description: 'The key of a location where appointment is going to be booked.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The key of a service to show information for.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of a user to show information for. Products with a {@link PurchaseRestrictionSid::TYPE} restriction will be filtered out. Only those products that match the client type or those that have no restrictions will be shown. `null` if the client is not logged in. If you don''t need to filter products by client type/group, use {@link ProductApi}.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_product:
                    type: array[]
                    description: 'A list service add-ons. This will be `null` if not set yet.'
      tags:
        - Product-Product62
  '/Wl/Appointment/Book/Product/Product.json':
    get:
      summary: 'Retrieves list of available service add-ons.'
      parameters:
        - name: k_service
          in: query
          description: 'The key of a service to show information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_product:
                    type: array[]
                    description: 'A list service add-ons. This will be `null` if not set yet.'
      tags:
        - Product-Product
  '/Wl/Appointment/Book/Question/Question.json':
    get:
      summary: 'Retrieves questions for the current service.'
      parameters:
        - name: k_service
          in: query
          description: 'The service key used for retrieving questions.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_question:
                    type: array
                    description: 'A list of questions for the service.'
      tags:
        - Question-Question
  '/Wl/Book/Process/Info/Info.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_day_available:
                    type: int[]|null
                    description: 'Week days available for recurring booking. Constants of {@link \ADateWeekSid} class. `null` if recurring booking is not available.'
                  a_session_all:
                    type: array[]
                    description: 'A list of all class sessions that can be booked together. Every element has the next structure: <dl> <dt> string[] <var>a_staff</var> </dt> <dd> List of staff names that are leading this session. </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> List of virtual locations. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time when session starts in MySQL format and in GMT. </dd> <dt> boolean <var>is_select</var> </dt> <dd> <tt>true</tt> if this session should be selected when page is initialized; <tt>false</tt> if otherwise. </dd> <dt> bool <var>is_wait</var> </dt> <dd> `true` if client is added to a wait list, `false` - to an active list. </dd> <dt> bool <var>is_wait_list_unpaid</var> </dt> <dd> Allow clients to join the wait list unpaid. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The key of the session. Primary keys in {@link \RsClassPeriodSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> Location key. Primary key in {@link \RsLocationSql} table. </dd> <dt> bool <var>m_price</var> </dt> <dd> Price of the session. </dd> <dt> string <var>s_location</var> </dt> <dd> The name of the location where the session occurred. </dd> <dt> string <var>s_start</var> </dt> <dd> The date/time when the session starts in human-readable format. Returned in the time zone of the location. </dd> <dt> string <var>text_duration</var> </dt> <dd> String representation of session duration. Duration formatting method {@link InfoApi::_classDurationFormat()}. </dd> </dl>'
                  a_session_free:
                    type: array[]
                    description: 'List of sessions that can be paid without new purchases. Such as previously prepaid or free sessions. A result of the {@link \RsBookProcess::sessionFreeGet()} method execution. Each its item has the key of following format: <dl> <dt>string <var>dt_date</var>::<var>k_class_period</var></dt><dd>Composite key of the array.</dd> </dl> and the value of following structure: <dl> <dt>string <var>dt_date</var></dt><dd>Session date.</dd> <dt>string <var>k_class_period</var></dt><dd>Class period key for the session.</dd> </dl>'
                  a_staff:
                    type: array[]
                    description: 'The staff member conducting the session. Every element has the next structure: <dl> <dt> array <var>a_logo</var> </dt> <dd> The staff member photo: <dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>string <var>s_url</var></dt> <dd>The image URL.</dd> </dl> </dd> <dt>string <var>s_family</var></dt> <dd>The first letter of staff member surname.</dd> <dt>string <var>s_staff</var></dt> <dd>The staff member''s name.</dd> <dt>string <var>uid</var></dt> <dd>UID of the staff member. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
                  dl_end:
                    type: string
                    description: 'Date when this class session occurrences stop.'
                  dt_date_local:
                    type: string
                    description: 'The date/time of the session the user is booking in MySQL format in the location''s timezone.'
                  hide_price:
                    type: boolean
                    description: '`true` if price for the individual session should be hidden, if client has applicable pricing option to pay for this booking. `false` if price should be shown always.'
                  html_contract:
                    type: string
                    description: 'The text of the contract to which the user must agree before book this session. Not empty if business has contract and if user did not agree to this contract.'
                  html_duration:
                    type: string
                    description: 'Class duration in human-readable format.'
                  html_special:
                    type: string
                    description: 'The special instructions for the class.'
                  html_special_preview:
                    type: string
                    description: 'Special instructions preview for class.'
                  i_available:
                    type: int|null
                    description: 'Number of available spots. `null` if this information is not available.'
                  i_book:
                    type: int|null
                    description: 'Number of booked spots. `null` if this information is not available.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The duration of the session in minutes.'
                  i_wait_spot:
                    type: number
                    format: int32
                    description: 'Estimated place of reservation on the waiting list.'
                  is_book_repeat_client:
                    type: boolean
                    description: '`true` if recurring booking is available, `false` otherwise.'
                  is_book_repeat_no_end_date:
                    type: boolean
                    description: '`true` if the setting for frequency during class recurring booking will be `never end` by default, `false` otherwise.'
                  is_event_session:
                    type: boolean
                    description: 'Can client chooses several session per booking.'
                  is_promotion_only:
                    type: boolean
                    description: '`true` if event can be paid with pricing option only. `false` if full event purchase or single session purchase are allowed. Copy of {@link \RsClassSql}.`is_promotion_only`.'
                  is_single_buy:
                    type: boolean
                    description: 'Whether the class can be paid with single session.'
                  is_special_preview:
                    type: boolean
                    description: 'Whether the full text of the special instructions fits within the preview length or not.'
                  is_virtual:
                    type: boolean
                    description: '`true` if class is virtual, `false` otherwise.'
                  k_location:
                    type: string
                    description: 'Class period location key.'
                  m_price:
                    type: string
                    description: 'Price of the session.'
                  m_price_total:
                    type: string
                    description: 'Whole event cost.'
                  m_price_total_early:
                    type: string
                    description: 'Event price at an early discount. An empty string if there is no discount.'
                  s_class:
                    type: string
                    description: 'The class title.'
                  s_location_address:
                    type: string
                    description: 'The location address.'
                  s_location_title:
                    type: string
                    description: 'The location title.'
                  s_time:
                    type: string
                    description: 'The time when the session takes place in the location''s time zone. In format `hh:mm`.'
                  text_room:
                    type: string
                    description: 'Room where session takes place.'
                  text_staff:
                    type: string
                    description: 'Text representation of the list of staffs. List of staff see {@link InfoApi::$a_staff}.'
                  text_timezone:
                    type: string
                    description: 'Timezone abbreviation.'
      tags:
        - Info-Info
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource:
                  type: array[]
                  description: 'A list of assets being booked. Every element has the next structure: <dl> <dt>int <var>i_index</var></dt> <dd>Order number of the asset (maybe from 1 to asset quantity).</dd> <dt>string <var>k_resource</var></dt> <dd>The key of asset. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session_select:
                  type: array
                  description: 'The selected sessions. <b>Keys</b> - The class period keys. Primary keys in {@link \RsClassPeriodSql} table. <b>Values</b> - List of date/time when the session occurred in MySQL format and in GMT.'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'Selected sessions on the waiting list without pay. Keys - session IDs. Primary keys in table {@link \RsClassPeriodSql}. Values - index arrays of dates/time when session is occurred. In MySQL format. In GMT.'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_agree:
                  type: boolean
                  description: 'Determines if the user has agreed to the liability release. `true` - if  the user has agreed. Otherwise, this will be. `false` - if the user hasn''t agreed or the agreement isn''t required.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                s_signature:
                  type: string
                  description: 'User signature.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The keys of users'' activity.'
                  a_visit:
                    type: string[]
                    description: 'The keys of the bookings made.'
                  is_card_authorize:
                    type: boolean
                    description: 'If client must authorize credit card.'
                  is_force_book:
                    type: boolean
                    description: 'Can the class/event be booked immediately or not. The verification is based on the search for client''s promotions and other features of the class/event. But it does not take into account the presence of other mandatory steps. Their presence will be indicated by the {@link InfoApi::$is_next} flag.'
                  is_next:
                    type: boolean
                    description: '`true` - next steps of the wizard are needed (for example, to purchase something to book the selected session). `false` - no need for next steps (all that''s needed has already been purchased).'
      tags:
        - Info-Info
  '/Wl/Book/Process/Info/Info54.json':
    get:
      summary: ''
      parameters:
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_day_available:
                    type: int[]|null
                    description: 'Week days available for recurring booking. Constants of {@link \ADateWeekSid} class. `null` if recurring booking is not available.'
                  a_session_all:
                    type: array[]
                    description: 'A list of all class sessions that can be booked together. Every element has the next structure: <dl> <dt> string[] <var>a_staff</var> </dt> <dd> List of staff names that are leading this session. </dd> <dt> string[] <var>a_virtual_location</var> </dt> <dd> List of virtual locations. </dd> <dt> string <var>dt_date</var> </dt> <dd> The date/time when session starts in MySQL format and in GMT. </dd> <dt> boolean <var>is_select</var> </dt> <dd> <tt>true</tt> if this session should be selected when page is initialized; <tt>false</tt> if otherwise. </dd> <dt> bool <var>is_wait</var> </dt> <dd> `true` if client is added to a wait list, `false` - to an active list. </dd> <dt> bool <var>is_wait_list_unpaid</var> </dt> <dd> Allow clients to join the wait list unpaid. </dd> <dt> string <var>k_class_period</var> </dt> <dd> The key of the session. Primary keys in {@link \RsClassPeriodSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> Location key. Primary key in {@link \RsLocationSql} table. </dd> <dt> bool <var>m_price</var> </dt> <dd> Price of the session. </dd> <dt> string <var>s_location</var> </dt> <dd> The name of the location where the session occurred. </dd> <dt> string <var>s_start</var> </dt> <dd> The date/time when the session starts in human-readable format. Returned in the time zone of the location. </dd> <dt> string <var>text_duration</var> </dt> <dd> String representation of session duration. Duration formatting method {@link InfoApi::_classDurationFormat()}. </dd> </dl>'
                  a_session_free:
                    type: array[]
                    description: 'List of sessions that can be paid without new purchases. Such as previously prepaid or free sessions. A result of the {@link \RsBookProcess::sessionFreeGet()} method execution. Each its item has the key of following format: <dl> <dt>string <var>dt_date</var>::<var>k_class_period</var></dt><dd>Composite key of the array.</dd> </dl> and the value of following structure: <dl> <dt>string <var>dt_date</var></dt><dd>Session date.</dd> <dt>string <var>k_class_period</var></dt><dd>Class period key for the session.</dd> </dl>'
                  a_staff:
                    type: array[]
                    description: 'The staff member conducting the session. Every element has the next structure: <dl> <dt> array <var>a_logo</var> </dt> <dd> The staff member photo: <dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>string <var>s_url</var></dt> <dd>The image URL.</dd> </dl> </dd> <dt>string <var>s_family</var></dt> <dd>The first letter of staff member surname.</dd> <dt>string <var>s_staff</var></dt> <dd>The staff member''s name.</dd> <dt>string <var>uid</var></dt> <dd>UID of the staff member. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
                  dl_end:
                    type: string
                    description: 'Date when this class session occurrences stop.'
                  dt_date_local:
                    type: string
                    description: 'The date/time of the session the user is booking in MySQL format in the location''s timezone.'
                  hide_price:
                    type: boolean
                    description: '`true` if price for the individual session should be hidden, if client has applicable pricing option to pay for this booking. `false` if price should be shown always.'
                  html_contract:
                    type: string
                    description: 'The text of the contract to which the user must agree before book this session. Not empty if business has contract and if user did not agree to this contract.'
                  html_duration:
                    type: string
                    description: 'Class duration in human-readable format.'
                  html_special:
                    type: string
                    description: 'The special instructions for the class.'
                  html_special_preview:
                    type: string
                    description: 'Special instructions preview for class.'
                  i_available:
                    type: int|null
                    description: 'Number of available spots. `null` if this information is not available.'
                  i_book:
                    type: int|null
                    description: 'Number of booked spots. `null` if this information is not available.'
                  i_duration:
                    type: number
                    format: int32
                    description: 'The duration of the session in minutes.'
                  i_wait_spot:
                    type: number
                    format: int32
                    description: 'Estimated place of reservation on the waiting list.'
                  is_book_repeat_client:
                    type: boolean
                    description: '`true` if recurring booking is available, `false` otherwise.'
                  is_book_repeat_no_end_date:
                    type: boolean
                    description: '`true` if the setting for frequency during class recurring booking will be `never end` by default, `false` otherwise.'
                  is_event_session:
                    type: boolean
                    description: 'Can client chooses several session per booking.'
                  is_promotion_only:
                    type: boolean
                    description: '`true` if event can be paid with pricing option only. `false` if full event purchase or single session purchase are allowed. Copy of {@link \RsClassSql}.`is_promotion_only`.'
                  is_single_buy:
                    type: boolean
                    description: 'Whether the class can be paid with single session.'
                  is_special_preview:
                    type: boolean
                    description: 'Whether the full text of the special instructions fits within the preview length or not.'
                  is_virtual:
                    type: boolean
                    description: '`true` if class is virtual, `false` otherwise.'
                  k_location:
                    type: string
                    description: 'Class period location key.'
                  m_price:
                    type: string
                    description: 'Price of the session.'
                  m_price_total:
                    type: string
                    description: 'Whole event cost.'
                  m_price_total_early:
                    type: string
                    description: 'Event price at an early discount. An empty string if there is no discount.'
                  s_class:
                    type: string
                    description: 'The class title.'
                  s_location_address:
                    type: string
                    description: 'The location address.'
                  s_location_title:
                    type: string
                    description: 'The location title.'
                  s_time:
                    type: string
                    description: 'The time when the session takes place in the location''s time zone. In format `hh:mm`.'
                  text_room:
                    type: string
                    description: 'Room where session takes place.'
                  text_staff:
                    type: string
                    description: 'Text representation of the list of staffs. List of staff see {@link InfoApi::$a_staff}.'
                  text_timezone:
                    type: string
                    description: 'Timezone abbreviation.'
      tags:
        - Info-Info54
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource:
                  type: array[]
                  description: 'A list of assets being booked. Every element has the next structure: <dl> <dt>int <var>i_index</var></dt> <dd>Order number of the asset (maybe from 1 to asset quantity).</dd> <dt>string <var>k_resource</var></dt> <dd>The key of asset. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session_select:
                  type: array
                  description: 'The selected sessions. <b>Keys</b> - The class period keys. Primary keys in {@link \RsClassPeriodSql} table. <b>Values</b> - List of date/time when the session occurred in MySQL format and in GMT.'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'Selected sessions on the waiting list without pay. Keys - session IDs. Primary keys in table {@link \RsClassPeriodSql}. Values - index arrays of dates/time when session is occurred. In MySQL format. In GMT.'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_agree:
                  type: boolean
                  description: 'Determines if the user has agreed to the liability release. `true` - if  the user has agreed. Otherwise, this will be. `false` - if the user hasn''t agreed or the agreement isn''t required.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                s_signature:
                  type: string
                  description: 'User signature.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The keys of users'' activity.'
                  a_visit:
                    type: string[]
                    description: 'The keys of the bookings made.'
                  is_card_authorize:
                    type: boolean
                    description: 'If client must authorize credit card.'
                  is_force_book:
                    type: boolean
                    description: 'Can the class/event be booked immediately or not. The verification is based on the search for client''s promotions and other features of the class/event. But it does not take into account the presence of other mandatory steps. Their presence will be indicated by the {@link InfoApi::$is_next} flag.'
                  is_next:
                    type: boolean
                    description: '`true` - next steps of the wizard are needed (for example, to purchase something to book the selected session). `false` - no need for next steps (all that''s needed has already been purchased).'
      tags:
        - Info-Info54
  '/Wl/Book/Process/Info/InfoCanComplete.json':
    get:
      summary: 'Checks whether the user can complete booking wizard without additional steps. query string length limitation.'
      parameters:
        - name: a_session_select
          in: query
          description: 'A list of sessions of an event that can be booked together. This is the same as {@link InfoCanCompleteApi::$a_session_select_post}, but limited by query string length and might fail if the user is booking more than 50 sessions at once. Therefore, using the POST method is preferable.'
          schema:
            type: array[]
        - name: dt_date_gmt
          in: query
          description: 'The date and time of the session that the user is booking, returned in MySQL format and in GMT.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Key of the business in which the booking is performed.'
          schema:
            type: string|null
        - name: k_class_period
          in: query
          description: 'The class period ID that the user started to book.'
          schema:
            type: string
        - name: s_id
          in: query
          description: 'The unique booking process key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of a user who is making the booking. Empty if user is a guest.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_complete:
                    type: boolean
                    description: 'Determines whether users can complete the booking process from the info step.'
                  hide_price:
                    type: boolean
                    description: '`true` if price for the individual session should be hidden, if client has applicable pricing option to pay for this booking. `false` if price should be shown always.'
      tags:
        - Info-InfoCanComplete
    post:
      summary: 'Checks whether the user can complete booking wizard without additional steps.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_session_select_post:
                  type: array[]
                  description: 'A list of sessions of an event that can be booked together. Every element has the next structure: <dl> <dt>string <var>dt_date</var></dt> <dd>The date and time in MySQL format in GMT when the session starts.</dd> <dt>bool <var>is_select</var></dt> <dd>`true` if this session should be booked, `false` otherwise.</dd> <dt>string <var>k_class_period</var></dt> <dd>The class period key. Primary key in {@link \RsClassPeriodSql} table.</dd> </dl>'
                dt_date_gmt:
                  type: string
                  description: 'The date and time of the session that the user is booking, returned in MySQL format and in GMT.'
                k_business:
                  type: string|null
                  description: 'Key of the business in which the booking is performed.'
                k_class_period:
                  type: string
                  description: 'The class period ID that the user started to book.'
                s_id:
                  type: string
                  description: 'The unique booking process key.'
                uid:
                  type: string
                  description: 'The key of a user who is making the booking. Empty if user is a guest.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  can_complete:
                    type: boolean
                    description: 'Determines whether users can complete the booking process from the info step.'
      tags:
        - Info-InfoCanComplete
  '/Wl/Book/Process/Store/Store.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_purchase_item_check:
                  type: array
                  description: 'The selected purchase item. This new purchasable item should be checked to see if it can be applied to the current class or event before purchasing it. <dl> <dt>int <var>i_session</var></dt> <dd>The number of sessions that this item can cover.</dd> <dt>int <var>s_value</var></dt> <dd> Unique identifier of the element being checked. Corresponds to the values: <ul> <li>{@link Purchase56Api::$a_purchase}`["s_value"]`</li> <li>{@link Purchase56Api::$a_reward_prize}`["s_value"]`</li> <li>{@link Purchase56Api::$a_login_prize}`["s_value"]`</li> </ul> </dd> </dl>'
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource:
                  type: array[]
                  description: 'A list of assets being booked. Every element has the next keys: <dl> <dt>int <var>i_index</var></dt> <dd>The order number of the asset (from 1 to the asset quantity).</dd> <dt>string <var>k_resource</var></dt> <dd>The asset key. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session_select:
                  type: array
                  description: 'The selected sessions. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to the list of dates/times when the session occurred (returned in MySQL format and in GMT).'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to index arrays of dates/times when the session occurred (returned in MySQL format and in GMT).'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The user''s activity keys. This won''t be empty when the booking process is finished.'
                  a_visit:
                    type: string[]
                    description: 'The keys of bookings that have been made.'
                  is_next:
                    type: boolean
                    description: '`true` - the next steps of booking wizard are required to purchase something or to book the selected session. `false` - no further steps in the booking wizard are required.'
      tags:
        - Store-Store
  '/Wl/Book/Process/Relation/Relation.json':
    get:
      summary: 'Checks if user can book specified session.'
      parameters:
        - name: dtu_date
          in: query
          description: 'The date/time of the session to check for booking availability.'
          schema:
            type: string
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business where <var>uid_from</var> creates the new relative.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The key of the session to check for booking availability.'
          schema:
            type: string
        - name: uid_from
          in: query
          description: 'The user who''s adding the new relative.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Relation-Relation
    post:
      summary: 'Added new relative.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                i_day:
                  type: int|null
                  description: 'Day of birthday. `null` if birthday is not entered.'
                i_month:
                  type: int|null
                  description: 'Month of birthday. `null` if birthday is not entered.'
                i_year:
                  type: int|null
                  description: 'Year of birthday. `null` if birthday is not entered.'
                id_relation:
                  type: number
                  format: int32
                  description: 'The relation type. One of the {@link \RsFamilyRelationSid} constants.'
                is_mail_inherit:
                  type: boolean
                  description: '`true` - the new relative uses the email from <var>uid_from</var>. `false` - the new relative has their own email.'
                is_pay_self:
                  type: boolean
                  description: '`true` - the new relative pays for themself. `false` - <var>uid_from</var> pays for the new relative.'
                k_business:
                  type: string
                  description: 'The business where <var>uid_from</var> creates the new relative.'
                text_mail:
                  type: string
                  description: 'The new relative''s email.'
                text_name_first:
                  type: string
                  description: 'The new relative''s first name.'
                text_name_last:
                  type: string
                  description: 'The new relative''s last name.'
                uid_existed:
                  type: string
                  description: 'UID of already existed in another business user. Primary key in {@link \PassportLoginSql} table.'
                uid_from:
                  type: string
                  description: 'The user who''s adding the new relative.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid_create:
                    type: string
                    description: 'The newly added relative.'
      tags:
        - Relation-Relation
  '/Wl/Book/Process/Frequency/Repeat.json':
    get:
      summary: ''
      parameters:
        - name: a_day
          in: query
          description: 'List of days of the week to create visits. Each value is a {@link \ADateWeekSid} constant.'
          schema:
            type: int[]
        - name: a_visit_ignore
          in: query
          description: 'List of visits to be ignored. Each value is a string consisting of a class period key and a visit date and time in location''s timezone, concatenated by two colons. Empty array if no visits should be ignored. Example: [''70::2024-11-05 18:00:00''].'
          schema:
            type: string[]
        - name: dt_date
          in: query
          description: 'Date and time of the class, when recurring booking was called, in UTC timezone.'
          schema:
            type: string
        - name: dt_from
          in: query
          description: 'Date to start recurring booking. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::DATE}.'
          schema:
            type: string
        - name: dt_to
          in: query
          description: 'Date to finish recurring booking. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::DATE}.'
          schema:
            type: string
        - name: i_count
          in: query
          description: 'Count of the visits to be created. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::COUNT}.'
          schema:
            type: number
            format: int32
        - name: i_duration
          in: query
          description: 'Count of days\weeks\months between recurring bookings.'
          schema:
            type: number
            format: int32
        - name: id_duration
          in: query
          description: 'Recurring booking interval, one of {@link \ADurationSid} constants.'
          schema:
            type: number
            format: int32
        - name: id_mode
          in: query
          description: 'WellnessLiving mode, one of {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: id_repeat_end
          in: query
          description: 'Type of repeating, one of {@link \RsRepeatEndSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_cancel
          in: query
          description: '`true` when cancelling booking, `false` otherwise.'
          schema:
            type: boolean
        - name: is_new_user
          in: query
          description: '`true` if current user is not created yet, `false` otherwise.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Business key, primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'Class period key, primary key in {@link \RsClassPeriodSql} table.'
          schema:
            type: string
        - name: s_uid
          in: query
          description: 'Encoded list of user keys, who will attend visits.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'Key of user, who will attend visits.'
          schema:
            type: string
        - name: uid_actor
          in: query
          description: 'Key of user, who perform booking.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_visit:
                    type: array[]
                    description: 'List of visits to be created for the given settings:<dl> <dt>string <var>dt_date</var></dt> <dd>Visit date and time in UTC.</dd> <dt>string <var>dt_local</var></dt> <dd>Visit date and time in location''s time zone.</dd> <dt>string <var>html_short_name_list</var></dt> <dd>List of names of the staff who provide this class.</dd> <dt>string <var>html_timezone</var></dt> <dd>Location''s time zone abbreviation.</dd> <dt>string <var>is_disable</var></dt> <dd>Whether booking is not available for this day.</dd> <dt>string <var>is_free</var></dt> <dd>Whether booking is free for this day.</dd> <dt>string <var>is_ignore</var></dt> <dd>Whether visit is from ignore list.</dd> <dt>string <var>is_wait</var></dt> <dd>Whether booking can be only to wait list.</dd> <dt>string <var>k_class_period</var></dt> <dd>Key of class period, primary key in {@link \RsClassPeriodSql} table.</dd> <dt>string <var>s_alert</var></dt> <dd>Staff name if booking available, warning about wait list or disabled booking otherwise.</dd> <dt>string <var>s_date</var></dt> <dd>Visit date and time in location''s time zone in human readable format.</dd> </dl>'
                  dt_from:
                    type: string
                    description: 'Date to start recurring booking. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::DATE}.'
                  dt_to:
                    type: string
                    description: 'Date to finish recurring booking. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::DATE}.'
                  i_count:
                    type: number
                    format: int32
                    description: 'Count of the visits to be created. Not empty only when {@link RepeatApi::$id_repeat_end} == {@link \RsRepeatEndSid::COUNT}.'
                  text_date_from:
                    type: string
                    description: 'Start date of repeatable period in human-readable format.'
                  text_date_to:
                    type: string
                    description: 'End date of repeatable period in human-readable format.'
      tags:
        - Frequency-Repeat
  '/Wl/Book/Process/Payment/Payment.json':
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_item:
                  type: array[]
                  description: 'A list of items to be bought. Every element has the next keys: <dl> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of purchase item type. One of {@link \RsPurchaseItemSid} constants.</dd> <dt>boolean [<var>is_renew</var>]</dt> <dd>`true` if the item should be set to auto-renew; `false` otherwise. If not set yet, use the default option for this item.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the purchase item in the database.</dd> <dt>string <var>k_login_prize</var></dt> <dd>Key of user''s prize. Primary key in table {@link \RsLoginPrizeSql}. Not `0` only if user is paying book by prize.</dd> <dt>string <var>k_reward_prize</var></dt> <dd>Key of reward prize. Primary key in table {@link \RsRewardPrizeSql}. Not `0` only if user wants to redeem prize and use it to pay for visit.</dd> <dt>string [<var>s_signature</var>]</dt> <dd>The signature of the Purchase Option contract. This won''t be set if the Purchase Option doesn''t require a contract assignment.</dd> </dl>'
                a_pay_form:
                  type: array[]
                  description: 'A list of payment sources to pay with. Each element has next keys: <dl> <dt> array [<var>a_pay_card</var>] </dt> <dd> The payment card information: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> The payment address: <dl> <dt>boolean <var>is_new</var></dt> <dd>Set this value to <tt>1</tt> to add a new payment address or to <tt>0</tt> to use a saved payment address.</dd> <dt>string [<var>k_geo_country</var>]</dt> <dd>The key of the country used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_geo_region</var>]</dt> <dd>The key of the region for the payment address. Specify this to add a new address.</dd> <dt>string [<var>k_pay_address</var>]</dt> <dd>The key of the saved payment address. Specify this to use a saved address.</dd> <dt>string [<var>s_city</var>]</dt> <dd>The city used for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_name</var>]</dt> <dd>The card name. Specify this to add a new address.</dd> <dt>string [<var>s_phone</var>]</dt> <dd>The payment phone. Specify this to add a new address.</dd> <dt>string [<var>s_postal</var>]</dt> <dd>The postal code for the payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street1</var>]</dt> <dd>The payment address. Specify this to add a new address.</dd> <dt>string [<var>s_street2</var>]</dt> <dd>The optional payment address. Specify this to add a new address.</dd> </dl> </dd> <dt> int [<var>i_csc</var>] </dt> <dd> The credit card CSC. Specify this to add a new card. </dd> <dt> int [<var>i_month</var>] </dt> <dd> The credit card expiration month. Specify this to add a new card. </dd> <dt> int [<var>i_year</var>] </dt> <dd> The credit card expiration year. Specify this to add a new card. </dd> <dt> boolean <var>is_new</var> </dt> <dd> Specify <tt>1</tt> to add a new card, or <tt>0</tt> to use a saved card. </dd> <dt> string [<var>k_pay_bank</var>] </dt> <dd> The key of the credit card. Specify this to use saved card. </dd> <dt> string [<var>s_comment</var>] </dt> <dd> Optional comment(s). Specify this to add a new card. </dd> <dt> string [<var>s_number</var>] </dt> <dd> The card number. Specify this to add a new card. </dd> </dl> </dd> <dt> string <var>f_amount</var> </dt> <dd> The amount of money to withdraw with this payment source. </dd> <dt> boolean [<var>is_hide</var>] </dt> <dt> bool [<var>is_save</var>=true] </dt> <dd> Whether payment method should be saved to user''s account. </dd> <dd> Determines whether this payment method is hidden. </dd> <dt> boolean [<var>is_success</var>=<tt>false</tt>] </dt> <dd> Identifies whether this source was successfully charged. </dd> <dt> string [<var>m_surcharge</var>] </dt> <dd> The client-side calculated surcharge. </dd> <dt> string [<var>s_index</var>] </dt> <dd> The index of this form (optional). </dd> <dt> string <var>sid_pay_method</var> </dt> <dd> The payment method ID. </dd> </dl>'
                a_quiz_response:
                  type: array
                  description: 'List of quiz response keys. Key is quiz key from {@link \Core\Quiz\QuizSql} table. Value is response key from {@link \Core\Quiz\Response\ResponseSql} table. Or special value from {@link \Wl\Quiz\Response\QuizResponse::RESPONSE_SKIP} constant.'
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource:
                  type: array
                  description: 'A list of assets being booked. Every element has the next keys: <dl> <dt>int <var>i_index</var></dt> <dd>The number of asset(s). The actual number is returned for assets with a quantity greater than <tt>1</tt>.</dd> <dt>string <var>k_resource</var></dt> <dd>The key of the asset. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session:
                  type: array
                  description: 'A list of sessions being booked. <b>Keys</b> - The class period keys. Primary keys in {@link \RsClassPeriodSql} table. <b>Values</b> - List of date/time when the session occurred.'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'Selected sessions on the waiting list without pay. Keys - session IDs. Primary keys in table {@link \RsClassPeriodSql}. Values - index arrays of dates/time when session is occurred. In MySQL format. In GMT.'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_card_authorize:
                  type: boolean
                  description: 'If client must authorize credit card.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_pay_installment_template:
                  type: string|null
                  description: 'The installment template key. This property is optional and it will be `null` if an installment plan doesn''t exist for the purchased item. This will be `0` if an installment plan isn''t selected for the purchased item from the list of installment plans.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                text_discount_code:
                  type: string
                  description: 'The discount code to be applied to the purchase.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity_book:
                    type: string[]
                    description: 'Keys of the user''s activity which correspond to bookings made. Not empty when the booking process is finished.'
                  a_visit:
                    type: string[]
                    description: 'The keys of bookings made.'
                  k_login_activity_purchase:
                    type: string
                    description: 'The keys of the user''s activity corresponding to the purchase made. This won''t be empty when the booking process is finished.'
      tags:
        - Payment-Payment
  '/Wl/Book/Process/Purchase/Purchase.json':
    get:
      summary: ''
      parameters:
        - name: a_session
          in: query
          description: 'The list of sessions being booked. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to the List of dates/times when the session occurred.'
          schema:
            type: array
        - name: a_session_wait_list_unpaid
          in: query
          description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to the index arrays of dates/times when the session occurred (returned in MySQL format and GMT).'
          schema:
            type: array
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: i_image_height
          in: query
          description: 'The image height in pixels. Specify this value if you need image to be returned in specific size. The returned image will have the default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'The image width in pixels. Specify this value if you need image to be returned in specific size. The returned image will have the default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_card_authorize
          in: query
          description: 'Determines if the client must authorize the credit card.'
          schema:
            type: boolean
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key. `null` if business key was not passed.'
          schema:
            type: string|null
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_prize:
                    type: array
                    description: 'Data about the login prize which can be used to pay for service. <dl> <dt>string <var>f_price</var></dt> <dd>The price, always ''0''.</dd> <dt>int <var>i_count</var></dt> <dd>Login prize remaining quantity.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of sessions that can be booked with reward prize.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string <var>k_login_prize</var></dt> <dd>Key of login prize. Primary key in {@link \RsLoginPrizeSql}.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> <dt>string <var>text_title</var></dt> <dd>User friendly login prize description.</dd> </dl>'
                  a_login_promotion:
                    type: array[]
                    description: 'A list of the client`s login promotions that can be applied to a given service. Each element has the following fields: <dl> <dt>array <var>a_login_promotion_info</var></dt> <dd> Information about the Purchase Option with the following information: <dl> <dt>int <var>i_limit</var></dt> <dd>The number of visits the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes the Purchase Option can be used for.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of the remaining visits the Purchase Option has left.</dd> <dt>int|null <var>i_remain_duration</var></dt> <dd>The number of minutes left in the Purchase Option.</dd> </dl> </dd> <dt>string[] <var>a_visit_limit</var></dt> <dd>The list of calendar restrictions of the promotion (for example, 4 per week).</dd> <dt>array <var>a_restrict</var></dt> <dd>Data about the shortest restriction period: <dl> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the shortest restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the shortest restriction period.</dd> <dt>string <var>text_restriction</var></dt> <dd>The description of the shortest restriction period (for example "this week" or "for a 4 day period").</dd> </dl> </dd> <dt>array[] <var>a_restrict_data</var></dt> <dd>Data about all restriction periods given as an array, where each record has the following structure: <dl> <dt>int <var>i_book</var></dt> <dd>The number of future sessions paid using this Purchase Option.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the restriction period.</dd> <dt>int <var>i_use</var></dt> <dd>The Purchase Option''s usage count.</dd> <dt>int <var>i_visit_past</var></dt> <dd> The number of attended sessions before the last renewal. This will be `0` if there aren''t any sessions before the last renewal or the Purchase Option doesn''t auto-renew. </dd> <dt>string <var>text_restriction</var></dt> <dd>The description of restriction period (for example "this week" or "for a 4 day period").</dd> </dl> </dd> <dt>int <var>i_limit</var></dt> <dd>The number of visits the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes the Purchase Option can be used for.</dd> <dt>int <var>i_promotion_priority</var></dt> <dd>Priority of this promotion. Result of {@link PromotionPrioritySid::priorityGet()} method.</dd> <dt>int <var>id_program</var></dt> <dd>The program ID for Purchase Options. One of the {@link \RsProgramSid} constants.</dd> <dt>bool <var>is_convert</var></dt> <dd>If `true`, the promotion converts to another instance upon expiration. Otherwise, this will be `false`.</dd> <dt>bool <var>is_shared</var></dt> <dd>`true` if the promotion is shared with the client, `false` if the client is owner of the promotion.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The login promotion key. Primary key in {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>s_class_include</var></dt> <dd>The list of services provided by this Purchase Option.</dd> <dt>string <var>s_description</var></dt> <dd>The Purchase Option description.</dd> <dt>string <var>s_duration</var></dt> <dd>The Purchase Option duration.</dd> <dt>string [<var>s_promotion_convert</var>]</dt> <dd>This is only set if <var>is_convert</var> is `true`. The title to use for the new promotion instance upon auto-renewal.</dd> <dt>string <var>s_title</var></dt> <dd>The Purchase Option name.</dd> <dt>string <var>text_package_item</var></dt> <dd>If this promotion is a package, this field will contain a list of Purchase Options contained in the package.</dd> </dl>'
                  a_purchase:
                    type: array[]
                    description: 'A list of Purchase Options that are available for the session(s) being booked. Keys refer to unique string IDs, and values refer arrays with the next fields: <dl> <dt>array[] <var>a_installment_template</var>.</dt> <dd>A list of installment plans. Every element has the next keys:<dl> <dt>int <var>i_count</var></dt> <dd>The number of payments.</dd> <dt>int <var>id_duration</var></dt> <dd>The duration of a single period. One of the {@link \ADurationSid} constants.</dd> <dt>int <var>i_period</var></dt> <dd>The number of periods specified by <var>id_period</var> between individual payments.</dd> <dt>string <var>k_currency</var></dt> <dd>The payment currency key.</dd> <dt>string <var>k_pay_installment_template</var></dt> <dd>The key of the installment plan template. Primary key in {@link \Wl\Pay\Installment\Template\Sql} table.</dd> <dt>string <var>m_amount</var></dt> <dd>The amount of the installment plan.</dd> <dt>string <var>s_duration</var></dt> <dd>The title of the installment plan.</dd></dl></dd> <dt>array[] [<var>a_visit_limit</var>]</dt> <dd>This is only set for Purchase Options. A list of limits on booking by the Purchase Option. Every element has the next keys:<dl> <dt>string <var>s_title</var></dt> <dd>The limit description.</dd></dl></dd> <dt>string <var>f_price</var></dt> <dd>The price.</dd> <dt>string [<var>f_price_early</var>]</dt> <dd>The price for early bookings.</dd> <dt>string <var>html_payment_period</var></dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The measurement unit of <var>i_payment_period</var> in short form.</dd> <dt>string <var>html_description</var></dt> <dd>The description, ready to paste in a browser.</dd> <dt>int [<var>i_limit</var>]</dt> <dd>The limit of sessions that can be booked by Purchase Options.</dd> <dt>int [<var>i_payment_period</var>]</dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The duration of the regular payment interval.</dd> <dt>int [<var>i_session</var>]</dt> <dd>This is only set for purchases of single sessions. The number of sessions booked simultaneously.</dd> <dt>int [<var>id_program_category</var>]</dt> <dd>This is only set for promotions. The ID of the promotion program category. One of the {@link \RsProgramCategorySid} constants.</dd> <dt>int [<var>id_program_type</var>]</dt> <dd>This is only set for promotions. The ID of the promotion program type. One of the {@link \RsProgramTypeSid} constants.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>bool [<var>is_contract</var>]</dt> <dd>If `true`, the Purchase Option requires a contract assignment. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_convert</var>]</dt> <dd>If `true`, the Purchase Option converts to another instance upon expiration. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_renew</var>]</dt> <dd>If `true`, the Purchase Option is renewable. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_renew_check</var>]</dt> <dd>If `true`, the Purchase Option is renewable and the "auto-renew" option is turned on by default. Otherwise, this will be `false`.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string [<var>k_login_prize</var>]</dt> <dd>The key of the user''s prize that can be used instead a Purchase Option to book the session.</dd> <dt>string [<var>k_reward_prize</var>]</dt> <dd>The key of the reward prize that can be used instead a Purchase Option to book the session.</dd> <dt>string [`m_prorate`]</dt> <dd>Payment for membership prorate. Not empty only if prorate payment is required.</dd> <dt>string [<var>s_contract</var>]</dt> <dd>The contract of the Purchase Option. This is only set if <var>is_contract</var> is `true`.</dd> <dt>string [<var>s_payment_duration</var>]</dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The measurement unit of <var>i_payment_period</var>.</dd> <dt>string [<var>s_promotion_convert</var>]</dt> <dd>This is only set if <var>is_convert</var> is `true`. The title to use for the new Purchase Option instance upon auto-renewal.</dd> <dt>string <var>s_title</var></dt> <dd>The title.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> </dl>'
                  a_reward_prize:
                    type: array[]
                    description: 'List of redeemable prizes which can be used to pay for service. Each element has the following fields: <dl> <dt>string <var>f_price</var></dt> <dd>The price, always ''0''.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of sessions that can be booked with reward prize.</dd> <dt>int <var>i_score</var></dt><dd>Prize price in points.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string <var>k_reward_prize</var></dt> <dd>Key of redeemable prize. Primary key in {@link \RsRewardPrizeSql}.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> <dt>string <var>text_title</var></dt> <dd>User friendly prize description.</dd> </dl>'
                  a_session_pass:
                    type: array[]
                    description: 'The list of session passes that might be used in booking process. Each element has the following fields: <dl> <dt>int <var>i_remain</var></dt> <dd>Number of remaining visits on session pass.</dd> <dt>string <var>k_session_pass</var></dt> <dd>Session pass key. Primary key in {@link Pass\Sql} table.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>Type of the session pass purchase. One of {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>s_title</var></dt> <dd>Session pass title.</dd> </dl>'
                  is_single_default:
                    type: boolean
                    description: 'Indicates if the drop-in rate should be the default promotion.'
                  k_promotion_default:
                    type: string
                    description: 'The default Purchase Option key. Primary key in {@link \RsPromotionSql} table. This will be empty if the class has no default Purchase Option.'
      tags:
        - Purchase-Purchase
  '/Wl/Book/Process/Purchase/PurchaseElement.json':
    get:
      summary: ''
      parameters:
        - name: dtu_date
          in: query
          description: 'Date/time of session is booking. `null` until initialized.'
          schema:
            type: string|null
        - name: i_session
          in: query
          description: 'The number of sessions which are booked simultaneously.'
          schema:
            type: number
            format: int32
        - name: id_purchase_item
          in: query
          description: 'The ID of the purchase item type. One of {@link \RsPurchaseItemSid}.'
          schema:
            type: number
            format: int32
        - name: k_id
          in: query
          description: 'The key of the purchase item in the database.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location in which the purchase is made. This is also the booking process location.'
          schema:
            type: string
        - name: k_login_prize
          in: query
          description: 'The key of the user''s prize. Not empty only if the user wants to make a free visit from the prize.'
          schema:
            type: string
        - name: k_pay_installment_template
          in: query
          description: 'Installment template key. Primary key in {@link \Wl\Pay\Installment\Template\Sql} table. This property is optional. * can only be set for the purchase option which supports installment plan, see {@link PurchaseItemAbstract::INSTALLMENT_ALLOW_USER} property; * `null` if installment plan doesn''t exist for bought item; * `0` if installment plan doesn''t selected for bought item from the list of installment plans. NOTE: * Calculations of discounts and taxes for installment plans are for demonstration purposes only! * Installment is not an independent purchase item and has no discounts or taxes. * Installment is a division of the final amount (with taxes and discounts), of some purchase option, into N parts.'
          schema:
            type: string|null
        - name: k_reward_prize
          in: query
          description: 'The key of the reward prize. Not empty only if the user wants to redeem prize and use it to pay for a visit.'
          schema:
            type: string
        - name: text_discount_code
          in: query
          description: 'The discount code.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the current user.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_tax:
                    type: array
                    description: 'A list of taxes for one purchase item. Keys - tax keys. Primary key in {@link \RsTaxSql} table. Values - tax amount.'
                  m_cost:
                    type: string
                    description: 'The cost of one purchase item (with taxes).'
                  m_discount:
                    type: string
                    description: 'The amount of the whole discount of one purchase item.'
                  m_discount_code:
                    type: string
                    description: 'Amount of discount for discount code of 1 purchase item.'
                  m_discount_login:
                    type: string
                    description: 'The discount amount for the client type of one purchase item.'
                  m_price:
                    type: string
                    description: 'The price of the purchase item (with or without taxes, depending on regional standards).'
                  m_subtotal:
                    type: string
                    description: 'Amount of subtotal for 1 purchase item.'
                  m_tax:
                    type: string
                    description: 'The amount of taxes for the one purchase item.'
      tags:
        - Purchase-PurchaseElement
  '/Wl/Book/Process/Purchase/PurchaseElementList.json':
    get:
      summary: ''
      parameters:
        - name: a_purchase_item_request
          in: query
          description: 'A list of purchase items to get information for. Every element has the next keys: <dl> <dt>int [<var>i_session</var>]</dt> <dd>The number of sessions booked simultaneously.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of the purchase item type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the purchase item in the database. The name of the table in the database depends on <var>id_purchase_item</var></dd> <dt>string [<var>k_login_prize</var>]</dt> <dd>The key of the user''s prize. Primary key in {@link \RsLoginPrizeSql} table.</dd> </dl>'
          schema:
            type: array[]
        - name: k_business
          in: query
          description: 'The key of the business in which the purchase is made.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The key of the location in which the purchase is made. This is also the booking process location. This will be `null` if not set yet or if the location can''t be defined for some reason.'
          schema:
            type: string|null
        - name: text_discount_code
          in: query
          description: 'The discount code.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user making the purchase.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_purchase_item_result:
                    type: array[]
                    description: 'Detailed information about the amounts for the purchase item list. Every element has the next keys: <dl> <dt> array <var>a_tax</var> </dt> <dd> Information about taxes. The key refers to the tax key, and the value refers to the tax amount. </dd> <dt> string <var>id_purchase_item</var></dt> <dd> The ID of purchase item type. </dd> <dt> string <var>k_id</var> </dt> <dd> The key of the purchase item in the database. </dd> <dt> string <var>m_cost</var></dt> <dd> The cost of the purchase item (with taxes). </dd> <dt> string <var>m_discount</var></dt> <dd> The amount of the whole discount. </dd> <dt> string <var>m_discount_login</var></dt> <dd> The amount of the discount for the client type. </dd> <dt> string <var>m_price</var></dt> <dd> The price of the purchase item (with or without taxes, depending on regional standards).</dd> <dt> string <var>m_tax</var></dt> <dd> The amount of taxes for the purchase item. </dd> </dl>'
      tags:
        - Purchase-PurchaseElementList
  '/Wl/Book/Process/Purchase/Purchase56.json':
    get:
      summary: ''
      parameters:
        - name: a_session
          in: query
          description: 'The list of sessions being booked. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to the List of dates/times when the session occurred.'
          schema:
            type: array
        - name: a_session_wait_list_unpaid
          in: query
          description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to the index arrays of dates/times when the session occurred (returned in MySQL format and GMT).'
          schema:
            type: array
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: i_image_height
          in: query
          description: 'The image height in pixels. Specify this value if you need image to be returned in specific size. The returned image will have the default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: i_image_width
          in: query
          description: 'The image width in pixels. Specify this value if you need image to be returned in specific size. The returned image will have the default thumbnail size if this value isn''t specified.'
          schema:
            type: number
            format: int32
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_card_authorize
          in: query
          description: 'Determines if the client must authorize the credit card.'
          schema:
            type: boolean
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: json_session
          in: query
          description: 'The selected sessions. This won''t be empty for session mode only. Fields refer to IDs of sessions in the database. Values refer to arrays of dates/times when session occurred, returned in MySQL format and in GMT. Serialized with JSON.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'The business key. `null` if business key was not passed.'
          schema:
            type: string|null
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_prize:
                    type: array
                    description: 'Data about the login prize which can be used to pay for service. <dl> <dt>string <var>f_price</var></dt> <dd>The price, always ''0''.</dd> <dt>int <var>i_count</var></dt> <dd>Login prize remaining quantity.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of sessions that can be booked with reward prize.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string <var>k_login_prize</var></dt> <dd>Key of login prize. Primary key in {@link \RsLoginPrizeSql}.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> <dt>string <var>text_title</var></dt> <dd>User friendly login prize description.</dd> </dl>'
                  a_login_promotion:
                    type: array[]
                    description: 'A list of the client`s login promotions that can be applied to a given service. Each element has the following fields: <dl> <dt>array <var>a_login_promotion_info</var></dt> <dd> Information about the Purchase Option with the following information: <dl> <dt>int <var>i_limit</var></dt> <dd>The number of visits the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes the Purchase Option can be used for.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of the remaining visits the Purchase Option has left.</dd> <dt>int|null <var>i_remain_duration</var></dt> <dd>The number of minutes left in the Purchase Option.</dd> </dl> </dd> <dt>string[] <var>a_visit_limit</var></dt> <dd>The list of calendar restrictions of the promotion (for example, 4 per week).</dd> <dt>array <var>a_restrict</var></dt> <dd>Data about the shortest restriction period: <dl> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the shortest restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the shortest restriction period.</dd> <dt>string <var>text_restriction</var></dt> <dd>The description of the shortest restriction period (for example "this week" or "for a 4 day period").</dd> </dl> </dd> <dt>array[] <var>a_restrict_data</var></dt> <dd>Data about all restriction periods given as an array, where each record has the following structure: <dl> <dt>int <var>i_book</var></dt> <dd>The number of future sessions paid using this Purchase Option.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of visits for the restriction period.</dd> <dt>int <var>i_remain</var></dt> <dd>The number of remaining visits for the restriction period.</dd> <dt>int <var>i_use</var></dt> <dd>The Purchase Option''s usage count.</dd> <dt>int <var>i_visit_past</var></dt> <dd> The number of attended sessions before the last renewal. This will be `0` if there aren''t any sessions before the last renewal or the Purchase Option doesn''t auto-renew. </dd> <dt>string <var>text_restriction</var></dt> <dd>The description of restriction period (for example "this week" or "for a 4 day period").</dd> </dl> </dd> <dt>int <var>i_limit</var></dt> <dd>The number of visits the Purchase Option allows the client to make.</dd> <dt>int|null <var>i_limit_duration</var></dt> <dd>The maximum number of minutes the Purchase Option can be used for.</dd> <dt>int <var>i_promotion_priority</var></dt> <dd>Priority of this promotion. Result of {@link PromotionPrioritySid::priorityGet()} method.</dd> <dt>int <var>id_program</var></dt> <dd>The program ID for Purchase Options. One of the {@link \RsProgramSid} constants.</dd> <dt>bool <var>is_convert</var></dt> <dd>If `true`, the promotion converts to another instance upon expiration. Otherwise, this will be `false`.</dd> <dt>bool <var>is_shared</var></dt> <dd>`true` if the promotion is shared with the client, `false` if the client is owner of the promotion.</dd> <dt>string <var>k_login_promotion</var></dt> <dd>The login promotion key. Primary key in {@link \RsLoginPromotionSql} table.</dd> <dt>string <var>s_class_include</var></dt> <dd>The list of services provided by this Purchase Option.</dd> <dt>string <var>s_description</var></dt> <dd>The Purchase Option description.</dd> <dt>string <var>s_duration</var></dt> <dd>The Purchase Option duration.</dd> <dt>string [<var>s_promotion_convert</var>]</dt> <dd>This is only set if <var>is_convert</var> is `true`. The title to use for the new promotion instance upon auto-renewal.</dd> <dt>string <var>s_title</var></dt> <dd>The Purchase Option name.</dd> <dt>string <var>text_package_item</var></dt> <dd>If this promotion is a package, this field will contain a list of Purchase Options contained in the package.</dd> </dl>'
                  a_purchase:
                    type: array[]
                    description: 'A list of Purchase Options that are available for the session(s) being booked. Keys refer to unique string IDs, and values refer arrays with the next fields: <dl> <dt>array[] <var>a_installment_template</var>.</dt> <dd>A list of installment plans. Every element has the next keys:<dl> <dt>int <var>i_count</var></dt> <dd>The number of payments.</dd> <dt>int <var>id_duration</var></dt> <dd>The duration of a single period. One of the {@link \ADurationSid} constants.</dd> <dt>int <var>i_period</var></dt> <dd>The number of periods specified by <var>id_period</var> between individual payments.</dd> <dt>string <var>k_currency</var></dt> <dd>The payment currency key.</dd> <dt>string <var>k_pay_installment_template</var></dt> <dd>The key of the installment plan template. Primary key in {@link \Wl\Pay\Installment\Template\Sql} table.</dd> <dt>string <var>m_amount</var></dt> <dd>The amount of the installment plan.</dd> <dt>string <var>s_duration</var></dt> <dd>The title of the installment plan.</dd></dl></dd> <dt>array[] [<var>a_visit_limit</var>]</dt> <dd>This is only set for Purchase Options. A list of limits on booking by the Purchase Option. Every element has the next keys:<dl> <dt>string <var>s_title</var></dt> <dd>The limit description.</dd></dl></dd> <dt>string <var>f_price</var></dt> <dd>The price.</dd> <dt>string [<var>f_price_early</var>]</dt> <dd>The price for early bookings.</dd> <dt>string <var>html_payment_period</var></dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The measurement unit of <var>i_payment_period</var> in short form.</dd> <dt>string <var>html_description</var></dt> <dd>The description, ready to paste in a browser.</dd> <dt>int [<var>i_limit</var>]</dt> <dd>The limit of sessions that can be booked by Purchase Options.</dd> <dt>int [<var>i_payment_period</var>]</dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The duration of the regular payment interval.</dd> <dt>int [<var>i_session</var>]</dt> <dd>This is only set for purchases of single sessions. The number of sessions booked simultaneously.</dd> <dt>int [<var>id_program_category</var>]</dt> <dd>This is only set for promotions. The ID of the promotion program category. One of the {@link \RsProgramCategorySid} constants.</dd> <dt>int [<var>id_program_type</var>]</dt> <dd>This is only set for promotions. The ID of the promotion program type. One of the {@link \RsProgramTypeSid} constants.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>bool [<var>is_contract</var>]</dt> <dd>If `true`, the Purchase Option requires a contract assignment. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_convert</var>]</dt> <dd>If `true`, the Purchase Option converts to another instance upon expiration. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_renew</var>]</dt> <dd>If `true`, the Purchase Option is renewable. Otherwise, this will be `false`.</dd> <dt>bool [<var>is_renew_check</var>]</dt> <dd>If `true`, the Purchase Option is renewable and the "auto-renew" option is turned on by default. Otherwise, this will be `false`.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string [<var>k_login_prize</var>]</dt> <dd>The key of the user''s prize that can be used instead a Purchase Option to book the session.</dd> <dt>string [<var>k_reward_prize</var>]</dt> <dd>The key of the reward prize that can be used instead a Purchase Option to book the session.</dd> <dt>string [`m_prorate`]</dt> <dd>Payment for membership prorate. Not empty only if prorate payment is required.</dd> <dt>string [<var>s_contract</var>]</dt> <dd>The contract of the Purchase Option. This is only set if <var>is_contract</var> is `true`.</dd> <dt>string [<var>s_payment_duration</var>]</dt> <dd>This is only set for Purchase Options with the ''membership'' program type. The measurement unit of <var>i_payment_period</var>.</dd> <dt>string [<var>s_promotion_convert</var>]</dt> <dd>This is only set if <var>is_convert</var> is `true`. The title to use for the new Purchase Option instance upon auto-renewal.</dd> <dt>string <var>s_title</var></dt> <dd>The title.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> </dl>'
                  a_reward_prize:
                    type: array[]
                    description: 'List of redeemable prizes which can be used to pay for service. Each element has the following fields: <dl> <dt>string <var>f_price</var></dt> <dd>The price, always ''0''.</dd> <dt>int <var>i_limit</var></dt> <dd>The limit of sessions that can be booked with reward prize.</dd> <dt>int <var>i_score</var></dt><dd>Prize price in points.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of Purchase Option type. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The key of the Purchase Option in the database. The table depends on <var>id_purchase_item</var>.</dd> <dt>string <var>k_reward_prize</var></dt> <dd>Key of redeemable prize. Primary key in {@link \RsRewardPrizeSql}.</dd> <dt>string <var>s_value</var></dt> <dd>The unique identifier.</dd> <dt>string <var>text_title</var></dt> <dd>User friendly prize description.</dd> </dl>'
                  a_session_pass:
                    type: array[]
                    description: 'The list of session passes that might be used in booking process. Each element has the following fields: <dl> <dt>int <var>i_remain</var></dt> <dd>Number of remaining visits on session pass.</dd> <dt>string <var>k_session_pass</var></dt> <dd>Session pass key. Primary key in {@link Pass\Sql} table.</dd> <dt>int <var>id_purchase_item</var></dt> <dd>Type of the session pass purchase. One of {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>s_title</var></dt> <dd>Session pass title.</dd> </dl>'
                  is_single_default:
                    type: boolean
                    description: 'Indicates if the drop-in rate should be the default promotion.'
                  k_promotion_default:
                    type: string
                    description: 'The default Purchase Option key. Primary key in {@link \RsPromotionSql} table. This will be empty if the class has no default Purchase Option.'
      tags:
        - Purchase-Purchase56
  '/Wl/Book/Process/Quiz/Quiz.json':
    get:
      summary: 'Defines list of required quizzes.'
      parameters:
        - name: a_purchase_item
          in: query
          description: 'The list of purchase items. Each element has the format <tt>[id_purchase_item]::[k_id]</tt>, where: <dl> <dt>int <var>id_purchase_item</var></dt> <dd>The ID of the purchase item. One of the {@link \RsPurchaseItemSid} constants.</dd> <dt>string <var>k_id</var></dt> <dd>The item key. This depends on <var>id_purchase_item</var> of this array.</dd> </dl> This will be empty if no purchases are made for the booking.'
          schema:
            type: string[]
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_quiz:
                    type: array[]
                    description: 'The list of quizzes. Each element has the next structure:<dl> <dt>bool <var>is_require</var></dt> <dd>Determines whether the quiz is required.</dd> <dt>string <var>k_quiz</var></dt> <dd>The quiz key. Primary key from {@link \Core\Quiz\QuizSql} table.</dd> </dl>'
      tags:
        - Quiz-Quiz
    post:
      summary: 'Finished booking process and save quiz responses (if quiz step is the last in booking wizard).'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_quiz_response:
                  type: array
                  description: 'The list of quiz response keys. Keys refer to quiz keys. Primary key from {@link \Core\Quiz\QuizSql} table. And values refer to response keys. Primary key from {@link \Core\Quiz\Response\ResponseSql} table. Or special values from the {@link \Wl\Quiz\Response\QuizResponse::RESPONSE_SKIP} constant.'
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource:
                  type: array[]
                  description: 'The selected assets. Every element has the next keys: <dl> <dt>int <var>i_index</var></dt> <dd>The order number of the asset (could be from 1 to the asset quantity).</dd> <dt>string <var>k_resource</var></dt> <dd>The asset key. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session_select:
                  type: array
                  description: 'The selected sessions. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to the list of dates/times when the session occurred.'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to index arrays of dates/times when session occurred (n MySQL format and in GMT).'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The user''s activity keys.'
                  a_visit:
                    type: string[]
                    description: 'The keys the bookings that have been made.'
                  is_next:
                    type: boolean
                    description: 'If `true`, the next steps of the booking wizard are required for the purchase or booking. Otherwise, this will be `false`.'
      tags:
        - Quiz-Quiz
  '/Wl/Book/Process/Resource/Resource.json':
    get:
      summary: ''
      parameters:
        - name: a_session
          in: query
          description: 'The selected sessions. Not empty only for session mode. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to a list of the dates/times when the session occurred (returned in MySQL format and in GMT).'
          schema:
            type: array
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_resource_all:
                    type: array[]
                    description: 'A list of asset categories which are available for specified session. Every element has next keys: <dl> <dt> array <var>a_client</var> </dt> <dd> A list of clients who have already occupied assets for this session. 1st level keys - asset keys; 2nd level keys - asset number. For example, if you want to check if 10th asset with key ''125'' is free, you have to check if <tt>a_client[''125''][''10'']</tt> is empty. </dd> <dt> array[] <var>a_resource_list</var> </dt> <dd> A list of available assets. Every element has next keys: <dl> <dt> array <var>a_image</var> </dt> <dd> Asset image data. See {@link \RsResourceImage::data()} for details. </dd> <dt> int <var>i_index</var> </dt> <dd> The asset number. Actual for assets with a quantity more than <tt>1</tt>. </dd> <dt> bool <var>is_current</var> </dt> <dd> <tt>true</tt> means that this asset is selected by client, <tt>false</tt> - otherwise. </dd> <dt> string <var>k_resource</var> </dt> <dd> The key of the asset in database. Primary key {@link \RsResourceSql} table. </dd> <dt> string <var>s_resource</var> </dt> <dd> The title of the asset. </dd> </dl> </dd> <dt> bool <var>has_current</var> </dt> <dd> <tt>true</tt> - has current resource in the list of available assets; <tt>false</tt> - otherwise. </dd> <dt> bool <var>is_client_select</var> </dt> <dd> <tt>true</tt> - the client selected the resource from the current group; <tt>false</tt> otherwise. </dd> <dt> bool <var>is_select</var> </dt> <dd> <tt>true</tt> - has selected resources; <tt>false</tt> - otherwise. </dd> <dt> bool <var>is_share</var> </dt> <dd> <tt>true</tt> resources in this category don''t belong to certain users, but to the entire session. <tt>false</tt> belong to specific users. </dd> <dt> string <var>k_resource_layout</var> </dt> <dd> The key of the asset layout. Primary key in {@link \Wl\Resource\Layout\Sql} table. </dd> <dt> string <var>k_resource_type</var> </dt> <dd> The key of the asset category. Primary key in {@link \RsResourceTypeSql} table. </dd> <dt> string <var>s_resource_type</var> </dt> <dd> The title of the asset category. </dd> </dl>'
      tags:
        - Resource-Resource
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource_select:
                  type: array
                  description: 'The selected assets. Every element has the next keys: <dl> <dt>int <var>i_index</var></dt> <dd>The asset number. Applies only for assets with a quantity greater than <tt>1</tt>.</dd> <dt>string <var>k_resource</var></dt> <dd>The asset key. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session:
                  type: array
                  description: 'The selected sessions. Not empty only for session mode. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to a list of the dates/times when the session occurred (returned in MySQL format and in GMT).'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to index arrays of dates/times when the session occurred (returned in MySQL format and in GMT).'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The keys of a user''s activity. This won''t be empty only if the session(s) was booked at this step.'
                  a_visit:
                    type: string[]
                    description: 'The keys of the bookings that have been made. Not empty only if session(s) was booked on this step.'
                  is_next:
                    type: boolean
                    description: '`true` - the next steps of the booking wizard are required (for example, to purchase something to book the selected session). `false` - no further booking steps are required.'
      tags:
        - Resource-Resource
  '/Wl/Book/Process/Resource/Resource54.json':
    get:
      summary: ''
      parameters:
        - name: a_session
          in: query
          description: 'The selected sessions. Not empty only for session mode. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to a list of the dates/times when the session occurred (returned in MySQL format and in GMT).'
          schema:
            type: array
        - name: dt_date_gmt
          in: query
          description: 'Date/time to which session is booked.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'The mode type. One of the {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_credit_card_check
          in: query
          description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
          schema:
            type: boolean
        - name: json_session
          in: query
          description: 'Selected sessions. Not empty only for session mode. Fields - IDs of sessions in database. Values - arrays of date/time when session is occurred. In MySQL format. In GMT. Serialized with JSON.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'Key of session which is booked.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_resource_all:
                    type: array[]
                    description: 'A list of asset categories which are available for specified session. Every element has next keys: <dl> <dt> array <var>a_client</var> </dt> <dd> A list of clients who have already occupied assets for this session. 1st level keys - asset keys; 2nd level keys - asset number. For example, if you want to check if 10th asset with key ''125'' is free, you have to check if <tt>a_client[''125''][''10'']</tt> is empty. </dd> <dt> array[] <var>a_resource_list</var> </dt> <dd> A list of available assets. Every element has next keys: <dl> <dt> array <var>a_image</var> </dt> <dd> Asset image data. See {@link \RsResourceImage::data()} for details. </dd> <dt> int <var>i_index</var> </dt> <dd> The asset number. Actual for assets with a quantity more than <tt>1</tt>. </dd> <dt> bool <var>is_current</var> </dt> <dd> <tt>true</tt> means that this asset is selected by client, <tt>false</tt> - otherwise. </dd> <dt> string <var>k_resource</var> </dt> <dd> The key of the asset in database. Primary key {@link \RsResourceSql} table. </dd> <dt> string <var>s_resource</var> </dt> <dd> The title of the asset. </dd> </dl> </dd> <dt> bool <var>has_current</var> </dt> <dd> <tt>true</tt> - has current resource in the list of available assets; <tt>false</tt> - otherwise. </dd> <dt> bool <var>is_client_select</var> </dt> <dd> <tt>true</tt> - the client selected the resource from the current group; <tt>false</tt> otherwise. </dd> <dt> bool <var>is_select</var> </dt> <dd> <tt>true</tt> - has selected resources; <tt>false</tt> - otherwise. </dd> <dt> bool <var>is_share</var> </dt> <dd> <tt>true</tt> resources in this category don''t belong to certain users, but to the entire session. <tt>false</tt> belong to specific users. </dd> <dt> string <var>k_resource_layout</var> </dt> <dd> The key of the asset layout. Primary key in {@link \Wl\Resource\Layout\Sql} table. </dd> <dt> string <var>k_resource_type</var> </dt> <dd> The key of the asset category. Primary key in {@link \RsResourceTypeSql} table. </dd> <dt> string <var>s_resource_type</var> </dt> <dd> The title of the asset category. </dd> </dl>'
      tags:
        - Resource-Resource54
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_repeat:
                  type: array|null
                  description: 'Information about the recurring booking: <dl> <dt>int[] <var>a_day</var></dt> <dd> The days of week when the appointment repeat.One of the {@link \ADateWeekSid} constants. Should be passed for any type of repetition. </dd> <dt>int[] <var>a_week</var></dt> <dd>Deprecated, use `a_day` instead!</dd> <dt>string [<var>dl_end</var>]</dt> <dd>Deprecated, use `dt_from` and `dt_to` instead!</dd> <dt> string [<var>dt_from</var>] </dt> <dd> Date to start recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> string [<var>dt_to</var>] </dt> <dd> Date to complete recurring booking. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::DATE}. </dd> <dt> int [<var>i_count</var>] </dt> <dd> The number of occurrences after which the appointment''s repeat cycle stops. Should be empty if the repeat cycle doesn''t stop after a certain number of occurrences. Expected for `id_repeat_end` = {@link \RsRepeatEndSid::COUNT}. </dd> <dt>int <var>i_duration</var></dt> <dd>Count of days\weeks\months between recurring bookings.</dd> <dt>int [<var>i_occurrence</var>]</dt> <dd>Deprecated, use `i_count` instead!</dd> <dt>int <var>i_period</var></dt> <dd>Deprecated, use `i_duration` instead!</dd> <dt> int <var>id_duration</var> </dt> <dd> The measurement unit of `i_period`. One of the {@link \ADurationSid} constants. Available duration units are: {@link \ADurationSid::DAY}, {@link \ADurationSid::WEEK}, {@link \ADurationSid::MONTH}. </dd> <dt>int <var>id_period</var></dt> <dd>Deprecated, use `id_duration` instead!</dd> <dt>int <var>id_repeat_end</var></dt> <dd>Possible ways to stop repeatable events. One of the {@link \RsRepeatEndSid} constants.</dd> </dl> This will be `null` if the booking isn''t recurring.'
                a_resource_select:
                  type: array
                  description: 'The selected assets. Every element has the next keys: <dl> <dt>int <var>i_index</var></dt> <dd>The asset number. Applies only for assets with a quantity greater than <tt>1</tt>.</dd> <dt>string <var>k_resource</var></dt> <dd>The asset key. Primary key in {@link \RsResourceSql} table.</dd> </dl>'
                a_session:
                  type: array
                  description: 'The selected sessions. Not empty only for session mode. Keys refer to class period keys. Primary keys in {@link \RsClassPeriodSql} table. And values refer to a list of the dates/times when the session occurred (returned in MySQL format and in GMT).'
                a_session_wait_list_unpaid:
                  type: array
                  description: 'The selected sessions on the wait list that are unpaid. Keys refer to session IDs. Primary keys in table {@link \RsClassPeriodSql}. And values refer to index arrays of dates/times when the session occurred (returned in MySQL format and in GMT).'
                can_book:
                  type: boolean
                  description: 'Determines whether the class/event can be booked at this step or not. This is an external process control flag.'
                dt_date_gmt:
                  type: string
                  description: 'Date/time to which session is booked.'
                id_mode:
                  type: number
                  format: int32
                  description: 'The mode type. One of the {@link ModeSid} constants.'
                is_credit_card_check:
                  type: boolean
                  description: 'Checking whether the client has a credit card (if configured in the business) will be skipped if this flag is set to `false`. Use this field with caution. The final booking will not use this flag and the check will still be performed.'
                is_force_pay_later:
                  type: boolean
                  description: '`true` if user pressed ''Pay later''. `false` if user pressed ''Pay now''.'
                json_session:
                  type: string
                  description: 'Selected sessions. Not empty only for session mode. Fields - IDs of sessions in database. Values - arrays of date/time when session is occurred. In MySQL format. In GMT. Serialized with JSON.'
                k_class_period:
                  type: string
                  description: 'Key of session which is booked.'
                k_login_promotion:
                  type: string
                  description: 'Login promotion to be used to book a class. Primary key from {@link \RsLoginPromotionSql}.'
                k_session_pass:
                  type: string
                  description: 'Session pass to be used to book a class. Primary key from {@link \Wl\Session\Pass\Sql}.'
                uid:
                  type: string
                  description: 'The client key for which the booking is being made. Primary key from {@link \PassportLoginSql}.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_activity:
                    type: string[]
                    description: 'The keys of a user''s activity. This won''t be empty only if the session(s) was booked at this step.'
                  a_visit:
                    type: string[]
                    description: 'The keys of the bookings that have been made. Not empty only if session(s) was booked on this step.'
                  is_next:
                    type: boolean
                    description: '`true` - the next steps of the booking wizard are required (for example, to purchase something to book the selected session). `false` - no further booking steps are required.'
      tags:
        - Resource-Resource54
  '/Wl/Business/Franchise/Location/BusinessFranchiseLocation.json':
    get:
      summary: 'Returns country, region, state, city and location lists of the franchisor.'
      parameters:
        - name: id_business_franchise_location
          in: query
          description: 'Determines which locations should be returned. One of the {@link BusinessFranchiseLocationSid} constants. If `null`, {@link BusinessFranchiseLocationSid::ALL} is used.'
          schema:
            type: number
            format: int32
        - name: id_report
          in: query
          description: 'Determines the report for which data should be returned. One of the {@link \RsReportSid} constants. If `null`, the report isn''t set.'
          schema:
            type: number
            format: int32
        - name: is_include_churn
          in: query
          description: 'Determines whether to include churned/removed locations. If `true`, all locations are listed (regardless of their status).'
          schema:
            type: boolean
        - name: is_include_non_api
          in: query
          description: 'Determines whether to include locations marked to not be displayed on franchisor website. If `true`, all locations are listed (regardless of this setting).'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_city_list:
                    type: array[]
                    description: 'The city list. Each element has next structure: <dl> <dt> string <var>k_city</var> </dt> <dd> City key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> City title. </dd> </dl>'
                  a_country_list:
                    type: array[]
                    description: 'The country list. Each element has next structure: <dl> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Country title. </dd> </dl>'
                  a_location_list:
                    type: array[]
                    description: 'The location list. Each element has the next structure: <dl> <dt> int <var>id_currency</var> </dt> <dd> Currency ID. One of {@link CurrencySid} constants. </dd> <dt> string <var>k_country</var> </dt> <dt> string <var>k_city</var> </dt> <dd> City key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_location</var> </dt> <dd> Location key. Primary key in the {@link \RsLocationSql} table. </dd> <dt> string <var>k_region</var> </dt> <dd> Franchise region key. Primary key in the {@link \Wl\Business\Franchise\Region\RegionSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Location title. </dd> </dl>'
                  a_region_list:
                    type: array[]
                    description: 'The region list. Each element has the next structure: <dl> <dt> string <var>k_region</var> </dt> <dd> Franchise region key. Primary key in the {@link \Wl\Business\Franchise\Region\RegionSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> Franchise region title. </dd> </dl>'
                  a_state_list:
                    type: array[]
                    description: 'The state list. Each element has the next structure: <dl> <dt> string <var>k_country</var> </dt> <dd> Country key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>k_state</var> </dt> <dd> State key. Primary key in the {@link \AGeoSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> State title. </dd> </dl>'
      tags:
        - Location-BusinessFranchiseLocation
  '/Wl/Business/AuthorizeSupport/Response/Response.json':
    get:
      summary: 'Grants or denies access to business location for staff member.'
      parameters:
        - name: is_grant
          in: query
          description: 'Determines whether the user will be granted access or if access will be revoked. If <tt>true</tt> - then grant access; If <tt>false</tt> - then revoke access. Revoking access is a scheduled task set to be run within the next 15 minutes.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'The key of the location to access.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user who will be granted access.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Response-Response
  '/Wl/Business/User/Subscribe/Subscribe.json':
    get:
      summary: 'Retrieves information about if user is subscribed on specified business or not.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key used for users to subscribe, unsubscribe, and receive information about the status of the subscription.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The key of the user whose subscription status needs to be checked or switched to subscribed/unsubscribed.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_subscribe:
                    type: bool|null
                    description: 'Information about the user`s subscription. When getting information, `true` indicates the user has an email subscription in the business (`false` otherwise). When changing a subscription, `true` subscribes the user in the business. `false` unsubscribes the user in the business. This will be `null` if not set yet.'
                  is_subscribe_sms:
                    type: bool|null
                    description: 'Information about the user`s subscription. When getting information, `true` indicates the user has an SMS subscription in the business (`false` otherwise). When changing a subscription, `true` subscribes the user in the business. `false1 unsubscribes the user in the business. This will be `null` if not set yet.'
      tags:
        - Subscribe-Subscribe
    put:
      summary: 'Subscribes or unsubscribes user on specified business.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key used for users to subscribe, unsubscribe, and receive information about the status of the subscription.'
                uid:
                  type: string
                  description: 'The key of the user whose subscription status needs to be checked or switched to subscribed/unsubscribed.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_subscribe:
                    type: bool|null
                    description: 'Information about the user`s subscription. When getting information, `true` indicates the user has an email subscription in the business (`false` otherwise). When changing a subscription, `true` subscribes the user in the business. `false` unsubscribes the user in the business. This will be `null` if not set yet.'
                  is_subscribe_sms:
                    type: bool|null
                    description: 'Information about the user`s subscription. When getting information, `true` indicates the user has an SMS subscription in the business (`false` otherwise). When changing a subscription, `true` subscribes the user in the business. `false1 unsubscribes the user in the business. This will be `null` if not set yet.'
      tags:
        - Subscribe-Subscribe
  '/Wl/Insurance/Enrollment/Field/EnrollmentFieldList.json':
    get:
      summary: 'Gets list of partner field for wellness program.'
      parameters:
        - name: k_business
          in: query
          description: 'The key of the business in which the enrollment is performed.'
          schema:
            type: string
        - name: k_wellness_program
          in: query
          description: '"Wellness Program" key. Primary key from {@link \Wl\Integration\Curves\WellnessProgramSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array
                    description: 'The partner field list. <dl> <dt>array <var>a_account</var></dt> <dd> The list of reimbursement account fields. If the program doesn''t require reimbursement, this list will be empty. The description of the list of fields is similar to the <var>a_field</var>. </dd> <dt>array <var>a_field</var></dt> <dd> The partner field info. <dl> <dt>array <var>a_config</var></dt> <dd> Additional information about the field. <dl> <dt>array <var>a_option</var></dt> <dd>A set of options for the dropdown list. The key is the title and the value is the value of the list item.</dd> <dt>string <var>text_type</var></dt> <dd>The type of text field.</dd> </dl> </dd> <dt>int <var>i_length</var></dt> <dd>The length of the field.</dd> <dt>bool <var>is_disable</var></dt> <dd>Determines whether this field is enabled.</dd> <dt>bool <var>is_required</var></dt> <dd>Determines whether this field is required.</dd> <dt>string <var>k_field</var></dt> <dd>The field key.</dd> <dt>string <var>s_regular</var></dt> <dd>The regular expression validation for the field.</dd> <dt>string <var>text_display_name</var></dt> <dd>The label text for the field.</dd> <dt>string <var>text_error_message</var></dt> <dd>The error message if the value in field isn''t valid.</dd> <dt>string <var>text_field_name</var></dt> <dd>The name of the field.</dd> </dl> </dd> </dl>'
      tags:
        - Field-EnrollmentFieldList
    post:
      summary: 'Validates list of fields that the user has filled in for enrollment.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_account:
                  type: array
                  description: 'Reimbursement account information. Keys - field name. Values - value entered by user. Validation is performed by {@link \Wl\Insurance\Enrollment\Field\EnrollmentFieldList::setAccountForm()} method.'
                a_field:
                  type: array
                  description: 'List of fields that the user has filled in for enrollment. Keys refer specifically to field keys. See {@link \Wl\Integration\Curves\PartnerFieldSql} table for more details. Values refer specifically to values entered by the user. Validation is performed by {@link \Wl\Insurance\Enrollment\Field\EnrollmentFieldList::setFieldForm()} method.'
                k_business:
                  type: string
                  description: 'The key of the business in which the enrollment is performed.'
                k_wellness_program:
                  type: string
                  description: '"Wellness Program" key. Primary key from {@link \Wl\Integration\Curves\WellnessProgramSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Field-EnrollmentFieldList
  '/Wl/Login/Attendance/Add/Add.json':
    get:
      summary: 'Gets information about ability of user to pay for given session in any ways.'
      parameters:
        - name: dt_date_global
          in: query
          description: 'The start date and time of the class in GMT and MySQL format.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Key of the business in which the request must be processed.'
          schema:
            type: string
        - name: k_class_period
          in: query
          description: 'The class period key.'
          schema:
            type: string
        - name: uid_client
          in: query
          description: 'The client user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_login_promotion:
                    type: array[]
                    description: 'Any of the client memberships that can be used to pay for the session. Every element is an array with the following keys: <dl> <dt> string <var>k_login_promotion</var> </dt> <dd> The login promotion key, available to pay for the session. Primary key in {@link \RsLoginPromotionSql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the login promotion. </dd> </dl>'
                  a_session_pass:
                    type: array[]
                    description: 'Any user''s session passes that can be used to pay for the session. Every element is an array with the following keys: <dl> <dt> string <var>k_session_pass</var> </dt> <dd> The session pass key, available to pay for the session. Primary key in {@link \Wl\Session\Pass\Sql} table. </dd> <dt> string <var>text_title</var> </dt> <dd> The title of the session pass. </dd> </dl>'
                  is_free:
                    type: boolean
                    description: 'If `true`, the session is free with no methods of payment. If `false`, the session can be paid for.'
                  k_login_promotion:
                    type: string
                    description: 'The key of the user''s promotion to be used for booking. If empty, use any suitable user''s promotion.'
                  k_session_pass:
                    type: string
                    description: 'The key of a session pass that can be used for a single session payment. If no such payment is available, `0` will be returned.'
                  m_price:
                    type: string|null
                    description: 'The price of the session, including any taxes and discounts. If `null`, the price of the session hasn''t been loaded yet.'
                  m_rest:
                    type: string|null
                    description: 'The user''s account balance if they were charged the {@link AddApi::$m_price} amount.'
      tags:
        - Add-Add
    post:
      summary: 'Adds client to attendance list.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_date_global:
                  type: string
                  description: 'The start date and time of the class in GMT and MySQL format.'
                id_add_option:
                  type: number
                  format: int32
                  description: 'Determines how the payment was handled for the session. One of the {@link AddOptionSid} constants.'
                id_mode:
                  type: number
                  format: int32
                  description: 'Determines how the session was booked. One of the {@link ModeSid} constants. We recommend using the `WEB_BACKEND` value.'
                is_event_single:
                  type: boolean
                  description: 'Defines whether only single session can be booked for block event. <tt>true</tt> Only current session of the block event will be booked in a case if staff event has appropriate setting to do this action. In this case this session will be considered as session out of event block. <tt>false</tt> all available event sessions will be booked. In this case session will be considered as part of event block.'
                k_business:
                  type: string
                  description: 'Key of the business in which the request must be processed.'
                k_class_period:
                  type: string
                  description: 'The class period key.'
                uid_client:
                  type: string
                  description: 'The client user key.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_visit:
                    type: number
                    format: int32
                    description: 'The status of the visit. One of the {@link VisitSid} constants.'
                  is_paid:
                    type: boolean
                    description: 'If `true`, the visit was automatically paid for in any available way during the booking. If `false`, the visit wasn''t automatically paid for.'
                  k_login_promotion:
                    type: string
                    description: 'The key of the user''s promotion to be used for booking. If empty, use any suitable user''s promotion.'
                  k_session_pass:
                    type: string
                    description: 'The key of a session pass that can be used for a single session payment. If no such payment is available, `0` will be returned.'
                  k_visit:
                    type: string
                    description: 'The key of the booked visit. This will be set on success. This value will be needed if the session still needs to be paid for.'
                  url_store:
                    type: string
                    description: 'The URL link to the store to allow for the payment of the visit. This link is for web only.'
      tags:
        - Add-Add
  '/Wl/Login/Promotion/Convert/Convert.json':
    delete:
      summary: 'Removes conversion and reset the after expiration setting to previous state.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key.'
                k_login_promotion:
                  type: string
                  description: 'The login promotion key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Convert-Convert
    get:
      summary: 'Returns list of promotions that can be used to pay for the service.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: k_login_promotion
          in: query
          description: 'The login promotion key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_promotion:
                    type: array[]
                    description: 'Promotion data containing the following structure:<dl> <dt>string <var>k_promotion</var></dt> <dd>The promotion key. Primary key in {@link \RsPromotionSql} table.</dd> <dt>string <var>text_title</var></dt> <dd>The title of the promotion.</dd> <dt>int <var>id_program</var></dt> <dd>One of {@link \RsProgramSid} constants.</dd> <dt>bool <var>is_select</var></dt> <dd>If <tt>true</tt>, the promotion is related to the service. Otherwise, this will be <tt>false</tt>.</dd> </dl>.'
                  dl_convert_max:
                    type: string
                    description: 'The last date on what conversion can be scheduled.'
                  dl_convert_min:
                    type: string
                    description: 'The first date on what conversion can be scheduled.'
                  dl_hold_end:
                    type: string
                    description: 'Local date, when hold ends, if PO is on hold right now. Empty if PO is not on hold, or hold is endless.'
                  dl_hold_start:
                    type: string
                    description: 'Local date, when hold starts, if PO is on hold right now. Empty if PO is not on hold.'
                  id_convert:
                    type: string
                    description: 'The conversion ID. One of the {@link PromotionConvertSid} constants.'
                  id_convert_when:
                    type: int|null
                    description: 'When conversion should be done. One of the {@link ConvertWhenSid} constants. `null` if it''s not set yet.'
                  is_edit:
                    type: boolean
                    description: 'Determines whether the conversion request is new or editing an existing conversion. If `true`, the conversion exists. Otherwise, this will be `false`.'
                  is_renew:
                    type: boolean
                    description: '`true` if PO is going to be renewed and not converted. `false` if PO is going to expire or to convert.'
                  s_date_convert:
                    type: string
                    description: 'The existing conversion date, returned as a string for the datepicker.'
                  s_date_now:
                    type: string
                    description: 'The current date, returned as a string.'
                  s_title:
                    type: string
                    description: 'The Purchase Option title.'
                  text_date_expire:
                    type: string
                    description: 'Expiration date in string user-friendly format.'
                  text_date_payment:
                    type: string
                    description: 'Next payment date in string user-friendly format.'
                  text_note:
                    type: string|null
                    description: 'The note for the promotion conversion.'
      tags:
        - Convert-Convert
    post:
      summary: 'Creates or updates conversion form data for the login promotion. Performs all necessary checks and apply changes.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dl_convert:
                  type: string
                  description: 'The conversion date, in the local time zone.'
                k_business:
                  type: string
                  description: 'The business key.'
                k_login_promotion:
                  type: string
                  description: 'The login promotion key.'
                k_promotion_to:
                  type: string
                  description: 'The promotion key the given promotion will be converted to.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_convert:
                    type: string
                    description: 'The conversion ID. One of the {@link PromotionConvertSid} constants.'
                  id_convert_when:
                    type: int|null
                    description: 'When conversion should be done. One of the {@link ConvertWhenSid} constants. `null` if it''s not set yet.'
                  text_note:
                    type: string|null
                    description: 'The note for the promotion conversion.'
      tags:
        - Convert-Convert
  '/Wl/Login/Search/StaffApp/List.json':
    get:
      summary: 'Performs access checks and returns a list of users, depending on the search query.'
      parameters:
        - name: is_franchisee_search_wide
          in: query
          description: '<tt>true</tt> - search among whole franchise; <tt>false</tt> - search in specified business only.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key number used internally by WellnessLiving.'
          schema:
            type: string
        - name: text_search
          in: query
          description: 'The search string. Clients can be matched by name or email.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_list:
                    type: array[]
                    description: 'A list of users matching the search string. The list depends on the search query. If the query is empty, recent users will be returned. Each element is an array with the following keys: <dl> <dt>string <var>text_mail</var></dt> <dd>Client''s email.</dd> <dt>string <var>text_name_first</var></dt> <dd>Client''s first name.</dd> <dt>string <var>text_name_last</var></dt> <dd>Client''s last name.</dd> <dt>string <var>text_phone</var></dt> <dd>Client''s phone.</dd> <dt>string <var>text_title</var></dt> <dd>The client name.</dd> <dt>string <var>uid</var></dt> <dd>The client key. Primary key in {@link \PassportLoginSql} table.</dd> </dl>'
                  can_add:
                    type: boolean
                    description: 'If `true`, then this user can add other users via the Add Client page.'
      tags:
        - StaffApp-List
  '/Wl/Member/Group/User/UserGroup.json':
    delete:
      summary: 'Deletes the user from the group.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string|null
                  description: 'Key of the business. Primary key from {@link \RsBusinessSql}.'
                k_member_group:
                  type: string|null
                  description: 'Member group key. Primary key from {@link \Wl\Member\Group\Sql} table.'
                uid_user:
                  type: string
                  description: 'UID of a user. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - User-UserGroup
    get:
      summary: 'Gets information about all groups to which the specified user belongs.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business. Primary key from {@link \RsBusinessSql}.'
          schema:
            type: string|null
        - name: uid_user
          in: query
          description: 'UID of a user. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_group_info:
                    type: string[]
                    description: 'All groups to which the specified user belongs. Primary keys from {@link \Wl\Member\Group\Sql} table.'
      tags:
        - User-UserGroup
    post:
      summary: 'Adds a user to a group.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string|null
                  description: 'Key of the business. Primary key from {@link \RsBusinessSql}.'
                k_member_group:
                  type: string|null
                  description: 'Member group key. Primary key from {@link \Wl\Member\Group\Sql} table.'
                uid_user:
                  type: string
                  description: 'UID of a user. Primary key in {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - User-UserGroup
  '/Wl/Member/Group/GroupList/List.json':
    delete:
      summary: 'Removes groups.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_member_group_delete:
                  type: array
                  description: 'List of groups to be deleted. Each element is a primary key in {@link \Wl\Member\Group\Sql}.'
                k_business:
                  type: string
                  description: 'The business key. Primary key in {@link \RsBusinessSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - GroupList-List
    get:
      summary: 'Returns all member groups list in the business if <var>$a_member_group_select</var> is empty, otherwise filters result according to <var>$a_member_group_select</var>. If <var>is_return_members</var> is `true` includes in the result list of members of each groups.'
      parameters:
        - name: a_member_group_select
          in: query
          description: 'List of groups for filtering groups of business. `null` in the case when need to return all groups of business.'
          schema:
            type: array|null
        - name: is_churn_risk
          in: query
          description: 'Whether include "Isaac Churn Risk" group.'
          schema:
            type: boolean
        - name: is_return_members
          in: query
          description: 'Whether include a list of members of groups.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'The business key. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_member_group:
                    type: array[]
                    description: 'Member groups list: <dl> <dt> string <var>k_member_group</var> </dt> <dd> The key of the member group. Primary key in {@link \Wl\Member\Group\Sql}. </dd> <dt> string <var>text_title</var> </dt> <dd> The name of the member group. </dd> </dl>'
      tags:
        - GroupList-List
    put:
      summary: 'Updates the order of groups in a list.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_member_group_order:
                  type: array
                  description: 'List of groups in the order in which they will be saved. Each element is a primary key in {@link \Wl\Member\Group\Sql}.'
                k_business:
                  type: string
                  description: 'The business key. Primary key in {@link \RsBusinessSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - GroupList-List
  '/Wl/Member/Progress/Log/Verify.json':
    put:
      summary: 'Verifies client''s progress log data.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_date:
                  type: string
                  description: 'Local date without time of the progress log.'
                k_business:
                  type: string
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
                uid:
                  type: string
                  description: 'User key. Primary key in the {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Log-Verify
  '/Wl/Member/Progress/Field/State.json':
    put:
      summary: 'Changes states of field.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                is_active:
                  type: bool|null
                  description: 'Whether field is active and should be displayed on page.'
                is_public:
                  type: bool|null
                  description: 'Whether this field is public. If this field is set to <tt>false</tt>, this field is not visible to clients.'
                is_require:
                  type: bool|null
                  description: 'Whether field value is required for clients.'
                is_require_staff:
                  type: bool|null
                  description: 'Whether field value is required for staffs.'
                k_business:
                  type: string
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
                k_field:
                  type: string
                  description: 'Field key. Primary key in the {@link \Wl\Member\Progress\Field\Sql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_field:
                    type: int|null
                    description: 'Field ID. One of the {@link ProgressFieldSid} constant.'
                  is_active:
                    type: bool|null
                    description: 'Whether field is active and should be displayed on page.'
                  is_public:
                    type: bool|null
                    description: 'Whether this field is public. If this field is set to <tt>false</tt>, this field is not visible to clients.'
                  is_require:
                    type: bool|null
                    description: 'Whether field value is required for clients.'
                  is_require_staff:
                    type: bool|null
                    description: 'Whether field value is required for staffs.'
                  text_title:
                    type: string|null
                    description: 'Field title.'
      tags:
        - Field-State
  '/Wl/Reception/Roster/Design/ReceptionRosterDesign.json':
    get:
      summary: 'Returns configuration for the Attendance Kiosk.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of the business.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_image:
                    type: array
                    description: 'Image data for image which will be displayed in attendance web app page. <dl> <dt>int <var>i_height</var></dt> <dd> Requested image height. </dd> <dt>int <var>i_height_src</var></dt> <dd> Original image height. </dd> <dt>int <var>i_width</var></dt> <dd> Requested image width. </dd> <dt>int <var>i_width_src</var></dt> <dd> Original image width. </dd> <dt>int <var>id_type_src</var></dt> <dd> Image type ID. One of {@link \Core\Drive\DriveTypeSid} constants. Will be present only for \Core\Drive\Drive images. </dd> <dt>bool <var>is-resize</var></dt> <dd> Whether image was resized to satisfy specified <var>i_width</var> and <var>i_height</var>. </dd> <dt>string <var>url-thumbnail</var></dt> <dd> Url to requested image. </dd> <dt>string <var>url-view</var></dt> <dd> Url to original image. </dd> </dl>'
                  hide_profile_images:
                    type: boolean
                    description: 'Whether to hide client profile images. `true` if client profile images should be hidden, `false` otherwise.'
                  i_attendance_direct_delay:
                    type: number
                    format: int32
                    description: 'Number of seconds of inactivity before automatic redirect.'
                  i_book_open:
                    type: number
                    format: int32
                    description: 'Number of minutes for the client check-in window after session has started.'
                  i_book_quick_app:
                    type: number
                    format: int32
                    description: 'Units of time for the look ahead window for attendance app.'
                  i_confirm_delay:
                    type: number
                    format: int32
                    description: 'Delay in seconds on attendance web app confirmation screen before redirect to login screen.'
                  id_attendance_direct:
                    type: number
                    format: int32
                    description: 'ID of the action to take when automatically redirecting. One of {@link DirectSid} constants.'
                  id_book_quick_app:
                    type: number
                    format: int32
                    description: 'Unit of time for the look ahead window for attendance app.'
                  is_attend_free:
                    type: boolean
                    description: '`true` if clients are allowed to check-in unpaid, `false` otherwise.'
                  is_book_open:
                    type: boolean
                    description: 'Whether to allow sign-ins to classes in progress.'
                  is_book_optional:
                    type: boolean
                    description: '`true` if clients are allowed to check-in without booking prior, `false` otherwise.'
                  is_book_quick_app:
                    type: boolean
                    description: '`true` if clients are allowed to sign in before session is started., `false` otherwise.'
                  show_business_name:
                    type: boolean
                    description: '`true` - show business name on attendance web app; `false` - do not show.'
                  show_confirm_screen:
                    type: boolean
                    description: '`true` - show confirm screen on attendance web app; `false` - do not show.'
                  text_business_name:
                    type: string
                    description: 'Name of the business to display in the attendance web app.'
      tags:
        - Design-ReceptionRosterDesign
  '/Wl/Skin/Application/Resource/ApplicationResource.json':
    get:
      summary: 'Gets application resources.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key. Empty to get data for all businesses.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_application:
                    type: array
                    description: 'The application data.'
      tags:
        - Resource-ApplicationResource
  '/Wl/Passport/Login/Enter/PassportOtp.json':
    get:
      summary: ''
      parameters:
        - name: is_mail
          in: query
          description: 'Whether OTP code will be sending to user via email. `true` if OTP code is sending through email, `false` if OTP code is sending through phone number.'
          schema:
            type: boolean
        - name: is_phone
          in: query
          description: 'Whether OTP code will be sending to user via email. `true` if OTP code is sending through phone number, `false` if OTP code is sending through email.'
          schema:
            type: boolean
        - name: k_business
          in: query
          description: 'Business key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Enter-PassportOtp
    post:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business key.'
                s_otp_code:
                  type: string
                  description: 'Otp code integer that was random generated.'
                uid:
                  type: string
                  description: 'User key.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Enter-PassportOtp
  '/Core/Request/Api/Application/Credential/Credential.json':
    delete:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cid_credential:
                  type: number
                  format: int32
                  description: 'The CID of the credential. Accepted values: <ul> <li> <tt>972</tt> - The Google credential. Use the {@link GoogleCredentialData} object to send the credential. </li> <li> <tt>973</tt> - The Facebook credential. Use the {@link GoogleCredentialData} object to send the credential. </li> </ul>'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Credential-Credential
    get:
      summary: ''
      parameters:
        - name: cid_credential
          in: query
          description: 'The CID of the credential. Accepted values: <ul> <li> <tt>972</tt> - The Google credential. Use the {@link GoogleCredentialData} object to send the credential. </li> <li> <tt>973</tt> - The Facebook credential. Use the {@link GoogleCredentialData} object to send the credential. </li> </ul>'
          schema:
            type: number
            format: int32
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  json_credential:
                    type: array
                    description: 'An array with the credential.'
      tags:
        - Credential-Credential
    put:
      summary: ''
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cid_credential:
                  type: number
                  format: int32
                  description: 'The CID of the credential. Accepted values: <ul> <li> <tt>972</tt> - The Google credential. Use the {@link GoogleCredentialData} object to send the credential. </li> <li> <tt>973</tt> - The Facebook credential. Use the {@link GoogleCredentialData} object to send the credential. </li> </ul>'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  json_credential:
                    type: array
                    description: 'An array with the credential.'
      tags:
        - Credential-Credential
  '/Wl/Pay/Bank/Card/Add/Add.json':
    delete:
      summary: 'Deletes saved card.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'The business key number used internally by WellnessLiving.'
                k_pay_bank:
                  type: string
                  description: 'Pay bank key to delete.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Add-Add
    get:
      summary: 'Gets code of bank card widget.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key number used internally by WellnessLiving.'
          schema:
            type: string
        - name: k_location
          in: query
          description: 'The location key.'
          schema:
            type: string
        - name: k_pay_owner
          in: query
          description: 'The payment owner ID. This is different from the user ID. It can be found with the {@link \Wl\Pay\Owner\OwnerApi}.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  html_widget:
                    type: string
                    description: 'The HTML form containing the fields required to add a card.'
      tags:
        - Add-Add
    post:
      summary: 'Saves new bank card.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_card_detail:
                  type: array
                  description: 'An array containing payment card information with the following fields: <dl> <dt> array <var>a_pay_address</var> </dt> <dd> Address information: <dl> <dt>bool <var>is_new</var></dt> <dd>`true` - add new address. `false` - use existing address.</dd> <dt>string <var>k_pay_address</var></dt> <dd>The chosen payment address ID. THis will be set even if the user decided to add a new address.</dd> <dt>string <var>k_geo_country</var></dt> <dd>The country key.</dd> <dt>string <var>k_geo_region</var></dt> <dd>The region key.</dd> <dt>string <var>s_city</var></dt> <dd>The city name.</dd> <dt>string <var>s_name</var></dt> <dd>The user name.</dd> <dt>string <var>s_street1</var></dt> <dd>The first address line.</dd> <dt>string <var>s_street2</var></dt> <dd>The second address line.</dd> <dt>string <var>s_phone</var></dt> <dd>The phone number.</dd> <dt>string <var>s_postal</var></dt> <dd>The postal code.</dd> </dl> </dd> <dt> int <var>i_csc</var> </dt> <dd> The payment card security code, also known as the CVC or CVV. </dd> <dt> int <var>i_month</var> </dt> <dd> The number of the month when the payment card expires. 1=January and 12=December. </dd> <dt> int <var>i_year</var> </dt> <dd> The last two digits of the year when the payment card expires. </dd> <dt> int <var>id_pay_actor</var> </dt> <dd> Pay actor id. One of {@link \RsPayActorSid} constants. </dd> <dt> string <var>k_pay_bank</var> </dt> <dd> Key of existing payment source in case of editing. Primary key from {@link \RsPayBankSql} table. Empty if new pay source is being added. </dd> <dt> string <var>s_name</var> </dt> <dd> The name as it appears on the payment card. </dd> <dt> string <var>s_number</var> </dt> <dd> The payment card number with no spaces or dashes. </dd> </dl>'
                k_business:
                  type: string
                  description: 'The business key number used internally by WellnessLiving.'
                k_location:
                  type: string
                  description: 'The location key.'
                k_pay_owner:
                  type: string
                  description: 'The payment owner ID. This is different from the user ID. It can be found with the {@link \Wl\Pay\Owner\OwnerApi}.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Add-Add
  '/Wl/Profile/Attendance/Schedule/Frontend/LifetimeTotals.json':
    get:
      summary: 'Retrieves lifetime visit totals.'
      parameters:
        - name: k_business
          in: query
          description: 'The business key.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'The user key.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_total:
                    type: array[]
                    description: 'Report totals. A set of key-value pairs. <dt>string <var>text_title</var></dt> <dd>Total title.</dd> <dt>int <var>s_value</var></dt> <dd>Total value.</dd> </dl>'
      tags:
        - Frontend-LifetimeTotals
  '/Wl/Appointment/Book/Asset/Service/Service.json':
    get:
      summary: ''
      parameters:
        - name: dt_start
          in: query
          description: 'The appointment booking date selected by the user.'
          schema:
            type: string
        - name: id_mode
          in: query
          description: 'Mode type, one of {@link ModeSid} constants.'
          schema:
            type: number
            format: int32
        - name: is_backend
          in: query
          description: 'If `true`, back-end mode is selected. In this mode, the list of asset categories must be returned even if asset selection is disabled for clients. If `false` for a case of front-end mode. In this mode, the list of asset categories won''t be returned if asset selection is disabled for clients.'
          schema:
            type: boolean
        - name: is_grid_any
          in: query
          description: 'Whether to show both grid layouts and custom layouts. `true` if custom layout should be included in the result. `false` if only grid layout can be used.'
          schema:
            type: boolean
        - name: is_show_unavailable_assets
          in: query
          description: 'Whether unavailable assets should be included.'
          schema:
            type: boolean
        - name: k_location
          in: query
          description: 'The selected location key.'
          schema:
            type: string
        - name: k_service
          in: query
          description: 'The selected service''s key.'
          schema:
            type: string
        - name: k_timezone
          in: query
          description: 'Timezone of date and time of service start. Empty if client can''t change in which timezone dates should be shown.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User to get information for.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_resource_busy:
                    type: array
                    description: 'A list of reserved assets. 1st level keys refer to asset keys. Primary key in {@link \RsResourceSql} table. 2nd level keys refer to asset numbers. Values refer to keys of appointment bookings that reserve the asset(s). For example, if you want to check if the 10th asset with the key of ''15'' is reserved, you can check if `a_resource_busy[''15''][''10'']` is free. If you''re rebooking an appointment, check the value of `a_resource_busy[''15''][''10'']`. If it''s equal to the key of your current appointment booking, you can assume the asset is available.'
                  a_resource_type:
                    type: array
                    description: 'A list of assets required for the service booking. Keys refer the asset category key(s). Primary key in {@link \RsResourceTypeSql} table. Values refer to sub-arrays with next key(s). <dl> <dt> array[] <var>a_resource</var> </dt> <dd> A list of resources. Every element has the following keys: <dl> <dt> array <var>a_image</var> </dt> <dd> The asset''s image data. See {@link \RsResourceImage::data()} for details. </dd> <dt> bool <var>is_available</var> </dt> <dd> If `true`, then this asset has at least one free unit. If `false`, then this asset has no free units. </dd> <dt> string <var>k_resource</var> </dt> <dd> The asset key. Primary key in {@link \RsResourceSql} table. </dd> <dt> string <var>s_resource</var> </dt> <dd> The asset title. </dd> </dl> </dd> <dt> string|null <var>k_resource_layout</var> </dt> <dd> The asset''s layout key. Primary key in {@link \Wl\Resource\Layout\Sql} table. This will be `null` if the asset category has no layout. </dd> <dt> string <var>s_resource_type</var> </dt> <dd> The title of asset category. </dd> </dl>'
                  can_book_unavailable_assets:
                    type: boolean
                    description: 'Can the staff members book reserved assets.'
      tags:
        - Service-Service
  '/Wl/Member/Progress/Log/Edit/Log.json':
    get:
      summary: 'Returns progress log data.'
      parameters:
        - name: dt_date
          in: query
          description: 'Progress log local date. If <tt>null</tt> use the current date.'
          schema:
            type: string
        - name: k_business
          in: query
          description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key. Primary key in the {@link \PassportLoginSql} table.'
          schema:
            type: null|string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array[]
                    description: 'Field log data. Structure of this array corresponds structure of result of {@link \Wl\Member\Progress\Log\Field\FieldList::getData()}.'
                  dt_last:
                    type: string|null
                    description: 'Last local date when the user entered progress values. <tt>null</tt> if the user had not entered progress data before the {@link \Wl\Member\Progress\Log\Edit\LogApi::$dt_date} date.'
                  is_staff:
                    type: boolean
                    description: 'How we want to see this page. As a staff or as a user.'
      tags:
        - Edit-Log
    post:
      summary: 'Saves progress fields log.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_field_log:
                  type: array[]
                  description: 'List of fields. Keys are field IDs ({@link \Wl\Member\Progress\Field\ProgressFieldSid} constants). Values are new field values. Structure of value completely defined by individual fields.'
                dt_date:
                  type: string
                  description: 'Progress log local date. If <tt>null</tt> use the current date.'
                is_weight_only:
                  type: boolean
                  description: 'Whether field is only weight should be updated.'
                k_business:
                  type: string
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
                uid:
                  type: null|string
                  description: 'User key. Primary key in the {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array[]
                    description: 'Field log data. Structure of this array corresponds structure of result of {@link \Wl\Member\Progress\Log\Field\FieldList::getData()}.'
      tags:
        - Edit-Log
  '/Wl/Member/Progress/Log/Image/Image.json':
    delete:
      summary: 'Deletes progress image.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_date:
                  type: string|null
                  description: 'Local date of the progress picture. <tt>null</tt> if not initialized yet.'
                k_business:
                  type: string|null
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table. <tt>null</tt> if not initialized yet.'
                uid:
                  type: string|null
                  description: 'User key. <tt>null</tt> if not initialized yet.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Image-Image
    get:
      summary: 'Returns progress picture data.'
      parameters:
        - name: dt_date
          in: query
          description: 'Local date of the progress picture. <tt>null</tt> if not initialized yet.'
          schema:
            type: string|null
        - name: k_business
          in: query
          description: 'Business key. Primary key in the {@link \RsBusinessSql} table. <tt>null</tt> if not initialized yet.'
          schema:
            type: string|null
        - name: uid
          in: query
          description: 'User key. <tt>null</tt> if not initialized yet.'
          schema:
            type: string|null
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_image:
                    type: array
                    description: 'Image data: <dl> <dt> array <var>a_image</var> </dt> <dd> Image storage data. Structure of this array corresponds result of {@link \Wl\Member\Progress\Log\Image\ProgressImage::load()}. </dd> <dt> int <var>i-size</var> </dt> <dd> Max image size. </dd> <dt> int <var>i-thumbnail-height</var> </dt> <dd> Image thumbnail height. </dd> <dt> int <var>i-thumbnail-width</var> </dt> <dd> Image thumbnail width. </dd> <dt> string <var>s_link</var> </dt> <dd> Image link. </dd> <dt> string <var>url-action</var> </dt> <dd> Image upload url. </dd> </dl>'
      tags:
        - Image-Image
    post:
      summary: 'Saves progress picture.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                dt_date:
                  type: string|null
                  description: 'Local date of the progress picture. <tt>null</tt> if not initialized yet.'
                k_business:
                  type: string|null
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table. <tt>null</tt> if not initialized yet.'
                s_command:
                  type: string|null
                  description: 'Save image command. <tt>null</tt> if not initialized yet.'
                uid:
                  type: string|null
                  description: 'User key. <tt>null</tt> if not initialized yet.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Image-Image
  '/Wl/Member/Progress/Log/Compare/Compare.json':
    get:
      summary: 'Returns list of dates where client logged his progress.'
      parameters:
        - name: k_business
          in: query
          description: 'Key of business to get information for. Primary key in {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key to search dates for. Primary key in {@link \PassportLoginSql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_date:
                    type: string[]
                    description: 'List of local dates of the progress log.'
      tags:
        - Compare-Compare
  '/Wl/Member/Progress/Field/Edit/Field.json':
    get:
      summary: 'Returns field data.'
      parameters:
        - name: k_business
          in: query
          description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: k_field
          in: query
          description: 'Field key. Primary key in the {@link \Wl\Member\Progress\Field\Sql} table.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_measurement:
                    type: array
                    description: 'A list of field measurement. See {@link \Wl\Member\Progress\Field\MeasurementSid}.'
                  a_type:
                    type: array
                    description: 'A list of field type. See {@link \Wl\Member\Progress\Field\TypeSid}.'
                  id_field:
                    type: int|null
                    description: 'Field ID. One of the {@link ProgressFieldSid} constant.'
                  id_measurement_unit:
                    type: null|int
                    description: 'Field measurement unit ID. One of the {@link \Wl\Member\Progress\Field\MeasurementSid} constants.'
                  id_type:
                    type: number
                    format: int32
                    description: 'Field type ID. One of the {@link \Wl\Member\Progress\Field\TypeSid} constants.'
                  is_active:
                    type: boolean
                    description: 'Whether field is active and should be displayed on page.'
                  is_public:
                    type: boolean
                    description: 'Whether this field is public. If this field is set to <tt>false</tt>, this field is not visible to clients.'
                  is_require:
                    type: boolean
                    description: 'Whether field value is required for clients.'
                  is_require_staff:
                    type: boolean
                    description: 'Whether field value is required for staffs.'
                  text_title:
                    type: string|null
                    description: 'Field title. Only titles of the custom progress fields can be changed. <tt>null</tt> If default title should be used.'
      tags:
        - Edit-Field
    post:
      summary: 'Saves field data.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                k_business:
                  type: string
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
                k_field:
                  type: string
                  description: 'Field key. Primary key in the {@link \Wl\Member\Progress\Field\Sql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_measurement_unit:
                    type: null|int
                    description: 'Field measurement unit ID. One of the {@link \Wl\Member\Progress\Field\MeasurementSid} constants.'
                  id_type:
                    type: number
                    format: int32
                    description: 'Field type ID. One of the {@link \Wl\Member\Progress\Field\TypeSid} constants.'
                  is_active:
                    type: boolean
                    description: 'Whether field is active and should be displayed on page.'
                  is_public:
                    type: boolean
                    description: 'Whether this field is public. If this field is set to <tt>false</tt>, this field is not visible to clients.'
                  is_require:
                    type: boolean
                    description: 'Whether field value is required for clients.'
                  is_require_staff:
                    type: boolean
                    description: 'Whether field value is required for staffs.'
                  text_title:
                    type: string|null
                    description: 'Field title. Only titles of the custom progress fields can be changed. <tt>null</tt> If default title should be used.'
      tags:
        - Edit-Field
  '/Wl/Member/Progress/Goal/Edit/Goal.json':
    get:
      summary: 'Returns progress goal log data.'
      parameters:
        - name: k_business
          in: query
          description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
          schema:
            type: string
        - name: uid
          in: query
          description: 'User key. Primary key in the {@link \PassportLoginSql} table.'
          schema:
            type: null|string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array[]
                    description: 'Field log data. Structure of this array corresponds structure of result of {@link \Wl\Member\Progress\Log\Field\FieldList::getData()}.'
                  is_staff:
                    type: boolean
                    description: 'How we want to see this page. As a staff or as a user.'
      tags:
        - Edit-Goal
    post:
      summary: 'Saves progress goal fields log.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_field_goal:
                  type: array[]
                  description: 'List of fields. Keys are field IDs ({@link \Wl\Member\Progress\Field\ProgressFieldSid} constants). Values are new field values. Structure of value completely defined by individual fields.'
                k_business:
                  type: string
                  description: 'Business key. Primary key in the {@link \RsBusinessSql} table.'
                uid:
                  type: null|string
                  description: 'User key. Primary key in the {@link \PassportLoginSql} table.'
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_field_list:
                    type: array[]
                    description: 'Field log data. Structure of this array corresponds structure of result of {@link \Wl\Member\Progress\Log\Field\FieldList::getData()}.'
      tags:
        - Edit-Goal
  '/Wl/Shop/Product/Option/Inventory/Count/InventoryCount.json':
    get:
      summary: 'Returns information about product options. Works in two modes: review and search. In review mode, the method returns products with changed inventory quantities and notes. In search mode, the method returns one product and its options (the result of searching by product barcode).'
      parameters:
        - name: a_note
          in: query
          description: 'The list of notes for product options in the store. Keys refer to product options in the store. Values refer to text notes.'
          schema:
            type: array
        - name: a_quantity
          in: query
          description: 'The list of product option quantities in the store. Keys refer to product options in the store. Values refer to product counts.'
          schema:
            type: array
        - name: k_business
          in: query
          description: 'The current business.'
          schema:
            type: string
        - name: text_barcode
          in: query
          description: 'The product barcode, used for the search.'
          schema:
            type: string
      responses:
        200:
          description: 'Successful response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  a_product_option:
                    type: array[]
                    description: 'Information about product options for review or search. Each element contains: <dl> <dt>array <var>a_image</var></dt> <dd>Information about the product option image: <dl> <dt>int <var>i_height</var></dt> <dd>The image height.</dd> <dt>int <var>i_width</var></dt> <dd>The image width.</dd> <dt>string <var>url</var></dt> <dd>The image URL.</dd> </dl> </dd> <dt>string <var>dl_change</var></dt> <dd>The date of the last product inventory change.</dd> <dt>int <var>i_count</var></dt> <dd>The product option quantity.</dd> <dt>string <var>k_location</var></dt> <dd>The location key.</dd> <dt>string <var>k_shop_product_option</var></dt> <dd>The key of the product option in the store.</dd> <dt>string <var>k_shop_product_option_inventory</var></dt> <dd>The key of the product option inventory in the store.</dd> <dt>string <var>text_category</var></dt> <dd>The title of the store category.</dd> <dt>string <var>text_location</var></dt> <dd>The location title.</dd> <dt>string <var>text_note</var></dt> <dd>The product option inventory note.</dd> <dt>string <var>text_option</var></dt> <dd>The product option title.</dd> <dt>string <var>text_product</var></dt> <dd>The product option title.</dd> </dl>'
                  text_user_name:
                    type: string
                    description: 'The current username.'
      tags:
        - Count-InventoryCount
    post:
      summary: 'Saves changes of product inventory quantities and notes.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                a_note:
                  type: array
                  description: 'The list of notes for product options in the store. Keys refer to product options in the store. Values refer to text notes.'
                a_quantity:
                  type: array
                  description: 'The list of product option quantities in the store. Keys refer to product options in the store. Values refer to product counts.'
                k_business:
                  type: string
                  description: 'The current business.'
      responses:
        200:
          description: 'Successful response. Full description is not available yet.'
      tags:
        - Count-InventoryCount
tags:
  -
    name: Account-Account
    description: 'Displays information about user''s accounts.'
  -
    name: Account-BusinessAccount
    description: 'Gets a list of active businesses. To run this endpoint, a user must be authorized with the `rs.business.view` privilege.'
  -
    name: Activity-Element
    description: 'Returns detailed information about a single client activity.'
  -
    name: Activity-List
    description: 'Returns a list of client activities.'
  -
    name: Add-Add
    description: 'Adds a payment card to a user’s account. The GET method retrieves an HTML code that contains the fields necessary to provide the information needed to add the payment card. The POST method will actually add the payment card. This endpoint using captcha check. To pass captcha need study the documentation by captcha API, there you will find that you need to send a captcha for a specific action. For this API an action is {@link BusinessPaymentCaptcha::CID}.'
  -
    name: Add-MailUseOk
    description: 'Registers an existing user in the specified Enterprise Headquarters account. This endpoint isn''t applicable for users who are already members of the business. After a profile is edited, there can be a delay while the data replicates to system caches. As a result, you may see a ''profile-field-empty'' status code. In most cases, this delay is less than 20 seconds. For Enterprise Cloud in WellnessLiving, clients can only be members in one Enterprise Location. In all other Enterprise Locations, they''ll be treated as travelers in the system.'
  -
    name: Address-Address
    description: 'Gets information about a user''s payment addresses.'
  -
    name: Address-Profile
    description: 'Retrieves a client’s physical address from their profile.'
  -
    name: Agree-Agree
    description: 'Saves the user''s agreement to the online waiver.'
  -
    name: Alert-Alert
    description: 'Retrieves information about client alert messages.'
  -
    name: Alert-AlertEdit
    description: 'Allows to create, read, update and delete login notes.'
  -
    name: AmazonRegion-AmazonRegion
    description: 'An endpoint for retrieve region ID for businesses.'
  -
    name: Announcement-AnnouncementList
    description: 'Retrieves a list of announcements.'
  -
    name: Api-KeySecret
    description: 'Gets a secret key for request signing. This is required for a CORS request. A request to this point must be signed as an ordinary request from the SDK using transient and persistent cookies. There must be no CORS (don''t send from a browser).'
  -
    name: Application-MemberInfo
    description: 'Returns information about user for self check in application.'
  -
    name: Application-Origin
    description: 'Gets, deletes, and adds origins for the application. Origins are links on the sites where the API can be used sign CORS authorizations from a client''s browser. If the site isn''t in the list, you can only use the API for requests between two servers. Requests directly from a client''s browser are restricted. Origins should appear as a full link in the same manner they appear on the site. It''s important to understand that the application can add allowed sites only for itself and can''t add sites for another application. This means that you need to call this endpoint using only the application that you''re using on the sites.'
  -
    name: Application-ReceptionSchedule
    description: 'Shows the schedule for the check-in process. Returns the HTML code that is normally presented for the check-in process.'
  -
    name: Application-Skin
    description: 'Retrieves customized skin settings for the client view.'
  -
    name: Asset-AssetList
    description: 'Retrieves information about assets in the current asset category.'
  -
    name: Asset-Category
    description: 'Retrieves information about asset categories.'
  -
    name: Attach-AttachElement
    description: 'Endpoint for upload and manage attachments.'
  -
    name: Attach-AttachList
    description: 'Manages client attachment list.'
  -
    name: Attendance-AttendanceInfo
    description: 'Attendance list information.'
  -
    name: Attendance-AttendanceInfoByToken
    description: 'Displays information for certain sessions. Version of {@link \Wl\Login\Attendance\AttendanceInfoApi} for access validation by security token.'
  -
    name: Attendance-AttendanceList
    description: 'Retrieves information about clients attending a class, appointment, or event session.'
  -
    name: Attendance-AttendanceListByToken
    description: 'An endpoint that displays attendance list data. Version of {@link \Wl\Login\Attendance\AttendanceListApi} for access validation by security token.'
  -
    name: AuthorizePartner-AuthorizePartner
    description: 'Gives members of a franchisor access to a franchisee. To grant a user access, the "Manage Franchise Location" staff permission is required. Access will be granted for 24 hours.'
  -
    name: Autymate-AutymateActivate
    description: 'Checks or changes the status of Autymate enrollments.'
  -
    name: Autymate-Report
    description: 'Retrieves all daily transactions for a business using the All Transactions report endpoint. See {@link \Wl\Report\Generator\QueryApi}. This endpoint is a streamlined interface and adds additional columns to the report for Autymate. Autymate will have one user to access all businesses, this user will require the wl.integration.autymate.report privilege.'
  -
    name: Bot-Access
    description: 'Allows to grant/revoke access from a bot to a service.'
  -
    name: Bot-Edit
    description: 'Allows to create, edit and delete bots.'
  -
    name: Branch-Branch
    description: 'Runs a build for creation a new branch or delete an existing branch for the specified task.'
  -
    name: Branch-BranchBuild
    description: 'Changes branch information during build. This API is designed to use only from builds (`BranchCreate`, `BranchDelete`) and is not expected that this API is called from other places.'
  -
    name: Branch-BranchList
    description: 'Runs a build for creation a new branch or delete an existing branch for the specified task.'
  -
    name: Business-Business
    description: 'Creates a new business.'
  -
    name: Business-BusinessAccess
    description: 'Returns information about a given staff member''s business.'
  -
    name: Business-Data
    description: 'Displays information for a specified business.'
  -
    name: Captcha-CaptchaRequire
    description: 'Checks if a CAPTCHA is required.'
  -
    name: Card-List
    description: 'Gets information about any payment cards belonging to a user.'
  -
    name: Cart-Cart
    description: 'Displays information about the cart in the catalog.'
  -
    name: Cart-LimitQuantity
    description: 'Displays information about the quantity limit when a promotion (Purchase Option) is added to the cart.'
  -
    name: Catalog-ProgramList
    description: 'Retrieves a list of programs'' information.'
  -
    name: CatalogCart-CatalogCart
    description: 'Calculates price data for a sale item. Note that the terms "promotion" and "Purchase Option" refer to the same thing.'
  -
    name: CatalogList-CatalogList
    description: 'Returns a list of all products available from a business’s shop. If a location is specified, only products available at that location are included.'
  -
    name: CatalogList-CatalogProduct
    description: 'Returns a list of products.'
  -
    name: CatalogList-Element
    description: 'Displays information about a certain item in the store. When using this endpoint, note that the terms "promotion" and "Purchase Option" refer to the same thing.'
  -
    name: CatalogList-List
    description: 'Displays information about store items.'
  -
    name: CatalogView-CatalogView
    description: 'Returns information about an item’s price after taxes.'
  -
    name: Category-Category
    description: 'Returns a list of all categories in a business’s store.'
  -
    name: Category-CategoryElement
    description: 'Saves video categories.'
  -
    name: Category-CategoryList
    description: 'Returns a list of video categories.'
  -
    name: ChangePassword-ChangePasswordApply
    description: 'Finishes the password change procedure for a user. This endpoint advances the {@link ChangePasswordBeginApi} endpoint. Set your desired password in the {@link ChangePasswordBeginApi::$url_reset} field, where you use the "reset password" link via email to get the user''s new password for this endpoint. When the user goes to your page, get <tt>text_mail</tt> and <tt>text_code</tt> from the URL, then post this model to set a password for user. Use <tt>text_mail</tt> as the value for {@link ChangePasswordApplyApi::$text_login} and {@link ChangePasswordApplyApi::$text_mail}, and <tt>text_code</tt> as the value for {@link ChangePasswordApplyApi::$text_code}.'
  -
    name: ChangePassword-ChangePasswordBegin
    description: 'Starts the password change procedure for a user. Post this to send the user the "reset password" email.'
  -
    name: Charge-Charge
    description: 'Fills a user account with a specified payment. This endpoint uses a CAPTCHA check. To pass the CAPTCHA, review the CAPTCHA API doumentation. where you''ll find that you must send a CAPTCHA for a specific action. For this endpoint, the action is {@link BusinessPaymentCaptcha::CID}.'
  -
    name: Cid-Info
    description: 'Allows to retrieve information about a CID class. This API endpoint is only available for Studio personnel and bots.'
  -
    name: Cid-Register
    description: 'Allows to register a new CID class. This API endpoint is only available for Studio personnel and bots.'
  -
    name: Cid-Rename
    description: 'Allows to rename a class associated with a CID. This API endpoint is only available for Studio personnel and bots.'
  -
    name: ClassList-BookList
    description: 'An endpoint to get all the classes for a location.'
  -
    name: ClassList-ClassList
    description: 'Retrieves a list of classes and class information for a Class Tab.'
  -
    name: ClassView-ClassView
    description: 'Gets information about a specified class session. A class listing can be retrieved from the {@link ClassListApi} endpoint.'
  -
    name: ClassView-Element
    description: 'Retrieves information about a class element.'
  -
    name: Cluster-Cluster
    description: 'Manage `Studio Deploy Cluster`.'
  -
    name: Collector-DebtList
    description: 'Returns list of debts added within the previous month.'
  -
    name: Collector-DebtPay
    description: 'Registers a debt payment that was performed beyond Wellnessliving, with a specified credit amount applied to a client''s account balance.'
  -
    name: Collector-DebtTransaction
    description: 'Returns a list of payments for debts added within the previous day.'
  -
    name: Compare-Compare
    description: 'Member progress log compare data.'
  -
    name: Config-BusinessConfig
    description: 'Manages business configurations for clients, bookings, payments, and related things.'
  -
    name: Contract-Contract
    description: 'Gets information about a session pass or membership with a contract. The POST method will complete a sale of a Purchase Option requiring a contract. The method that WellnessLiving uses to encode a signature into a string isn''t currently available in the SDK.'
  -
    name: Convert-Convert
    description: 'Receives convertable Purchase Option data and promotion conversions. The DELETE method will remove the conversion and reset the date. The GET method will return a list of promotions available at the business. The POST method can be used to change what the Purchase Option should convert to and when to convert it.'
  -
    name: Count-InventoryCount
    description: 'Used to retrieve and change inventory quantities and notes for product options in the store.'
  -
    name: Coupon-Coupon
    description: 'Retrieves information about a gift card (also referred to as the coupon code).'
  -
    name: CouponList-List
    description: 'Retrieves a list of gift cards.'
  -
    name: Credential-Credential
    description: 'Manages credentials for the application.'
  -
    name: Curves-CurvesFranchiseLocation
    description: 'Gets information for enterprise locations.'
  -
    name: DebugToken-DebugTokenService
    description: 'Allows checking the validity of a debug token.'
  -
    name: Design-BusinessDesign
    description: 'Provides business design information.'
  -
    name: Design-ReceptionDesign
    description: 'Api endpoint to get information about Self Check-In Kiosk settings.'
  -
    name: Design-ReceptionRosterDesign
    description: 'Api endpoint to get information about Attendance Kiosk settings.'
  -
    name: DragonFly-Access
    description: 'Checks if a user can access a physical location.'
  -
    name: Edit-AddonUpdate
    description: 'Updates add-ons for an appointment. This endpoint can be used to update add-ons for existing appointments.'
  -
    name: Edit-Create
    description: 'Creates user account for the given email address if email address does not already exist. checks if a user''s email address is already used or changes a user’s login email address.'
  -
    name: Edit-Edit
    description: 'Gets information about a client profile. This endpoint can also edit or create a profile. The GET method returns the profile fields for a specified user or a blank set of fields for a new user of a given business: * If the GET method is used with a valid UID greater than 0, the method will return a list of fields with the values of the specified user. * If the GET method is used with a UID set to 0, a list of profile fields will be returned for the specified business. A user in WellnessLiving can be in multiple businesses. There are some fields common among all business and others specific to one business. The type of field is described in `id_field_type`, which will be one of the {@link \RsFieldTypeSid} constants. Some fields have a general type, which can have a specific format: * Address - An array containing the following keys: `k_city`, `s_address`, `s_city`, and `s_postal`. The `k_city` value can be retrieved via the {@link ComboboxApi} endpoint. The following is an example address array: * Birthday - A string containing the date in MySQL format (for example, `1987-06-05`). * Email Address - An array containing the following keys: <dl> <dt>bool <var>is_inherit</var></dt> <dd>Determines whether the user shares the email address with another user. This is typically done for children who use their parent’s email (`is_inherit=1`). In general, most other cases use (`is_inherit=0`).</dd> <dt>bool <var>s_mail</var></dt> <dd>The new email address.</dd> <dt>int <var>uid_mail</var></dt> <dd>User key of another user when adding an email inheritance.</dd> </dl>'
  -
    name: Edit-EditByToken
    description: 'An endpoint that displays client profile information. Version of {@link \Wl\Profile\Edit\EditApi} for access validation by security token.'
  -
    name: Edit-EditPassword
    description: 'Model to change user''s password.'
  -
    name: Edit-Field
    description: 'Manages progress field data.'
  -
    name: Edit-Goal
    description: 'Progress goal api.'
  -
    name: Edit-Log
    description: 'Progress log api.'
  -
    name: Editor-List
    description: 'Returns a list of microservices.'
  -
    name: Email-EditEmail
    description: 'Checks if a user''s email address is already used or changes a user’s login email address. This endpoint is rate limited. If the rate limit is exceeded, it won''t return user information. While `get` request allows to check, whether user with the given email exists on the site, `post` allows to add it to the certain business, if it''s not added yet. If client has all required by this business fields filled, it will be added right away. Otherwise it will add temporary access to this client, and you need to send all necessary fields with {@link EditApi} endpoint.'
  -
    name: Email-EmailExist
    description: 'Checks if the email address exists in the system.'
  -
    name: Enter-Enter
    description: 'Signs a user in.'
  -
    name: Enter-Notepad
    description: 'An endpoint that retrieves the notepad value from the server that is used to sign someone in to the SDK.'
  -
    name: Enter-PassportOtp
    description: 'Entry point to verify user authorization by email and phone number via sending and checking otp code.'
  -
    name: Event-EventCancelWhole
    description: 'Cancels a whole event booked by a client.'
  -
    name: Event-EventList
    description: 'Retrieves a list of events that fit the given filter parameters.'
  -
    name: EventList-List
    description: 'Retrieves a list of events for a given class tab.'
  -
    name: EventView-Element
    description: 'Retrieves information about an event element.'
  -
    name: Field-EnrollmentFieldList
    description: 'Retrieves and validates a list of insurance partner fields. Use the GET method to load a list of required fields. Use the POST method to validate the fields before sending them to the payment API.'
  -
    name: Field-State
    description: 'Performs ajax requests for progress fields edit page.'
  -
    name: Finish-Finish
    description: 'Completes the booking process for a service. This endpoint can be used with an existing client by specifying their UID. It can also be used to create a new client by specifying user details in {@link FinishApi::$a_user} and omitting any UID. This endpoint can be accessed anonymously without authentication, but only when creating clients.'
  -
    name: Finish-Finish47
    description: 'Completes an appointment booking.'
  -
    name: Finish-FinishMultiple
    description: 'Pays for an appointment or appointment Purchase Option for a client.'
  -
    name: Fitbuilder-Message
    description: 'Point to get messenger information from Fitbuilder.'
  -
    name: Flag-Flag
    description: 'Retrieves information if a user is flagged in a location.'
  -
    name: Form-Environment
    description: 'Gets information about payment environments.'
  -
    name: Form-EnvironmentUser
    description: 'Gets information about payment environments for the user.'
  -
    name: Frequency-Repeat
    description: 'For recurrent class booking returns list of visits to be created for the given settings.'
  -
    name: Frontend-LifetimeTotals
    description: 'Returns a list with totals of lifetime visits.'
  -
    name: Generator-Query
    description: 'Returns content of a report as a table. If report is not yet generated, it gets generated. If the report is being generated now, partial content may be returned.'
  -
    name: Geo-Combobox
    description: 'Retrieves a list of cities matching the search string for a given location.'
  -
    name: Google-GoogleCaptcha
    description: 'Stores the user token CAPTCHA.'
  -
    name: GroupList-List
    description: 'Member groups list.'
  -
    name: Holiday-BulkBusinessHoliday
    description: 'An endpoint displaying information about all location/business holidays for a given business.'
  -
    name: Holiday-Holiday
    description: 'An endpoint displaying information about locations'' business holidays.'
  -
    name: Image-Image
    description: 'Progress image api.'
  -
    name: ImageUpload-ImageUpload
    description: 'An endpoint that performs the final action to an uploaded image. Images are uploaded using {@link \Core\Drive\ImageUpload\ImageUploadTemporaryApi}.'
  -
    name: ImageUpload-ImageUploadTemporary
    description: 'Uploads a raw image to a server. You must save an image by using {@link ImageUploadApi}.'
  -
    name: Index-PromotionIndex
    description: 'Gets a list of introductory promotion offers of a specified type available at a given location.'
  -
    name: Info-Info
    description: 'Offers functionality for the class booking wizard on the "Class and Location" page.'
  -
    name: Info-Info54
    description: 'Offers functionality for the class booking wizard on the "Class and Location" page. When using this endpoint, take into account the {@link ProcessSpaSid::QUIZ} step.'
  -
    name: Info-InfoCanComplete
    description: 'Checks for `next` and `complete` buttons in the booking process.'
  -
    name: Info-UserInfo
    description: 'Retrieves information about a WellnessLiving user.'
  -
    name: Info-UserIntegration
    description: 'An endpoint that return the information about the integrations the user is connected to.'
  -
    name: Instance-Instance
    description: 'Manage `Studio Deploy Instance`.'
  -
    name: Layout-Layout
    description: 'Displays information about an asset layout.'
  -
    name: Lead-BusinessLead
    description: 'Creates a new business lead request within the Partner Program.'
  -
    name: Lead-Lead
    description: 'Gets information from the Lead Capture widget and saves a new user’s information. A user can be added to a second business by adding them first as a lead. If your business uses Enterprise Cloud, there may be a restriction where clients can only be members in one enterprise location (travellers in all other enterprise locations). This endpoint using captcha check. To pass captcha need study the documentation by captcha API, there you will find that you need to send a captcha for a specific action. For this API an action is {@link LeadCaptcha::CID}.'
  -
    name: Level-Level
    description: 'Retrieves, changes, or deletes a video level.'
  -
    name: Level-LevelList
    description: 'Changes the order of video levels.'
  -
    name: Location-BusinessFranchiseLocation
    description: 'Manages franchisor locations.'
  -
    name: Location-List
    description: 'Returns information for all locations belonging to a business.'
  -
    name: Location-ListBulk
    description: 'Gets all locations for a list of businesses. This can be used to get all locations from all businesses. When using this endpoint, note that it will return a list of all locations in the system, potentially using substantial system resources. Using this endpoint can potentially result in larger API calls than average calls made for other endpoints.'
  -
    name: Location-Location
    description: 'Creates a new location in the business or edits a specified location. Access to this endpoint is logged with specified permissions. It can also be accessed by guests during the registration process for new businesses. See {@link \Wl\Business\BusinessApi::sessionKey()}. Field <tt>k_business</tt> is required. Other fields are optionally if the location should be edited. This means if a field is not specified it is not be changed. If <tt>k_location</tt> is not specified that new location will be created. In this case <tt>k_city</tt>, <tt>text_address</tt> and <tt>text_title</tt> are required.'
  -
    name: Log-Verify
    description: 'Performs ajax requests for verify client''s progress log.'
  -
    name: Login-AppleLogin
    description: 'Authorizes a user with Apple.'
  -
    name: Login-FacebookLogin
    description: 'An endpoint that performs authorization actions with Facebook.'
  -
    name: Login-GoogleLogin
    description: 'An endpoint that performs authorization actions with Google.'
  -
    name: Login-Info
    description: 'Gets the user ID for the current user and a password reset URL.'
  -
    name: Login-Login
    description: 'Authorizes Facebook users.'
  -
    name: Login-MicrosoftLogin
    description: 'An endpoint that performs authorization actions with Microsoft.'
  -
    name: Mail-MailUse
    description: 'An endpoint to check if an email address is used by member of a business.'
  -
    name: Mail-PurchaseMail
    description: 'Emails a receipt for a purchase.'
  -
    name: Mail-SendMail
    description: 'Can be used to send email messages.'
  -
    name: Member-Member
    description: 'Displays information about members of businesses.'
  -
    name: Member-MemberValidate
    description: 'Checking whether there is something that prevents the user from using the business.'
  -
    name: Member-MemberValidate63
    description: 'Checking whether there is something that prevents the user from using the business.'
  -
    name: Method-List
    description: 'An endpoint containing a model to get the list of payment methods.'
  -
    name: Microsoft-Login
    description: 'Performs preliminary authorization actions with Microsoft.'
  -
    name: Modify-Modify
    description: 'Modifies the master model.'
  -
    name: Otp-PhoneOtp
    description: 'Entry point to verify access to the phone number via sending and checking otp code. This endpoint is available only for user with a special privilege. If you want to use this endpoint, contact with WellnessLiving support first.'
  -
    name: Owner-Owner
    description: 'Gets the payment owner ID.'
  -
    name: Page-PageElement
    description: 'Returns information about a specified visit.'
  -
    name: Page-PageList
    description: 'Returns a list of either previous or upcoming visits for a specific user. A visit can be for an appointment, class, or an event.'
  -
    name: Partner-PartnerSettings
    description: 'Works with partner settings of the business. This information is entered by a staff member when a client enrolls into Partner Program and uses a custom landing page, which is available by special business URL.'
  -
    name: Payment-Payment
    description: 'Acts as the booking wizard for the "Pay/Billing info" page. This endpoint using captcha check. To pass captcha need study the documentation by captcha API, there you will find that you need to send a captcha for a specific action. For this API an action is {@link BusinessPaymentCaptcha::CID}.'
  -
    name: Payment-PaymentMultiple
    description: 'Completes the payment for an appointment or appointment Purchase Option for a client. The only difference between this endpoint and {@link PaymentApi} is that this endpoint is capable of paying for multiple appointments at the same time. This endpoint uses a CAPTCHA check. To pass the CAPTCHA, you''ll need to study the documentation of the CAPTCHA base class. In the documentation, you''ll find that you need to send a CAPTCHA for a specific action. For this API, the action is {@link BusinessPaymentCaptcha::CID}.'
  -
    name: Payment-PaymentPost
    description: 'Sends payments for an appointment booking. This endpoint using captcha check. To pass captcha need study the documentation by captcha API, there you will find that you need to send a captcha for a specific action. For this API an action is {@link BusinessPaymentCaptcha::CID}.'
  -
    name: Permission-Permission
    description: 'Makes a purchased promotion auto-renewable. The POST method makes the promotion auto-renewable based on the {@link PermissionApi::$is_renew} parameter.'
  -
    name: Plus-Login
    description: 'Authorizes a user with Google.'
  -
    name: Privilege-PrivilegeList
    description: 'Can return list of admin or staff privileges of the current user. Cannot be used to check privileges of another user.'
  -
    name: Process-Process
    description: 'Performs the booking wizard steps.'
  -
    name: Process-Process54
    description: 'Performs the booking wizard steps. Include the {@link ProcessSpaSid::QUIZ} step, if needed.'
  -
    name: Process-Process59
    description: 'Performs the booking wizard steps. This endpoint includes changes to the list of steps if the service is already booked for the currently selected client, and if {@link ProcessApi::$is_family_relation_book} is set to `true`.'
  -
    name: Product-Product
    description: 'Returns information about service add-ons. If you need to filter products by client type/group, use {@link Product62Api}.'
  -
    name: Product-Product62
    description: 'Returns information about service add-ons.'
  -
    name: Profile-ProfileCreate
    description: 'Creates user profile with minimum fields.'
  -
    name: Promotion-ClassPromotion
    description: 'Returns a list of promotions that can pay for a business''s classes or events.'
  -
    name: Promotion-Promotion
    description: 'Gets promotions for the specified business and promotion keys.'
  -
    name: Promotion-PromotionList
    description: 'Gets a promotion list of the specified business.'
  -
    name: Promotion-PromotionPayPause
    description: 'Manages or retrieves information about holds on Purchase Options. The DELETE method can remove a hold. The GET method only returns information about active holds. The POST method can create or edit a hold. The PUT method can edit a hold.'
  -
    name: Purchase-MemberByPromotion
    description: 'Returns a list of active clients with the given Purchase Options. This endpoint returns only active clients using active Purchase Options from the given list. Does not return clients, to which currently signed-in user does not have access to.'
  -
    name: Purchase-Purchase
    description: 'Displays information about Purchase Options that can book specified session(s). Note that the terms "Purchase Option" and "promotion" represent the same thing (promotion was the previous term used in WellnessLiving). Both these terms have been used for various variable names.'
  -
    name: Purchase-Purchase56
    description: 'Displays information about Purchase Options that can book specified session(s). Note that the terms "Purchase Option" and "promotion" are used interchangeably.'
  -
    name: Purchase-PurchaseElement
    description: 'A model of the purchase item.'
  -
    name: Purchase-PurchaseElementList
    description: 'Displays a list of purchase items.'
  -
    name: Purchase-PurchaseList
    description: 'An endpoint that gets a list of purchases for a user.'
  -
    name: PurchaseList-PurchaseList
    description: 'Gets a list of purchases for a user.'
  -
    name: PurchaseList-PurchaseListElement
    description: 'Gets the details of a specified purchase. This endpoint may require different IDs to be specified for different types of purchases. The IDs required for a specific item will be the same IDs returned from the {@link PurchaseListApi} endpoint.'
  -
    name: Question-Question
    description: 'Retrieves questions for a selected service.'
  -
    name: Quiz-Quiz
    description: 'Manages quizzes and a selected Purchase Option for a class or event during the booking process. Note that the terms "Purchase Option" and "promotion" are used interchangeably.'
  -
    name: Quiz-QuizElement
    description: 'Manages a single quiz.'
  -
    name: Rank-Rank
    description: 'Retrieves information about belts in a business. This information can be used to figure out totals in the Belts Report.'
  -
    name: Receipt-PurchaseReceipt
    description: 'Returns receipt data of certain purchase.'
  -
    name: Referrer-Referrer
    description: 'Searches for a referrer using a string.'
  -
    name: Region-Region
    description: 'Gets a list of regions for a specified country or all countries. A region refers to a jurisdiction like a state, province, or territory.'
  -
    name: Register-Register
    description: 'Allows new clients to be registered. The {@link LeadApi} endpoint is recommended for registering new users. However, this endpoint isn''t enabled by default. To enable this endpoint, use the contact form in the developer portal.'
  -
    name: Register-RegisterConfirm
    description: 'Confirm the user''s email and completes the registration process.'
  -
    name: Relation-Relation
    description: 'Adds a relative during the booking process.'
  -
    name: Report-Access
    description: 'Checks access of the current user to the certain report int the given business.'
  -
    name: Report-Data
    description: 'Returns information from a WellnessLiving report. There are two All Clients Reports that can be used to find user IDs. The results from each report can be filtered by different fields. The two reports are similar, but not exactly the same. The `LOGIN_LIST` (ID 22) report requires filters to be set to retrieve information. The `LOGIN_LIST_ALL` (ID 33) doesn’t require any filters to be set when specifying a date range.'
  -
    name: Report-PageData
    description: 'Returns collection of the reports.'
  -
    name: Report-TransactionAllPayment
    description: 'Can retrieve information from the All Transactions Report.'
  -
    name: Request-Example
    description: 'Example API endpoint. Designed to debug issues with API.'
  -
    name: Resource-ApplicationResource
    description: 'Returns information used to generate application sources.'
  -
    name: Resource-Resource
    description: 'Selects assets for making a booking.'
  -
    name: Resource-Resource54
    description: 'Selects assets when making a booking. Take note of the {@link ProcessSpaSid::QUIZ} step.'
  -
    name: Response-Response
    description: 'An endpoint to request entrance into a business location. This endpoint is similar to {@link AuthorizePartnerApi} but not identical. To grant a user access the SDK sign-in account, the Manage Business permission is required. The associated accounts will receive an email regarding when they are given access and when that access expires. Access will be granted for 24 hours.'
  -
    name: Response-ResponseList
    description: 'Retrieves a list of a user''s quiz responses.'
  -
    name: Review-Review
    description: 'Adds a review for a location. The review consists of a rating from 1 to 5 stars and text. The review will be attributed to the user who is signed in to the API. This endpoint using captcha check. To pass captcha need study the documentation by captcha API, there you will find that you need to send a captcha for a specific action. For this API an action is {@link ReviewCaptcha::CID}.'
  -
    name: Review-ReviewFeature
    description: 'Changes the status of a featured review.'
  -
    name: Review-ReviewReply
    description: 'Adds a review reply.'
  -
    name: ReviewList-ReviewElement
    description: 'Returns information about a review.'
  -
    name: ReviewList-ReviewList
    description: 'Returns a list of review IDs for all reviews for a location. If location is not specified, returns all reviews for all locations in the specified business. Reviews in WellnessLiving apply to specific locations. This endpoint can be used to get the IDs for all reviews or to get a listing that includes all the review data if the `i_page parameter` is set.'
  -
    name: Roster-AttendanceListAttend
    description: 'Book a class for a client and mark as attended using the Attendance Kiosk.'
  -
    name: Roster-AttendanceListBook
    description: 'Book a class for a client using the Attendance Kiosk.'
  -
    name: Roster-AttendanceListNotAttend
    description: 'Marks the visit as not attended using the Attendance Kiosk.'
  -
    name: Roster-AttendanceSecret
    description: 'Api endpoint to get the secret string for Attendance Kiosk requests.'
  -
    name: Saml-SamlUserDeactivation
    description: 'Retrieves user statuses in the business.'
  -
    name: Schedule-Calendar
    description: 'Retrieves a list of all calendar days in a specified month with available and unavailable appointment bookings in the schedule.'
  -
    name: Schedule-Cancel
    description: 'Cancels either an appointment, class, or event session for the client.'
  -
    name: Schedule-DayTime
    description: 'Retrieves a list of information about the booking schedule for available appointments.'
  -
    name: Score-Score
    description: 'API endpoint designed to manage points which are earned for certain activity.'
  -
    name: Search-Concerto
    description: 'Point for business Concerto to search a user by mail or phone.'
  -
    name: Select-BusinessSelect
    description: 'Provides the list of business that a staff member may access.'
  -
    name: Send-NotificationInfo
    description: 'An endpoint that allows to send notifications to users of the certain business or location. This endpoint is available only for user with a special privilege. If you want to use this endpoint, contact with WellnessLiving support first.'
  -
    name: Send-NotificationSend
    description: 'An endpoint that allows to send notifications to users of the certain business or location. This endpoint is available only for user with a special privilege. If you want to use this endpoint, contact with WellnessLiving support first.'
  -
    name: Service-Category
    description: 'Retrieves information about service categories.'
  -
    name: Service-Edit
    description: 'Allows to create, edit and delete IP services.'
  -
    name: Service-Service
    description: 'Retrieves assets that are required for a service booking.'
  -
    name: Service-ServiceList
    description: 'Retrieves information about services in the current service category.'
  -
    name: Service-ServiceList52
    description: 'Retrieves information about services in the current service category. This is a new version of the {@link ServiceListApi} endpoint. It allows for filtering a list of services by multiple book now tabs.'
  -
    name: Setting-Setting
    description: 'Retrieves the user’s notification settings. Alternatively, this endpoint can be used to change a user’s notification settings.'
  -
    name: Share-PurchaseShare
    description: 'Shares a purchase to a specified social network.'
  -
    name: SignOut-SignOut
    description: 'Signs user out.'
  -
    name: Staff-List
    description: 'Retrieves information about staff members for the current service.'
  -
    name: Staff-StaffElement
    description: 'Can create or edit a staff member in a business. You can also use this endpoint to get information about a staff member''s activity in another business when using the {@link BusinessApi} endpoint.'
  -
    name: StaffApp-List
    description: 'Gets a list of clients whose names match a search string.'
  -
    name: StaffApp-ScheduleList
    description: 'Gets information about sessions (both classes and appointments) at a business on a given day.'
  -
    name: StaffApp-ScheduleListByToken
    description: 'An endpoint that returns information about a business schedule for a specified date. Version of {@link \Wl\Schedule\ScheduleList\StaffApp\ScheduleListApi} for access validation by security token.'
  -
    name: StaffList-StaffList
    description: 'Returns a list of all staff members working for a business.'
  -
    name: StaffView-StaffView
    description: 'Returns information about a specified staff member. This method can accept one staff key {@link StaffViewApi::$k_staff} or a staff list {@link StaffViewApi::$a_staff_list} but not both (an exception would be thrown).'
  -
    name: Store-Store
    description: 'Manages the booking wizard for the "Purchase Options" page.'
  -
    name: Subscribe-Subscribe
    description: 'Manages a user`s subscription in a business.'
  -
    name: Tab-Tab
    description: 'Retrieves a list of tabs for bookable services specific to the user and the location. The names and contents of these tabs can be customized by the business. For example, a business may have tabs named ‘Appointments’, ‘Group Appointments’, and ‘Room Rentals’.'
  -
    name: Tag-SearchTagList
    description: 'Returns a list of all existing search tags in the system. Search tags can be used for quick searches between businesses and services (mainly in the directories).'
  -
    name: Tag-Tag
    description: 'Retrieves, changes, or deletes a video tag.'
  -
    name: Tag-TagList
    description: 'Retrieves video tags.'
  -
    name: Tax-Tax
    description: 'Returns tax information for a business.'
  -
    name: Tax-TaxList
    description: 'Retrieves a list of taxes for a business.'
  -
    name: Term-Term
    description: 'Displays information about online waiver.'
  -
    name: Token-TokenPin
    description: 'Creates a one-time PIN code. This code must be used for generating a security token.'
  -
    name: Type-BusinessTypeList
    description: 'Retrieves a list of business types.'
  -
    name: Type-LoginType
    description: 'Retrieves information about login types. A login type is basically a client type. This information can be used to filter clients by their client type in the All Clients Report.'
  -
    name: User-UserGroup
    description: 'API to see client''s groups and add/remove the client to the group.'
  -
    name: Video-VideoElement
    description: 'Returns a list of video categories.'
  -
    name: Video-VideoList
    description: 'Returns a list of videos.'
  -
    name: View-View
    description: 'Returns information on a specified location.'
  -
    name: Visit-VisitAdd
    description: 'An endpoint for adding a gym visit.'
  -
    name: Visit-VisitStatus
    description: 'Views or changes the visit status.'
  -
    name: Watch-Watch
    description: 'Saves information about a watched video.'
  -
    name: WebSocket-Subscribe
    description: 'Checks whether a listener can subscribe to specified channel. If yes, subscribes it.'
  -
    name: WorkTime-LocationWorkTime
    description: 'Saves working hours for a specified location. Note that to run this endpoint, an authenticated user with specified permissions is required. Otherwise, use a guest account during the new business registration process (see {@link \Wl\Business\BusinessApi::sessionKey()}).'